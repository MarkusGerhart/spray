/*
* generated by Xtext
*/
package org.xspray.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xspray.xtext.services.XsprayGrammarAccess;

public class XsprayParser extends AbstractContentAssistParser {
	
	@Inject
	private XsprayGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xspray.xtext.ui.contentassist.antlr.internal.InternalXsprayParser createParser() {
		org.xspray.xtext.ui.contentassist.antlr.internal.InternalXsprayParser result = new org.xspray.xtext.ui.contentassist.antlr.internal.InternalXsprayParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMetaClassAccess().getAlternatives_7_2(), "rule__MetaClass__Alternatives_7_2");
					put(grammarAccess.getBehaviourAccess().getAlternatives(), "rule__Behaviour__Alternatives");
					put(grammarAccess.getShapeAccess().getAlternatives(), "rule__Shape__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getSprayStringAccess().getAlternatives(), "rule__SprayString__Alternatives");
					put(grammarAccess.getSprayElementAccess().getAlternatives(), "rule__SprayElement__Alternatives");
					put(grammarAccess.getColorAccess().getAlternatives(), "rule__Color__Alternatives");
					put(grammarAccess.getDiagramAccess().getGroup(), "rule__Diagram__Group__0");
					put(grammarAccess.getBehaviourGroupAccess().getGroup(), "rule__BehaviourGroup__Group__0");
					put(grammarAccess.getBehaviourGroupAccess().getGroup_3(), "rule__BehaviourGroup__Group_3__0");
					put(grammarAccess.getMetaClassAccess().getGroup(), "rule__MetaClass__Group__0");
					put(grammarAccess.getMetaClassAccess().getGroup_2(), "rule__MetaClass__Group_2__0");
					put(grammarAccess.getMetaClassAccess().getGroup_3(), "rule__MetaClass__Group_3__0");
					put(grammarAccess.getMetaClassAccess().getGroup_6(), "rule__MetaClass__Group_6__0");
					put(grammarAccess.getMetaClassAccess().getGroup_6_2(), "rule__MetaClass__Group_6_2__0");
					put(grammarAccess.getMetaClassAccess().getGroup_7(), "rule__MetaClass__Group_7__0");
					put(grammarAccess.getMetaClassAccess().getGroup_7_2_0(), "rule__MetaClass__Group_7_2_0__0");
					put(grammarAccess.getMetaClassAccess().getGroup_7_2_1(), "rule__MetaClass__Group_7_2_1__0");
					put(grammarAccess.getStandardBehaviourAccess().getGroup(), "rule__StandardBehaviour__Group__0");
					put(grammarAccess.getStandardBehaviourAccess().getGroup_2(), "rule__StandardBehaviour__Group_2__0");
					put(grammarAccess.getCustomBehaviourAccess().getGroup(), "rule__CustomBehaviour__Group__0");
					put(grammarAccess.getMetaReferenceAccess().getGroup(), "rule__MetaReference__Group__0");
					put(grammarAccess.getMetaReference2Access().getGroup(), "rule__MetaReference2__Group__0");
					put(grammarAccess.getLayoutAccess().getGroup(), "rule__Layout__Group__0");
					put(grammarAccess.getLayoutAccess().getGroup_2_0(), "rule__Layout__Group_2_0__0");
					put(grammarAccess.getLayoutAccess().getGroup_2_1(), "rule__Layout__Group_2_1__0");
					put(grammarAccess.getLayoutAccess().getGroup_2_2(), "rule__Layout__Group_2_2__0");
					put(grammarAccess.getLayoutAccess().getGroup_2_3(), "rule__Layout__Group_2_3__0");
					put(grammarAccess.getRectangleAccess().getGroup(), "rule__Rectangle__Group__0");
					put(grammarAccess.getConnectionAccess().getGroup(), "rule__Connection__Group__0");
					put(grammarAccess.getConnectionAccess().getGroup_3(), "rule__Connection__Group_3__0");
					put(grammarAccess.getConnectionAccess().getGroup_3_7_0(), "rule__Connection__Group_3_7_0__0");
					put(grammarAccess.getConnectionAccess().getGroup_3_7_1(), "rule__Connection__Group_3_7_1__0");
					put(grammarAccess.getConnectionAccess().getGroup_3_7_2(), "rule__Connection__Group_3_7_2__0");
					put(grammarAccess.getTextAccess().getGroup(), "rule__Text__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getLineAccess().getGroup(), "rule__Line__Group__0");
					put(grammarAccess.getContainerAccess().getGroup(), "rule__Container__Group__0");
					put(grammarAccess.getContainerAccess().getGroup_4(), "rule__Container__Group_4__0");
					put(grammarAccess.getMetaReferenceAsShapeAccess().getGroup(), "rule__MetaReferenceAsShape__Group__0");
					put(grammarAccess.getMetaReferenceAsShapeAccess().getGroup_2(), "rule__MetaReferenceAsShape__Group_2__0");
					put(grammarAccess.getMetaAttributeAsShapeAccess().getGroup(), "rule__MetaAttributeAsShape__Group__0");
					put(grammarAccess.getDiagramAccess().getNameAssignment_1(), "rule__Diagram__NameAssignment_1");
					put(grammarAccess.getDiagramAccess().getImport1Assignment_3(), "rule__Diagram__Import1Assignment_3");
					put(grammarAccess.getDiagramAccess().getImportPackageAssignment_5(), "rule__Diagram__ImportPackageAssignment_5");
					put(grammarAccess.getDiagramAccess().getModelfileExtensionAssignment_7(), "rule__Diagram__ModelfileExtensionAssignment_7");
					put(grammarAccess.getDiagramAccess().getBehaviourGroupsAssignment_8(), "rule__Diagram__BehaviourGroupsAssignment_8");
					put(grammarAccess.getDiagramAccess().getMetaClassesAssignment_9(), "rule__Diagram__MetaClassesAssignment_9");
					put(grammarAccess.getBehaviourGroupAccess().getNameAssignment_1(), "rule__BehaviourGroup__NameAssignment_1");
					put(grammarAccess.getBehaviourGroupAccess().getBehavioursAssignment_3_0(), "rule__BehaviourGroup__BehavioursAssignment_3_0");
					put(grammarAccess.getMetaClassAccess().getNameAssignment_1(), "rule__MetaClass__NameAssignment_1");
					put(grammarAccess.getMetaClassAccess().getAliasAssignment_2_1(), "rule__MetaClass__AliasAssignment_2_1");
					put(grammarAccess.getMetaClassAccess().getIconAssignment_3_1(), "rule__MetaClass__IconAssignment_3_1");
					put(grammarAccess.getMetaClassAccess().getRepresentedByAssignment_5(), "rule__MetaClass__RepresentedByAssignment_5");
					put(grammarAccess.getMetaClassAccess().getReferencesAssignment_6_2_0(), "rule__MetaClass__ReferencesAssignment_6_2_0");
					put(grammarAccess.getMetaClassAccess().getBehaviourGroupsAssignment_7_2_0_1(), "rule__MetaClass__BehaviourGroupsAssignment_7_2_0_1");
					put(grammarAccess.getMetaClassAccess().getBehavioursAssignment_7_2_1_0(), "rule__MetaClass__BehavioursAssignment_7_2_1_0");
					put(grammarAccess.getStandardBehaviourAccess().getTypeAssignment_0(), "rule__StandardBehaviour__TypeAssignment_0");
					put(grammarAccess.getStandardBehaviourAccess().getLabelAssignment_1(), "rule__StandardBehaviour__LabelAssignment_1");
					put(grammarAccess.getStandardBehaviourAccess().getPaletteCompartmentAssignment_2_1(), "rule__StandardBehaviour__PaletteCompartmentAssignment_2_1");
					put(grammarAccess.getCustomBehaviourAccess().getNameAssignment_0(), "rule__CustomBehaviour__NameAssignment_0");
					put(grammarAccess.getCustomBehaviourAccess().getLabelAssignment_1(), "rule__CustomBehaviour__LabelAssignment_1");
					put(grammarAccess.getMetaReferenceAccess().getNameAssignment_1(), "rule__MetaReference__NameAssignment_1");
					put(grammarAccess.getMetaReferenceAccess().getRepresentedByAssignment_3(), "rule__MetaReference__RepresentedByAssignment_3");
					put(grammarAccess.getMetaReference2Access().getNameAssignment_0(), "rule__MetaReference2__NameAssignment_0");
					put(grammarAccess.getMetaReference2Access().getRepresentedByAssignment_2(), "rule__MetaReference2__RepresentedByAssignment_2");
					put(grammarAccess.getLayoutAccess().getLineWidthAssignment_2_0_2(), "rule__Layout__LineWidthAssignment_2_0_2");
					put(grammarAccess.getLayoutAccess().getLineColorAssignment_2_1_2(), "rule__Layout__LineColorAssignment_2_1_2");
					put(grammarAccess.getLayoutAccess().getFillColorAssignment_2_2_2(), "rule__Layout__FillColorAssignment_2_2_2");
					put(grammarAccess.getLayoutAccess().getFigureAssignment_2_3_2(), "rule__Layout__FigureAssignment_2_3_2");
					put(grammarAccess.getLayoutAccess().getBoldAssignment_2_4(), "rule__Layout__BoldAssignment_2_4");
					put(grammarAccess.getLayoutAccess().getItalicAssignment_2_5(), "rule__Layout__ItalicAssignment_2_5");
					put(grammarAccess.getRectangleAccess().getLayoutAssignment_2(), "rule__Rectangle__LayoutAssignment_2");
					put(grammarAccess.getConnectionAccess().getLayoutAssignment_2(), "rule__Connection__LayoutAssignment_2");
					put(grammarAccess.getConnectionAccess().getFromAssignment_3_2(), "rule__Connection__FromAssignment_3_2");
					put(grammarAccess.getConnectionAccess().getToAssignment_3_5(), "rule__Connection__ToAssignment_3_5");
					put(grammarAccess.getConnectionAccess().getFromLabelAssignment_3_7_0_1(), "rule__Connection__FromLabelAssignment_3_7_0_1");
					put(grammarAccess.getConnectionAccess().getConnectionLabelAssignment_3_7_1_1(), "rule__Connection__ConnectionLabelAssignment_3_7_1_1");
					put(grammarAccess.getConnectionAccess().getToLabelAssignment_3_7_2_1(), "rule__Connection__ToLabelAssignment_3_7_2_1");
					put(grammarAccess.getTextAccess().getLayoutAssignment_2(), "rule__Text__LayoutAssignment_2");
					put(grammarAccess.getTextAccess().getValueAssignment_3(), "rule__Text__ValueAssignment_3");
					put(grammarAccess.getStringLiteralAccess().getNameAssignment(), "rule__StringLiteral__NameAssignment");
					put(grammarAccess.getMetaAttributeAccess().getNameAssignment(), "rule__MetaAttribute__NameAssignment");
					put(grammarAccess.getLineAccess().getLayoutAssignment_2(), "rule__Line__LayoutAssignment_2");
					put(grammarAccess.getContainerAccess().getLayoutAssignment_2(), "rule__Container__LayoutAssignment_2");
					put(grammarAccess.getContainerAccess().getPartsAssignment_4_0(), "rule__Container__PartsAssignment_4_0");
					put(grammarAccess.getMetaReferenceAsShapeAccess().getNameAssignment_1(), "rule__MetaReferenceAsShape__NameAssignment_1");
					put(grammarAccess.getMetaReferenceAsShapeAccess().getLabelPropertyAssignment_2_1(), "rule__MetaReferenceAsShape__LabelPropertyAssignment_2_1");
					put(grammarAccess.getMetaAttributeAsShapeAccess().getNameAssignment_1(), "rule__MetaAttributeAsShape__NameAssignment_1");
					put(grammarAccess.getLayoutAccess().getUnorderedGroup_2(), "rule__Layout__UnorderedGroup_2");
					put(grammarAccess.getConnectionAccess().getUnorderedGroup_3_7(), "rule__Connection__UnorderedGroup_3_7");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xspray.xtext.ui.contentassist.antlr.internal.InternalXsprayParser typedParser = (org.xspray.xtext.ui.contentassist.antlr.internal.InternalXsprayParser) parser;
			typedParser.entryRuleDiagram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public XsprayGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(XsprayGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
