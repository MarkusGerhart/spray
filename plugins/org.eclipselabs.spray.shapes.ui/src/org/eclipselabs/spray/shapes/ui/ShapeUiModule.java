/*
 * generated by Xtext
 */
package org.eclipselabs.spray.shapes.ui;

import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.ui.views.contentoutline.IContentOutlinePage;
import org.eclipse.xtext.common.ui.contentassist.TerminalsProposalProvider;
import org.eclipse.xtext.documentation.IEObjectDocumentationProvider;
import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.ui.editor.hover.IEObjectHoverProvider;
import org.eclipse.xtext.ui.editor.model.TokenTypeToStringMapper;
import org.eclipse.xtext.ui.editor.syntaxcoloring.AbstractAntlrTokenToAttributeIdMapper;
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightingConfiguration;
import org.eclipselabs.spray.shapes.ui.builder.ShapeBuilderParticipant;
import org.eclipselabs.spray.shapes.ui.builder.ShapeResourceDescriptionManager;
import org.eclipselabs.spray.shapes.ui.hover.ImageResourceVisitor;
import org.eclipselabs.spray.shapes.ui.hover.ShapesEObjectDocumentationProvider;
import org.eclipselabs.spray.shapes.ui.hover.ShapesEObjectHoverProvider;
import org.eclipselabs.spray.shapes.ui.linking.ShapeLinkingHelper;
import org.eclipselabs.spray.shapes.ui.linking.StyleEditorOpener;
import org.eclipselabs.spray.shapes.ui.linking.StyleResourceVisitor;
import org.eclipselabs.spray.shapes.ui.outline.ShapeOutlinePage;
import org.eclipselabs.spray.shapes.ui.syntaxcoloring.ShapeHighlightingConfiguration;
import org.eclipselabs.spray.shapes.ui.syntaxcoloring.ShapeTokenToAttributeIdMapper;
import org.eclipselabs.spray.xtext.generator.outputconfig.SprayOutputConfigurationProvider;

import com.google.inject.Binder;

/**
 * Use this class to register components to be used within the IDE.
 */
public class ShapeUiModule extends org.eclipselabs.spray.shapes.ui.AbstractShapeUiModule {
    public ShapeUiModule(AbstractUIPlugin plugin) {
        super(plugin);
    }

    public Class<? extends org.eclipse.xtext.generator.IOutputConfigurationProvider> bindIOutputConfigurationProvider() {
        return SprayOutputConfigurationProvider.class;
    }

    public Class<? extends AbstractAntlrTokenToAttributeIdMapper> bindAbstractAntlrTokenToAttributeIdMapper() {
        return ShapeTokenToAttributeIdMapper.class;
    }

    @Override
    public void configure(Binder binder) {
        super.configure(binder);
        binder.bind(TokenTypeToStringMapper.class).to(ShapeTokenToAttributeIdMapper.class);
    }

    public Class<? extends IHighlightingConfiguration> bindIHighlightingConfiguration() {
        return ShapeHighlightingConfiguration.class;
    }

    @Override
    public Class<? extends IContentOutlinePage> bindIContentOutlinePage() {
        return ShapeOutlinePage.class;
    }

    @Override
    public Class<? extends org.eclipse.xtext.ui.editor.hyperlinking.IHyperlinkHelper> bindIHyperlinkHelper() {
        return ShapeLinkingHelper.class;
    }

    public Class<? extends StyleEditorOpener> bindStyleEditorOpener() {
        return StyleEditorOpener.class;
    }

    public Class<? extends StyleResourceVisitor> bindStyleResourceVisitor() {
        return StyleResourceVisitor.class;
    }

    public Class<? extends IEObjectHoverProvider> bindIEObjectHoverProvider() {
        return ShapesEObjectHoverProvider.class;
    }

    public Class<? extends IEObjectDocumentationProvider> bindIEObjectDocumentationProvider() {
        return ShapesEObjectDocumentationProvider.class;
    }

    public Class<? extends ImageResourceVisitor> bindImageResourceVisitor() {
        return ImageResourceVisitor.class;
    }

    public Class<? extends IResourceDescription.Manager> bindIResourceDescription$Manager() {
        return ShapeResourceDescriptionManager.class;
    }

    public Class<? extends org.eclipse.xtext.builder.IXtextBuilderParticipant> bindIXtextBuilderParticipant() {
        return ShapeBuilderParticipant.class;
    }

    public Class<? extends TerminalsProposalProvider> bindTerminalsProposalProvider() {
        return TerminalsProposalProvider.class;
    }
}
