/*
 * generated by Xtext
 */
package org.eclipselabs.spray.shapes.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.common.types.access.IJvmTypeProvider;
import org.eclipse.xtext.common.types.xtext.ui.ITypesProposalProvider;
import org.eclipse.xtext.common.types.xtext.ui.ITypesProposalProvider.Filter;
import org.eclipse.xtext.common.types.xtext.ui.TypeMatchFilters;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipselabs.spray.runtime.graphiti.styles.ISprayStyle;
import org.eclipselabs.spray.shapes.scoping.ShapeScopeProvider;
import org.eclipselabs.spray.shapes.ShapeStyleRef;
import org.eclipselabs.spray.shapes.ShapesPackage;
import org.eclipselabs.spray.styles.StylesPackage;

import com.google.inject.Inject;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class ShapeProposalProvider extends AbstractShapeProposalProvider {
    @Inject
    ITypesProposalProvider   proposalProvider;
    
    @Inject
    private ShapeScopeProvider shapeScopeProvider;

    @Inject
    IJvmTypeProvider.Factory typeProviderFactory;

    @Override
    public void complete_JvmTypeReference(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        IJvmTypeProvider typeProvider = typeProviderFactory.findOrCreateTypeProvider(model.eResource().getResourceSet());
        Filter filter = TypeMatchFilters.and(TypeMatchFilters.isPublic(), TypeMatchFilters.canInstantiate());
        //		if (model instanceof ShapeRef) {
        //			JvmType superType = typeProvider.findTypeByName(ISprayShape.class.getName());
        //			proposalProvider.createSubTypeProposals(superType, this, context, ShapesPackage.Literals.SHAPE_REF__REF, filter, acceptor);
        //		} else {
        if (model instanceof ShapeStyleRef) {
            JvmType superType = typeProvider.findTypeByName(ISprayStyle.class.getName());
            proposalProvider.createSubTypeProposals(superType, this, context, ShapesPackage.Literals.SHAPE_STYLE_REF__STYLE, filter, acceptor);
            
            IScope scope = shapeScopeProvider.getScope(model, ShapesPackage.Literals.SHAPE_STYLE_REF__STYLE);
            for(IEObjectDescription elem : scope.getAllElements()) {
            	if(elem.getEClass() == TypesPackage.Literals.JVM_GENERIC_TYPE) {
            		acceptor.accept(createCompletionProposal(elem.getQualifiedName().toString(), context));
            	}
            }
        }
        super.complete_JvmTypeReference(model, ruleCall, context, acceptor);
    }
}
