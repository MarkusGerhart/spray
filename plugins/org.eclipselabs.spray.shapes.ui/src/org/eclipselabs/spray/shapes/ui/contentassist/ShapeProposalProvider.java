/*
 * generated by Xtext
 */
package org.eclipselabs.spray.shapes.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.common.types.access.IJvmTypeProvider;
import org.eclipse.xtext.common.types.xtext.ui.ITypesProposalProvider;
import org.eclipse.xtext.common.types.xtext.ui.ITypesProposalProvider.Filter;
import org.eclipse.xtext.common.types.xtext.ui.TypeMatchFilters;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipselabs.spray.shapes.shapes.ShapesPackage;
import org.eclipselabs.spray.styles.ISprayStyle;

import com.google.inject.Inject;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class ShapeProposalProvider extends AbstractShapeProposalProvider {
	@Inject
	ITypesProposalProvider proposalProvider;

	@Inject
	IJvmTypeProvider.Factory typeProviderFactory;

	@Override
	public void complete_JvmTypeReference(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		IJvmTypeProvider typeProvider = typeProviderFactory
				.findOrCreateTypeProvider(model.eResource().getResourceSet());
		JvmType superType = typeProvider.findTypeByName(ISprayStyle.class
				.getName());
		Filter filter = TypeMatchFilters.and(TypeMatchFilters.isPublic(),
				TypeMatchFilters.canInstantiate());
		proposalProvider.createSubTypeProposals(superType, this, context,
				ShapesPackage.Literals.WITH_STYLE__STYLE, filter, acceptor);
		super.complete_JvmTypeReference(model, ruleCall, context, acceptor);
	}
}
