/*******************************************************************************
 * <copyright>
 *
 * Copyright (c) 2005, 2010 SAP AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    SAP AG - initial API, implementation and documentation
 *
 * </copyright>
 *
 *******************************************************************************/
package com.systemizeit.pmw.diagrams.util;

import java.io.IOException;
import java.util.HashMap;

import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.emf.cdo.CDOObject;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.graphiti.mm.algorithms.styles.Color;
import org.eclipse.graphiti.mm.pictograms.Diagram;
import org.eclipse.graphiti.services.Graphiti;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.InputDialog;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.widgets.ColorDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IEditorReference;
import org.eclipse.ui.IViewReference;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.views.properties.PropertySheet;

import ProductModelWorkbench.ProductModellingWorkbenchMetaModel.Concepts.Concept;
import ProductModelWorkbench.ProductModellingWorkbenchMetaModel.Concepts.ConceptComposition;
import ProductModelWorkbench.ProductModellingWorkbenchMetaModel.Concepts.LogicConceptAssociation;
import ProductModelWorkbench.ProductModellingWorkbenchMetaModel.Parts.AttributeSpec;
import ProductModelWorkbench.ProductModellingWorkbenchMetaModel.Parts.ComposedVersionedPart;
import ProductModelWorkbench.ProductModellingWorkbenchMetaModel.Parts.Part;
import ProductModelWorkbench.ProductModellingWorkbenchMetaModel.Parts.PropertySpec;
import ProductModelWorkbench.ProductModellingWorkbenchMetaModel.Parts.StructuredVersionedPart;
import ProductModelWorkbench.ProductModellingWorkbenchMetaModel.Parts.VersionedPart;
import ProductModelWorkbench.ProductModellingWorkbenchMetaModel.Usage.Usage;
import ProductModelWorkbench.util.CreationHelper;

import com.systemizeit.pmw.diagrams.PmwDiagramEditorInput;

public class SampleUtil {

    private static final String PROPERTY_SHEET_ID = "org.eclipse.ui.views.PropertySheet";

    static public boolean isInvalid(Object object) {
        if (object instanceof CDOObject) {
            CDOObject cdoObject = (CDOObject) object;
            return cdoObject.cdoInvalid();
        } else {
            return false;
        }
    }

    static public void closeEditor(Concept concept) {
        String name = concept.getKind();
        String uri = "graphiti:///concept/" + concept.getId() + "#/";
        closeEditor(name, uri);
    }

    static public void closeEditor(VersionedPart part) {
        String name = part.getKind() + " V" + part.getVersion();
        String uri = "graphiti:///versioned_part/" + part.getId() + "#/";
        closeEditor(name, uri);
    }

    public static void closeEditor(Diagram diagram) {
        if (diagram == null) {
            System.out.println("Sampleutil.closeEditor: diagram == null");
            return;
        }
        Resource r = diagram.eResource();
        closeEditor(diagram.getName(), r.getURI().appendFragment(r.getURIFragment(diagram)).toString());
    }

    static public void closePropertyView() {
        IViewReference view_part = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findViewReference(PROPERTY_SHEET_ID);
        if (view_part != null) {
            PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().hideView(view_part);
        }
    }

    static protected PropertySheet sheet = null;

    static public void openPropertyView() {
        try {
            PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(PROPERTY_SHEET_ID);
        } catch (PartInitException e) {
            // TODO Auto-generated catch block
            System.out.println("SampleUtil:: Failed to open property view.");
            e.printStackTrace();
        }
    }

    static protected void closeEditor(String name, String uri) {
        IWorkbenchWindow[] x = PlatformUI.getWorkbench().getWorkbenchWindows();
        for (int i = 0; i < x.length; i++) {
            IWorkbenchPage[] pages = x[i].getPages();
            for (int j = 0; j < pages.length; j++) {
                IEditorReference[] editorReferences = pages[j].getEditorReferences();
                for (int k = 0; k < editorReferences.length; k++) {
                    IEditorReference editorRef = editorReferences[k];
                    if (editorRef.getName().equals(name)) {
                        //                        IEditorPart editor = editorReferences[k].getEditor(false);
                        try {
                            if (editorReferences[k].getEditorInput() instanceof PmwDiagramEditorInput) {
                                PmwDiagramEditorInput input = (PmwDiagramEditorInput) editorReferences[k].getEditorInput();
                                if (input.getUriString().equals(uri)) {
                                    // found it, now close it
                                    IEditorReference[] tmp = new IEditorReference[1];
                                    tmp[0] = editorReferences[k];
                                    pages[j].closeEditors(tmp, false);
                                    return;
                                }
                            }
                        } catch (PartInitException e) {
                            // TODO Auto-generated catch block
                            System.out.println("SampleUtil.closeEditor: cannot find editorReference");
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
    }

    /**
     * Mainly copied from EcoreUtil.java
     * 
     * @param eObject
     * @return
     */
    //    static public boolean noMoreReferences(EObject eObject) {
    //        EObject rootEObject = EcoreUtil.getRootContainer(eObject);
    //        Resource resource = rootEObject.eResource();
    //
    //        Collection<EStructuralFeature.Setting> usages;
    //        if (resource == null) {
    //            usages = UsageCrossReferencer.find(eObject, rootEObject);
    //        } else {
    //            ResourceSet resourceSet = resource.getResourceSet();
    //            if (resourceSet == null) {
    //                usages = UsageCrossReferencer.find(eObject, resource);
    //            } else {
    //                usages = UsageCrossReferencer.find(eObject, resourceSet);
    //            }
    //        }
    //
    //        for (EStructuralFeature.Setting setting : usages) {
    //            if (setting.getEStructuralFeature().isChangeable()) {
    //                System.err.println("Referenced by: [" + setting.toString() + "] + eObject [" + setting.getEObject().toString() + "]");
    //            }
    //        }
    //        return usages.isEmpty();
    //    }

    /**
     * Opens an simple input dialog with OK and Cancel buttons.
     * <p>
     * 
     * @param dialogTitle
     *            the dialog title, or <code>null</code> if none
     * @param dialogMessage
     *            the dialog message, or <code>null</code> if none
     * @param initialValue
     *            the initial input value, or <code>null</code> if none
     *            (equivalent to the empty string)
     * @return the string
     */
    public static String askString(String dialogTitle, String dialogMessage, String initialValue) {
        String ret = null;
        Shell shell = getShell();
        InputDialog inputDialog = new InputDialog(shell, dialogTitle, dialogMessage, initialValue, null);
        int retDialog = inputDialog.open();
        if (retDialog == Window.OK) {
            ret = inputDialog.getValue();
        }
        return ret;
    }

    public static boolean confirmDialog(String dialogTitle, String dialogMessage) {
        Shell shell = getShell();
        MessageDialog dialog = new MessageDialog(shell, dialogTitle, (Image) null, dialogMessage, MessageDialog.NONE, new String[]{IDialogConstants.YES_LABEL, IDialogConstants.NO_LABEL}, 0) {
            protected int getShellStyle() {
                return super.getShellStyle() | SWT.SHEET;
            }
        };
        // ensure yes is the default

        return dialog.open() == 0;
    }

    public static void infoString(String dialogTitle, String dialogMessage) {
        Shell shell = getShell();
        MessageDialog.openError(shell, dialogTitle, dialogMessage);
    }

    /**
     * Opens a dialog to change the color.
     * 
     * @param color
     *            the color to change
     * @return the changed color
     */
    public static Color editColor(Color color) {
        if (color != null && color.eContainer() instanceof Diagram) {
            Shell shell = getShell();
            ColorDialog colorDialog = new ColorDialog(shell);
            colorDialog.setText("choose color");
            colorDialog.setRGB(new RGB(color.getRed(), color.getGreen(), color.getBlue()));

            RGB retRgb = colorDialog.open();
            if (retRgb == null) {
                return null;
            }

            Diagram diagram = (Diagram) color.eContainer();
            Color newColor = Graphiti.getGaService().manageColor(diagram, retRgb.red, retRgb.green, retRgb.blue);
            return newColor;

        }

        return null;
    }

    /**
     * Returns the currently active Shell.
     * 
     * @return The currently active Shell.
     */
    private static Shell getShell() {
        return PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
    }

    /**
     * @param obj
     * @param d
     * @param modelExtension
     * @throws CoreException
     * @throws IOException
     */
    public static void saveToModelFile(final EObject obj, final Diagram d, String modelExtension) throws CoreException, IOException {
        URI uri = d.eResource().getURI();
        uri = uri.trimFragment();
        uri = uri.trimFileExtension();
        uri = uri.appendFileExtension(modelExtension);
        ResourceSet rSet = d.eResource().getResourceSet();
        final IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();
        IResource file = workspaceRoot.findMember(uri.toPlatformString(true));
        if (file == null || !file.exists()) {
            Resource createResource = rSet.createResource(uri);
            createResource.save(new HashMap());
            createResource.setTrackingModification(true);
        }
        final Resource resource = rSet.getResource(uri, true);
        resource.getContents().add(obj);
    }

    //    static public boolean diagramContains(PMWDiagramEditor editor, Diagram diagram, Concept concept) {
    //        Object root = getRootObject(editor, diagram);
    //        if (root instanceof Concept) {
    //            Concept rootConcept = (Concept) root;
    //            return rootConcept == concept;
    //        } else if (root instanceof VersionedPart) {
    //            VersionedPart rootPart = (VersionedPart) root;
    //            ConceptComposition compo = CreationHelper.getInstance().findComposition(rootPart, concept);
    //            if (compo != null) {
    //                return true;
    //            }
    //            LogicConceptAssociation assoc = CreationHelper.getInstance().findLogicConceptAssociation(rootPart, concept);
    //            if (assoc != null) {
    //                return true;
    //            }
    //            if (rootPart instanceof ComposedVersionedPart) {
    //                ComposedVersionedPart composedPart = (ComposedVersionedPart) rootPart;
    //                for (AttributeSpec attspec : composedPart.getAttributeSpecs()) {
    //                    if (attspec instanceof PropertySpec) {
    //                        PropertySpec spec = (PropertySpec) attspec;
    //                        for (LogicConceptAssociation ass : spec.getLogicPartAssociations()) {
    //                            if (ass.getConcept() == concept) {
    //                                return true;
    //                            }
    //                        }
    //                    }
    //                }
    //            }
    //        }
    //        return false;
    //    }

    //    static public boolean diagramContains(PMWDiagramEditor editor, Diagram diagram, Part part) {
    //        Object root = getRootObject(editor, diagram);
    //        if (root instanceof Concept) {
    //            Concept rootConcept = (Concept) root;
    //            return (part != null) && (part.getOwningConcept() != null) && (part.getOwningConcept() == rootConcept);
    //        } else if (root instanceof VersionedPart) {
    //            VersionedPart rootPart = (VersionedPart) root;
    //            if (part == rootPart) {
    //                return true;
    //            } else {
    //                if (rootPart instanceof StructuredVersionedPart) {
    //                    StructuredVersionedPart structuredPart = (StructuredVersionedPart) rootPart;
    //                    if (structuredPart.getAttributeSpecs().contains(part)) {
    //                        return true;
    //                    }
    //                }
    //            }
    //
    //        }
    //        return false;
    //    }
    //
    //    static private Object getRootObject(PMWDiagramEditor editor, Diagram diagram) {
    //        IFeatureProvider fp = ((PmwDiagramEditorInput) editor.getEditorInput()).getDiagramCreator().getFeatureProvider();
    //        Object root = fp.getBusinessObjectForPictogramElement(diagram);
    //        return root;
    //    }

    static public boolean artefactContains(Object artefact, Part part) {
        if (artefact instanceof Concept) {
            Concept parent = (Concept) artefact;
            return conceptContains(parent, part);
        } else if (artefact instanceof Part) {
            Part parent = (Part) artefact;
            return partContains(parent, part);
        }
        return false;
    }

    static public boolean artefactContains(Object artefact, Concept concept) {
        if (artefact instanceof Concept) {
            Concept parent = (Concept) artefact;
            return conceptContains(parent, concept);
        } else if (artefact instanceof Part) {
            Part parent = (Part) artefact;
            return partContains(parent, concept);
        }
        return false;
    }

    static public boolean conceptContains(Concept parent, Concept concept) {
        return parent == concept;
    }

    static public boolean conceptContains(Concept parent, Part part) {
        return (part != null) && (part.getOwningConcept() != null) && (part.getOwningConcept() == parent);
    }

    static public boolean partContains(Part parent, Part part) {
        if (parent instanceof VersionedPart) {
            VersionedPart rootPart = (VersionedPart) parent;
            if (part == rootPart) {
                return true;
            } else {
                if (rootPart instanceof StructuredVersionedPart) {
                    StructuredVersionedPart structuredPart = (StructuredVersionedPart) rootPart;
                    if (structuredPart.getAttributeSpecs().contains(part)) {
                        return true;
                    }
                }
            }

        }
        return false;
    }

    static public boolean partContains(Part parent, Concept concept) {
        if (parent instanceof VersionedPart) {
            VersionedPart rootPart = (VersionedPart) parent;
            ConceptComposition compo = CreationHelper.getInstance().findComposition(rootPart, concept);
            if (compo != null) {
                return true;
            }
            LogicConceptAssociation assoc = CreationHelper.getInstance().findLogicConceptAssociation(rootPart, concept);
            if (assoc != null) {
                return true;
            }
            if (rootPart instanceof ComposedVersionedPart) {
                ComposedVersionedPart composedPart = (ComposedVersionedPart) rootPart;
                for (AttributeSpec attspec : composedPart.getAttributeSpecs()) {
                    if (attspec instanceof PropertySpec) {
                        PropertySpec spec = (PropertySpec) attspec;
                        for (LogicConceptAssociation ass : spec.getLogicPartAssociations()) {
                            if (ass.getConcept() == concept) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    static public boolean artefactContains(Object artefact, Usage usage) {
        Part versionedPart = ((Usage) usage).getVersionedPart();
        // part canb be null if it is just created.
        if ((versionedPart != null) && SampleUtil.artefactContains(artefact, versionedPart)) {
            return true;
        } else {
            return false;
        }
    }
}
