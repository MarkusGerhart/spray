grammar org.eclipselabs.spray.shapes.Shape with org.eclipselabs.spray.styles.Style // with org.eclipse.xtext.common.Terminals

import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

generate shapes 'http://www.eclipselabs.org/spray/shapes/Shape'

ShapeContainer:
	shapes+=ShapeDefinition*;

ShapeDefinition: 
	'shape' name=ID  ('(' param+=JvmFormalParameter ("," param+=JvmFormalParameter)* ')')? (withStyle=WithStyle)? '{'
		shapeLayout=ShapeLayout
	   	shape+=Shape+
	'}';

Shape: Line | Polyline | Rectangle | RoundedRectangle | Polygon | Ellipse | Text;

Line: {Line} 'line' (withStyle=WithStyle)? ( '{' layout=LineLayout shape+=Shape* '}' ) ;
Polyline: {Polyline} 'polyline' (withStyle=WithStyle)? ( '{' layout=PolyLineLayout shape+=Shape* '}' )?;
Rectangle: {Rectangle} 'rectangle'  (withStyle=WithStyle)? ( '{' layout=RectangleEllipseLayout shape+=Shape* '}' )?;
RoundedRectangle: {RoundedRectangle} 'rounded-rectangle' (withStyle=WithStyle)? (layout=RoundedRectangleLayout shape+=Shape* '}' )?;
Polygon: {Polygon} 'polygon' (withStyle=WithStyle)? ( '{' layout=PolyLineLayout shape+=Shape* '}' )?;
Ellipse: {Ellipse} 'ellipse' (withStyle=WithStyle)? ( '{' layout=RectangleEllipseLayout shape+=Shape* '}' )?;
Text: {Text} 'text' (withStyle=WithStyle)? ( '{' layout=TextLayout body=XExpression '}' )?;

ShapeLayout:
	{ShapeLayout} 
	(
	   ('size-min'     '(' 'width' '=' minwidth=INT ',' 'height' '=' minheight=INT ')' )? 
	   ('size-default' '(' 'width' '=' defwidth=INT ',' 'height' '=' defheight=INT ')' )? 
	   ('size-max'     '(' 'width' '=' maxwidth=INT ',' 'height' '=' maxheight=INT ')' )? 
	   ('stretching'   '(' 'horizontal' '=' stretchH=Boolean ',' 'vertical' '=' stretchV=Boolean ')' )? 
	   ('proportional' '=' proportional=Boolean)? 
	   ('angle'        '=' angle=DOUBLE)?
	);

RectangleEllipseLayout:
	{RectangleEllipseLayout} (
    	(common=CommonLayout) & 
    	(layout=ShapestyleLayout)? &
    	(anchor=Anchor)?  
    );

LineLayout:
	{LineLayout} (
		(point1+=Point) & 
		(point2+=Point) & 
		(layout=ShapestyleLayout)? &
		(anchor=Anchor)? 
	);

PolyLineLayout:
	{PolyLineLayout} (
	   (point1+=Point) & 
	   (point2+=Point+) &
	   (layout=ShapestyleLayout)? &
	   (anchor=Anchor)? 
	);

RoundedRectangleLayout:
	{RoundedRectangleLayout} (
    	(common=CommonLayout) &
    	('curve' '(' 'width' '=' curveWidth=INT ',' 'height' '=' curveHeight=INT )? & 
    	(layout=ShapestyleLayout)? &
    	(anchor=Anchor)?  
    );

TextLayout:
	{TextLayout} (
		('align' '(' ( 'horizontal' '=' hAlign=HAlign ',' 'vertical' '=' vAlign=VAlign)? ')')? & 
	  	(layout=ShapestyleLayout)? &
	  	(anchor=Anchor)? 
	);

ShapestyleLayout: {ShapestyleLayout} ( 'style' '(' layout=StyleLayout ')' );

WithStyle: 'with' (style=JvmTypeReference);

CommonLayout:
	{CommonLayout} ( 
	   ('position' '(' ( 'x' '=' xcor=INT ',' 'y' '=' ycor=INT )? ')' ) &
	   ('size' '(' ( 'width' '=' width=INT ',' 'heigth' '=' heigth=INT )? ')' )
    ); 
    
Anchor: {Anchor}(   
	('anchor' '('('offset' '=' offset=DOUBLE)? ('align' '=' align=VAlign)? ('distance' '=' distance=INT)? ('angle' '=' angle=DOUBLE)? ')')
); 

Point: {Point} ( ('point' '(' 'x' '=' xcor=INT ',' 'y' '=' ycor=INT (',' 'curveX' '=' curvex=INT ',' 'curveY' '=' curvey=INT)? ')' ) );
Boolean returns ecore::EBoolean: 'true' | 'false';
enum HAlign: LEFT='left' | CENTER='center' | RIGHT='right';
enum VAlign: TOP='top' | MIDDLE='middle' | BOTTOM='bottom';