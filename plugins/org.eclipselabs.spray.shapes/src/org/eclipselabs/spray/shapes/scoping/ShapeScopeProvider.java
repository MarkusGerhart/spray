/*
 * generated by Xtext
 */
package org.eclipselabs.spray.shapes.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.MapBasedScope;
import org.eclipse.xtext.xbase.scoping.LocalVariableScopeContext;
import org.eclipse.xtext.xbase.scoping.XbaseScopeProvider;
import org.eclipselabs.spray.shapes.shapes.ShapeDefinition;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class ShapeScopeProvider extends XbaseScopeProvider {

	/**
	 * Gets the Scope of a JvmParametrizedType by refercing to the Shape or the
	 * Style Interface
	 */
//	@Override
//	public IScope getScope(EObject context, EReference reference) {
//		if (reference == TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE) {
//			ShapeRef shape = EcoreUtil2.getContainerOfType(context, ShapeRef.class);
//			ShapeStyleRef style = EcoreUtil2.getContainerOfType(context, ShapeStyleRef.class);
//			if (shape != null) {
//				return getShapeTypeScope(shape);
//			}
//			if (style != null) {
//				return getStyleTypeScope(style);
//			}
//		}
//		return super.getScope(context, reference);
//	}

	/**
	 * Returns the Scope of a Style by referrincing the Style Interface
	 * (ISprayStyle)
	 * 
	 * @param style
	 *            of the ShapeStyleRef context
	 * @return the restricted IScope
	 */
//	protected IScope getStyleTypeScope(ShapeStyleRef style) {
//		IScope typesScope = delegateGetScope(style, TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE);
//		Predicate<IEObjectDescription> stylesFilter = new StyleScopeRestrictor();
//		IScope result = new FilteringScope(typesScope, stylesFilter);
//		return result;
//	}

	/**
	 * Returns the Scope of another Shape by referrincing the Shape Interface
	 * (ISprayShape)
	 * 
	 * @param shape
	 *            the ShapeRef context
	 * @return the restricted IScope
	 */
//	protected IScope getShapeTypeScope(ShapeRef shape) {
//		IScope typesScope = delegateGetScope(shape, TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE);
//		Predicate<IEObjectDescription> shapesFilter = new ShapeScopeRestrictor();
//		IScope result = new FilteringScope(typesScope, shapesFilter);
//		return result;
//	}

	/**
	 * Add Shape Parameters to the Scope of Local Variables
	 */
	@Override
	protected IScope createLocalVarScope(IScope parentScope, LocalVariableScopeContext scopeContext) {
		if (scopeContext.getContext() instanceof ShapeDefinition) {
			ShapeDefinition shapeDefinition = (ShapeDefinition) scopeContext.getContext();
			EList<JvmFormalParameter> descriptions = shapeDefinition.getParam();
			List<IEObjectDescription> descrList = new ArrayList<IEObjectDescription>();
			for (JvmFormalParameter param : descriptions) {
				IEObjectDescription description = EObjectDescription.create(param.getName(), param, null);
				descrList.add(description);
			}
			return MapBasedScope.createScope(super.createLocalVarScope(parentScope, scopeContext), descrList);
		}
		return super.createLocalVarScope(parentScope, scopeContext);
	}

}