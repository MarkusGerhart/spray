/*
 * generated by Xtext
 */
package org.eclipselabs.spray.shapes.scoping;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.FilteringScope;
import org.eclipse.xtext.xbase.scoping.XbaseScopeProvider;
import org.eclipselabs.spray.shapes.shapes.WithStyle;

import com.google.common.base.Predicate;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class ShapeScopeProvider extends XbaseScopeProvider {

	@Override
	public IScope getScope(EObject context, EReference reference) {
		if (reference == TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE) {
			WithStyle withStyle = EcoreUtil2.getContainerOfType(context,
					WithStyle.class);
			if (withStyle != null) {
				return getStyleTypeScope(withStyle);
			}
		}
		return super.getScope(context, reference);
	}

	protected IScope getStyleTypeScope(WithStyle withStyle) {
		IScope typesScope = delegateGetScope(withStyle,
				TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE);
		Predicate<IEObjectDescription> stylesFilter = new StyleScopeRestrictor();
		IScope result = new FilteringScope(typesScope, stylesFilter);
		return result;
	}

}