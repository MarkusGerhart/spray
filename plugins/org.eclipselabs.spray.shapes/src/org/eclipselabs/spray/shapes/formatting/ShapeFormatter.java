/*
 * generated by Xtext
 */
package org.eclipselabs.spray.shapes.formatting;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;
import org.eclipselabs.spray.shapes.services.ShapeGrammarAccess;

import com.google.inject.Inject;

/**
 * This class contains custom formatting description.
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an
 * example
 */
public class ShapeFormatter extends AbstractDeclarativeFormatter {
    @Inject
    private ShapeGrammarAccess grammar;

    @Override
    protected void configureFormatting(FormattingConfig c) {
        c.setLinewrap(0, 1, 2).before(grammar.getSL_COMMENTRule());
        c.setLinewrap(0, 1, 2).before(grammar.getML_COMMENTRule());
        c.setLinewrap(0, 1, 1).after(grammar.getML_COMMENTRule());

        c.setAutoLinewrap(120);

        handleBlocks(c);

        List<Keyword> bracketsToIgnore = new ArrayList<Keyword>();
        bracketsToIgnore.add(grammar.getHighlightingValuesAccess().getLeftParenthesisKeyword_1());
        bracketsToIgnore.add(grammar.getCompartmentInfoAccess().getLeftParenthesisKeyword_1());
        bracketsToIgnore.add(grammar.getCompartmentInfoAccess().getLeftParenthesisKeyword_2_1_1());
        
        for (Pair<Keyword, Keyword> kw : grammar.findKeywordPairs("(", ")")) {
        	if(!bracketsToIgnore.contains(kw.getFirst())) {
	            c.setSpace(" ").before(kw.getFirst());
	            c.setNoSpace().after(kw.getFirst());
	            c.setNoSpace().before(kw.getSecond());
        	}
        }

        // no space around =, except for text value assignment
        for (Keyword kw : grammar.findKeywords("=")) {
            if (kw == grammar.getTextBodyAccess().getEqualsSignKeyword_2()) {
                c.setSpace(" ").around(kw);
            } else {
                c.setNoSpace().around(kw);
            }
        }

        c.setSpace(" ").around(grammar.getCompartmentInfoAccess().getEqualsSignKeyword_2_0_1());

        List<Keyword> commasToIgnore = new ArrayList<Keyword>();
        commasToIgnore.add(grammar.getCompartmentInfoAccess().getCommaKeyword_2_1_5());
        
        // no space befor comma, one space after
        for (Keyword kw : grammar.findKeywords(",")) {
        	if(!commasToIgnore.contains(kw)) {
        		c.setNoSpace().before(kw);
        		c.setSpace(" ").after(kw);
        	}
        }
        
        c.setNoSpace().before(grammar.getCompartmentInfoAccess().getCommaKeyword_2_1_5());
        c.setLinewrap().after(grammar.getCompartmentInfoAccess().getCommaKeyword_2_1_5());

        handleNoSpaceBeforeINT(c);

        handleLineWrapBeforeKeywords(c);

        c.setLinewrap(2).between(grammar.getShapeDefinitionRule(), grammar.getShapeDefinitionRule());
        c.setLinewrap(2).between(grammar.getConnectionDefinitionRule(), grammar.getConnectionDefinitionRule());
        c.setLinewrap(2).between(grammar.getConnectionDefinitionRule(), grammar.getShapeDefinitionRule());
        c.setLinewrap(2).between(grammar.getShapeDefinitionRule(), grammar.getConnectionDefinitionRule());

        c.setIndentation(
       		grammar.getCompartmentInfoAccess().getLeftParenthesisKeyword_1(), 
       		grammar.getCompartmentInfoAccess().getRightParenthesisKeyword_3()
        );
        
        c.setLinewrap().after(grammar.getCompartmentInfoAccess().getLeftParenthesisKeyword_1());
        c.setLinewrap().around(grammar.getCompartmentInfoAccess().getRightParenthesisKeyword_3());
        
        c.setLinewrap().after(grammar.getHighlightingValuesAccess().getLeftParenthesisKeyword_1());
        c.setLinewrap().around(grammar.getHighlightingValuesAccess().getRightParenthesisKeyword_6());

        c.setLinewrap().around(grammar.getHighlightingValuesAccess().getSelectedAssignment_2_2());
        c.setLinewrap().around(grammar.getHighlightingValuesAccess().getMultiselectedAssignment_3_2());
        c.setLinewrap().around(grammar.getHighlightingValuesAccess().getAllowedAssignment_4_2());
        c.setLinewrap().around(grammar.getHighlightingValuesAccess().getUnallowedAssignment_5_2());
        
        c.setIndentation(
       		grammar.getHighlightingValuesAccess().getLeftParenthesisKeyword_1(), 
       		grammar.getHighlightingValuesAccess().getRightParenthesisKeyword_6()
        );
        
        c.setLinewrap().after(grammar.getCompartmentInfoAccess().getLeftParenthesisKeyword_2_1_1());
        c.setLinewrap().around(grammar.getCompartmentInfoAccess().getRightParenthesisKeyword_2_1_9());
        
        c.setLinewrap().around(grammar.getCompartmentInfoAccess().getStretchHAssignment_2_1_4());
        c.setLinewrap().around(grammar.getCompartmentInfoAccess().getStretchVAssignment_2_1_8());

        c.setIndentation(
       		grammar.getCompartmentInfoAccess().getLeftParenthesisKeyword_2_1_1(), 
       		grammar.getCompartmentInfoAccess().getRightParenthesisKeyword_2_1_9()
        );
        
        c.setLinewrap().around(grammar.getCommonLayoutRule());
    }

    protected void handleLineWrapBeforeKeywords(FormattingConfig c) {
        // line wraps
        c.setLinewrap().before(grammar.getShapeRule());
        c.setLinewrap().before(grammar.getShapeConnectionRule());
        c.setLinewrap().before(grammar.getPointRule());
        c.setLinewrap().before(grammar.getPlacingDefinitionAccess().getPlacingKeyword_0());
        c.setLinewrap().before(grammar.getAnchorPositionRule());
        c.setLinewrap().before(grammar.getCommonLayoutAccess().getPositionKeyword_1_0_0());
        c.setLinewrap().before(grammar.getCommonLayoutAccess().getSizeKeyword_1_1_0());
        c.setLinewrap().before(grammar.getRoundedRectangleLayoutAccess().getCurveKeyword_1_1_0());
        c.setLinewrap().before(grammar.getTextLayoutAccess().getAlignKeyword_1_1_0());
        c.setLinewrap().before(grammar.getTextBodyAccess().getIdKeyword_1());
        c.setLinewrap().before(grammar.getShapestyleLayoutAccess().getStyleKeyword_1_0());
        for (Keyword kw : grammar.findKeywords("line", "ellipse", "rectangle", "rounded-rectangle", 
        		"polyline", "polygon", "text", "description", "align", "id", "compartment",
        		"layout", "invisible", "stretching", "margin", "spacing", "vertical")) {
            c.setLinewrap().before(kw);
        }

        c.setLinewrap().before(grammar.getCDTextRule());
    }

    protected void handleNoSpaceBeforeINT(FormattingConfig c) {
        // no space before integers
        c.setNoSpace().before(grammar.getCommonLayoutAccess().getXcorN_INTParserRuleCall_1_0_4_0());
        c.setNoSpace().before(grammar.getCommonLayoutAccess().getYcorN_INTParserRuleCall_1_0_8_0());
        c.setNoSpace().before(grammar.getPointAccess().getXcorN_INTParserRuleCall_1_4_0());
        c.setNoSpace().before(grammar.getPointAccess().getYcorN_INTParserRuleCall_1_8_0());
        c.setNoSpace().before(grammar.getAnchorFixPointPositionAccess().getXcorINTTerminalRuleCall_2_0());
        c.setNoSpace().before(grammar.getAnchorFixPointPositionAccess().getYcorINTTerminalRuleCall_6_0());
    }

    protected void handleBlocks(FormattingConfig c) {
        for (Pair<Keyword, Keyword> kw : grammar.findKeywordPairs("{", "}")) {
            c.setLinewrap().after(kw.getFirst());
            c.setLinewrap().around(kw.getSecond());
            c.setIndentation(kw.getFirst(), kw.getSecond());
        }
    }

}
