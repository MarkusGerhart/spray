module org.eclipselabs.spray.xtext.GenerateSpray

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var fileExtensions = "spray"
var projectName = "org.eclipselabs.spray.xtext"
var grammarURI = "platform:/resource/${projectName}/src/org/eclipselabs/spray/xtext/Spray.xtext"
var runtimeProject = "../../plugins/${projectName}"
var testProject = "../../tests/${projectName}.tests"
var generateXtendStub = false
var encoding = "UTF-8"

Workflow {
    bean = StandaloneSetup {
    	resourceSet = org.eclipse.xtext.resource.XtextResourceSet:theResourceSet {}
        platformUri = "${runtimeProject}/.."
        
        uriMap = {
            from = "platform:/resource/org.eclipse.xtext.xbase/"
            to = "classpath:/"
        }
        uriMap = {
            from = "platform:/resource/org.eclipse.xtext.common.types/"
            to = "classpath:/"
        }
        
        registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
        registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
        registerGeneratedEPackage = "org.eclipselabs.spray.styles.StylesPackage"
        registerGeneratedEPackage = "org.eclipselabs.spray.shapes.ShapesPackage"
        registerGeneratedEPackage = "org.eclipselabs.spray.mm.spray.SprayPackage"
    }

	component = DirectoryCleaner {  directory = "${runtimeProject}/src-gen"     }
	component = DirectoryCleaner {  directory = "${runtimeProject}/model"       }
	component = DirectoryCleaner {  directory = "${runtimeProject}.ui/src-gen"  }

    component = Generator {
        pathRtProject = runtimeProject
        pathUiProject = "${runtimeProject}.ui"
        pathTestProject = "${testProject}"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"
        encoding = encoding
		language = auto-inject {
    		forcedResourceSet = theResourceSet
    		
    		loadedResource = "classpath:/model/XcoreLang.xcore"
			loadedResource = "classpath:/model/Ecore.ecore"
			loadedResource = "classpath:/model/Ecore.genmodel"
    		loadedResource = "platform:/resource/org.eclipselabs.spray.styles.mm/model/Styles.xcore"
    		loadedResource = "platform:/resource/org.eclipselabs.spray.shapes.mm/model/Shapes.xcore"
    		loadedResource = "platform:/resource/org.eclipselabs.spray.mm/model/Spray.xcore"
    		
            uri = grammarURI
            fragment = grammarAccess.GrammarAccessFragment {}
    		fragment = ecore.EMFGeneratorFragment auto-inject {  
    			javaModelDirectory = "../${projectName}/src-gen"
    		}
            fragment = serializer.SerializerFragment auto-inject {  
            	generateStub = false
            }
            fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
            fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
            	antlrParam = "-Xconversiontimeout" antlrParam = "10000"
                options = {
                    classSplitting = true
                }
            }
            fragment = validation.JavaValidatorFragment auto-inject {
            //  composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
                composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }
            fragment = scoping.ImportNamespacesScopingFragment auto-inject {
                generateStub = false
            }
            fragment = exporting.QualifiedNamesFragment auto-inject {}
            fragment = formatting.FormatterFragment auto-inject {}
            fragment = labeling.LabelProviderFragment auto-inject {}
            fragment = outline.OutlineTreeProviderFragment auto-inject {}
            fragment = outline.QuickOutlineFragment auto-inject {}
            fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}
            fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {
            	antlrParam = "-Xconversiontimeout" antlrParam = "10000"
                options = {
                    classSplitting = true
                }
            }
    		fragment = compare.CompareFragment auto-inject {}
            fragment = builder.BuilderIntegrationFragment auto-inject {}
            fragment = refactoring.RefactorElementNameFragment auto-inject {}
            fragment = quickfix.QuickfixProviderFragment auto-inject {}
            fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
            fragment = types.TypesGeneratorFragment auto-inject {}
            fragment = xbase.XbaseGeneratorFragment auto-inject {}
            fragment = junit.Junit4Fragment auto-inject {}
        }
    }
}
