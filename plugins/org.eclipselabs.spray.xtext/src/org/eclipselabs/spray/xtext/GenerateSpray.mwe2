module org.eclipselabs.spray.xtext.GenerateSpray

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/eclipselabs/spray/xtext/Spray.xtext"
var file.extensions = "spray"
var projectName = "org.eclipselabs.spray.xtext"
var runtimeProject = "../${projectName}"

Workflow {
	bean = StandaloneSetup {
		scanClassPath = true 
		platformUri = "${runtimeProject}/.."
		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore"
			to = "platform:/resource/org.eclipselabs.spray.mm/model/Ecore.ecore"
		}
		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.genmodel"
			to = "platform:/resource/org.eclipselabs.spray.mm/model/Ecore.genmodel"
		}
		uriMap = {
			from = "platform:/plugin/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"
			to = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"
		}
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
		registerGenModelFile = "platform:/resource/org.eclipselabs.spray.mm/model/spray.genmodel"
		registerEcoreFile = "platform:/resource/org.eclipselabs.spray.mm/model/spray.ecore"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject   = runtimeProject
		pathUiProject   = "${runtimeProject}.ui"
		pathTestProject = "../../tests/${projectName}.tests"
		projectNameRt   = projectName
		projectNameUi   = "${projectName}.ui"
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// Generate java classes for Ecore models
			fragment = ecore.EcoreGeneratorFragment {
				
			}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}

			// the Antlr parser
			fragment = parser.antlr.XtextAntlrGeneratorFragment {
				options = {
					classSplitting = true 
					
				}
			}
			
			

			// the Ecore2Xtext specific terminal converter
//			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment {}

			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
//			 composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
			 composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}


			// scoping and exporting API
//			fragment = scoping.ImportURIScopingFragment {}
//			fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API 

			 fragment = scoping.ImportNamespacesScopingFragment {
			 	generateStub = false
			 }
			 fragment = exporting.QualifiedNamesFragment {}


			// formatter API 
			fragment = ecore2xtext.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API 
            fragment = outline.OutlineTreeProviderFragment {}
            fragment = outline.QuickOutlineFragment {}

			// java-based API for content assistance 
			fragment = contentAssist.JavaBasedContentAssistFragment {}


			// antlr parser generator tailored for content assist 
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {
				options = {
					classSplitting = true 
				}
			}

			// provides a compare view
            fragment = compare.CompareFragment {
                fileExtensions = file.extensions
            }

			fragment = builder.BuilderIntegrationFragment {}

			// project wizard (optional) 

			// fragment = projectWizard.SimpleProjectWizardFragment {
			//		generatorProjectName = "${projectName}.generator" 
			//		modelFileExtension = file.extensions
			// }

			// Code generator
			fragment = generator.GeneratorFragment {
				generateJavaMain = false 
				generateMwe = false
//				generatorStub = true 
			}


            // rename refactoring
            fragment = refactoring.RefactorElementNameFragment {}



			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}

			fragment = templates.CodetemplatesGeneratorFragment {}
			
			// Xbase support
			fragment = types.TypesGeneratorFragment {}
			fragment = xbase.XbaseGeneratorFragment {}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment {}
			
		}
	}
}
