grammar org.eclipselabs.spray.xtext.Spray with org.eclipse.xtext.xbase.Xbase 

import "http://code.google.com/a/eclipselabs.org/p/spray"
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Diagram :
    imports+=Import*
    'diagram' name=ID 'for' modelType=[ecore::EClass|QualifiedName]
    
    
    (
        behaviourGroups += BehaviorGroup
    )*
    (
        metaClasses += MetaClass
    )*
	;

Import:
	'import' importedNamespace=QualifiedNameWithWildCard;

QualifiedNameWithWildCard returns ecore::EString :
    QualifiedName  ('.' '*')?;
    

SprayElement :
    Shape | MetaReferenceAsShape;

MetaClass :
    'class'  type=[ecore::EClass|QualifiedName] ('alias' alias=ID)? ('icon' icon=STRING)?
    ":" representedBy=Shape
    (
    "references" "{"
        (references += MetaReference2  ";")*
	"}"
    )?
    (
	"behavior" "{"
	       ( 
	           ("group" behaviorGroups += [BehaviorGroup] ";"  ) |
               (behaviors += Behavior ";" )
           )*
    "}"
    )?
    ;

MetaReference2 returns MetaReference:  
	target=[ecore::EReference]
	":" representedBy=Connection  
;   

    
MetaReferenceAsShape returns MetaReference :
    'reference' target=[ecore::EReference]
    ("attribute" labelProperty = [ecore::EAttribute])? ;
    

BehaviorGroup:
    "behavior" name=ID "{"
          (behaviors += Behavior ";")+ 
    "}"
;

Behavior :
    CreateBehavior | CustomBehavior;

CreateBehavior :
    'create' 'into' containmentReference=[ecore::EReference] (label = STRING)? 
    ('palette' paletteCompartment = STRING)? 
    ('askFor' askFor=[ecore::EAttribute])?;

CustomBehavior :
    name = ID (label = STRING);

Shape :
    (Rectangle | Text | Container | Connection | Line) 
;

Layout :
  { Layout }
 '('
        (
            ( 'width'  '=' lineWidth = INT )?
          & ( 'color'  '=' lineColor = Color)?
          & ( 'fill'   '=' fillColor = Color)?
          & ( 'figure' '=' figure    = STRING)?
          & ( bold ?= 'bold' )?
          & ( italic ?= 'italic' )?
        ) 
      ')'

;

Rectangle returns Rectangle:
	{Rectangle}
    "rectangle" ('alias' alias=ID)?
	layout = Layout // 	name=EString
;

Connection returns Connection :
	{Connection}
	'connection' ('alias' alias=ID)? layout = Layout
	(
	    '{'
		'from' from=[ecore::EReference] ";"
		'to'   to  =[ecore::EReference] ";"
		(
            ('fromText' fromLabel = Text ";")? & 
            ('connectionText' connectionLabel = Text ";")? &
		    ('toText' toLabel   = Text ";")?
		)
		'}'
	)?
;

Color:
	ColorConstantRef | RGBColor
;
ColorConstantRef:
	(type=JvmTypeReference '::')? field=[types::JvmField|ValidID]
;

RGBColor:
	'RGB' '(' red=INT ',' green=INT ',' blue=INT ')'
;

Text returns Text:
	{Text}
	'text' ('alias' alias=ID)? layout = Layout
	value = XExpression
	;

Line returns Line :
	{Line}
	'line' ('alias' alias=ID)? layout = Layout
;

Container returns Container:
    { Container }
	'container' ('alias' alias=ID)? layout = Layout
	'{'
		(parts+=SprayElement  ";" )* 
    '}';

