grammar org.eclipselabs.spray.xtext.Spray with org.eclipse.xtext.xbase.Xbase 

import "platform:/resource/org.eclipselabs.spray.mm/model/spray.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore" as types


Diagram :
    'diagram'  name = ID
    'extension' modelfileExtension=STRING 
    
    imports+=Import*
    
    colors+=Color*
    (
        behaviourGroups += BehaviourGroup
    )*
    (
        metaClasses += MetaClass
    )*
	;

Import:
	'import' importedNamespace=QualifiedNameWithWildCard;

SprayElement :
    Shape | MetaReferenceAsShape | MetaAttributeAsShape;

MetaClass :
    'class'  type=[ecore::EClass|QualifiedName]  ('alias' alias=ID)? ('icon' icon=STRING)?
    ":" representedBy=Shape
    (
    "references" "["
        (references += MetaReference2  ";")*
	"]"    
    )?
    (
	"behavior" "["
	       ( 
	           ("group" behaviourGroups += [BehaviourGroup] ";"  ) |
               (behaviours += Behaviour ";" )
           )*
    "]"
    )?
    ; 

MetaReference :  
	"reference" reference=[ecore::EReference] 
	":" representedBy=Connection  
;   

MetaReference2 returns MetaReference:  
	reference=[ecore::EReference] 
	":" representedBy=Connection  
;   

    
MetaAttribute :
	(pathsegments+=[ecore::EReference] '.')* attribute=[ecore::EAttribute];

MetaReferenceAsShape returns MetaReference :
    'reference' reference=[ecore::EReference]
    ("attribute" labelProperty = [ecore::EAttribute]  )? ;
    
MetaAttributeAsShape returns MetaAttribute :
    'attribute' attribute=[ecore::EAttribute];


BehaviourGroup: 
    "behaviour" name=ID "["
          (behaviours += Behaviour ";")+ 
    "]"
;

Behaviour :
    StandardBehaviour | CustomBehaviour;

StandardBehaviour :
    type=BehaviourType  (label = STRING)? ('palette' paletteCompartment = STRING)?;

CustomBehaviour :
    name = ID (label = STRING);
    
enum BehaviourType :
    CREATE_BEHAVIOUR = 'create' 
    ;
    
Shape :
    (Rectangle | Text | Container | Connection | Line) 
;

Layout :
  { Layout }
 '('
        (
            ( 'width'  '=' lineWidth = INT )?
          & ( 'color'  '=' lineColor = [Color])?
          & ( 'fill'   '=' fillColor = [Color])?
          & ( 'figure' '=' figure    = STRING)?
          & ( bold ?= 'bold' )?
          & ( italic ?= 'italic' )?
        ) 
      ')'

;

EString returns ecore::EString:
	STRING | ID;


Rectangle returns Rectangle:
	{Rectangle}
    "rectangle"
	layout = Layout // 	name=EString
//	( '('
//		(
//			( 'width' '=' lineWidth = INT )?
//		  & ( 'cornerWidth' '=' cornerWidth = INT)? 
//		  & ( 'cornerHeight' '=' cornerHeight = INT)?
//		  & ( 'color' '=' lineColor = Color)?
//		  & ( 'fill' '=' fillColor = Color)?
//		) 
//	  ')'
//	 )?
	
;

Connection returns Connection :
	{Connection}
	'connection' layout = Layout
	(
	    '['
		'from' from=[ecore::EReference] ";"
		'to'   to  =[ecore::EReference] ";"
		(
            ('fromText' fromLabel = Text ";")? & 
            ('connectionText' connectionLabel = Text ";")? &
		    ('toText' toLabel   = Text ";")?
		)
		']'
	)?
//	( '('
//		( 
//		  ( 'width' '=' lineWidth = INT )?
//		  &
//		  ( 'color' '=' lineColor = Color)?
//		)
//	  ')'
//	 )?
;

Color:
	colorConstant=[types::JvmField] ("as" name=ID)?
;

/*
enum Color :
    BLACK = 'black' | RED = 'red' | GREEN = 'green' | LIGHT_GRAY = "light_gray" | LIGHT_LIGHT_GRAY = "light_light_gray" |
    GRAY = "gray"   | ORANGE = 'orange' | WHITE = 'white' | YELLOW = 'yellow' |
    DARK_BLUE = "dark_blue" | VC_DARK_BLUE = "vc_dark_blue" | CYAN = "cyan" |
    DARK_GREEN = "dark_green" | LIGHT_GREEN = "light_green" | LIGHT_BLUE = "light_blue" |
    VC_MEDIUM_BLUE = "medium_blue" | PINK="pink"
    ;
*/

Text returns Text:
	{Text}
	'text' layout = Layout
//	name=EString
	( value += SprayString)+
	;

SprayString :
    (MetaAttribute | StringLiteral)
;

StringLiteral :
    name=STRING;

QualifiedNameWithWildCard returns ecore::EString :
	QualifiedName  ('.' '*')?;
	
Line returns Line :
	{Line}
	'line' layout = Layout
;

Container returns Container:
    { Container }
	'container' layout = Layout
	'['
		(parts+=SprayElement  ";" )* 
    ']';
    
