grammar org.eclipselabs.spray.xtext.Spray with org.eclipse.xtext.xbase.Xbase 

import 'http://code.google.com/a/eclipselabs.org/p/spray'
import 'http://www.eclipse.org/xtext/common/JavaVMTypes' as types
import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

Diagram:
    imports+=Import*
    'diagram' name=ID 'for' modelType=[ecore::EClass|QualifiedName] (style=SprayStyleRef)? 
    (behaviourGroups += BehaviorGroup)*
    (metaClasses += MetaClass)*;

Import:
    'import' importedNamespace=QualifiedNameWithWildCard;

QualifiedNameWithWildCard returns ecore::EString :
    QualifiedName  ('.' '*')?;
    

MetaClass:
    'class'  type=[ecore::EClass|QualifiedName] ('alias' alias=ID)? ('icon' icon=STRING)? (style=SprayStyleRef)? 
    '{' 
	    ( representedBy=ShapeInSpray )
	    ('references' 
	     '{' 
	    	(references += MetaReference2  ';'?)*
	     '}')?
	    ('behavior' 
	     '{'
			(('group' behaviorGroups += [BehaviorGroup] ';'?  ) | (behaviors += Behavior ';'? ))*
	     '}')?
	'}';

MetaReference2 returns MetaReference:  
    target=[ecore::EReference] ':' representedBy=ConnectionInSpray;   
    
BehaviorGroup:
    'behavior' name=ID '{'
          (behaviors += Behavior ';'?)+ 
    '}';

Behavior:
    CreateBehavior | CustomBehavior;  // | CompartmentBehavior;

CreateBehavior: {CreateBehavior}
    'create' ('into' containmentReference=[ecore::EReference] (label = STRING)? )?
    ('palette' paletteCompartment = STRING)? 
    ('askFor' askFor=[ecore::EAttribute])?;

CustomBehavior:
    'custom' (name = ID | 'ref' realizedBy=JvmTypeReference) (label = STRING);

ShapeInSpray:
    (ConnectionInSpray | ShapeFromDsl );

ShapeFromDsl : {ShapeFromDsl}
    'shape' shape = JvmTypeReference ('{'
        properties+=ShapePropertyAssignment*
        references += ShapeCompartmentAssignment*
    '}')?;

SprayStyleRef:
	'style' (style=JvmTypeReference);

ShapePropertyAssignment: 
    attribute=[ecore::EAttribute] 'into' key=[types::JvmEnumerationLiteral|QualifiedName] ('(' value=XExpression ')')?;

ShapeCompartmentAssignment: 
    'reference' reference=[ecore::EReference] 'into' key=[types::JvmEnumerationLiteral|QualifiedName] ('(' value=XExpression ')')?;

ConnectionInSpray returns ConnectionInSpray :
    {ConnectionInSpray}
    'connection' 
    (connection = JvmTypeReference (
     	'{'
			properties+=ShapePropertyAssignment+
		'}')?
    )?
    ('alias' alias=ID)? 
    (
        '{'
            'from' from=[ecore::EReference] ';'?
            'to'   to  =[ecore::EReference] ';'?
        '}'
    )?;
