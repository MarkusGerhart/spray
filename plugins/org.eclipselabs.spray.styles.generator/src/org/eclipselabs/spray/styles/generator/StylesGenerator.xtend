/*
 * generated by Xtext
 */
package org.eclipselabs.spray.styles.generator

import javax.inject.Inject
import com.google.inject.Provider
import org.apache.commons.logging.Log
import org.apache.commons.logging.LogFactory
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.xbase.compiler.JvmModelGenerator
import org.eclipselabs.spray.generator.common.ProjectProperties
import org.eclipselabs.spray.styles.Gradient
import org.eclipselabs.spray.styles.Style
import org.eclipselabs.spray.xtext.generator.filesystem.JavaGenFile

class StylesGenerator extends JvmModelGenerator implements IGenerator {
    @Inject Provider<JavaGenFile> genFileProvider
    @Inject extension GradientGenerator gradientGenerator
    @Inject extension StyleGenerator    styleGenerator
    
    private static Log   LOGGER       = LogFactory::getLog("StyleGenerator");
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
        if (!resource.URI.lastSegment().endsWith(ProjectProperties::STYLES_FILE_EXTENSION)) {
            LOGGER.info("Style generator is NOT producing Graphiti code for model " + resource.URI)
            return;
        }
        LOGGER.info("Style generator is producing Graphiti code for model " + resource.URI)
	    ProjectProperties::setModelUri(resource.URI)
		super.doGenerate(resource, fsa);
		
		val JavaGenFile java = genFileProvider.get()
        java.access = fsa
		
		doGenerateGradient(resource, java)
		doGenerateStyle(resource, java)
	}
	
	def void doGenerateStyle(Resource resource, JavaGenFile java) {
        LOGGER.info("Spray: generating style for model " + resource.URI)
        if( ! resource.loaded ){
            resource.load(null);
        }
 		for(style : resource.allContents.toIterable.filter(typeof(Style))) {
      		java.doGenerateStyle(style)
   		}
	}
	
	def void doGenerateGradient(Resource resource, JavaGenFile java) {
        LOGGER.info("Spray: generating gradient for model " + resource.URI)
        if( ! resource.loaded ){
            resource.load(null);
        }
		for(gradient : resource.allContents.toIterable.filter(typeof(Gradient))) {
      		java.doGenerateGradient(gradient)
   		}
	}
	
	def void doGenerateGradient(JavaGenFile java, Gradient gradient) {
		java.hasExtensionPoint = true
		gradientGenerator.generate(gradient, java)
	}
	
	def void doGenerateStyle(JavaGenFile java, Style style) {
		java.hasExtensionPoint = true
		styleGenerator.generate(style, java)
	}
}
