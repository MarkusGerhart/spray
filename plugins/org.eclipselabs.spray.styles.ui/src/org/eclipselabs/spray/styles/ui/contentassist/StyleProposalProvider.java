/*
 * generated by Xtext
 */
package org.eclipselabs.spray.styles.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.widgets.ColorDialog;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.FontDialog;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.ui.editor.contentassist.ReplacementTextApplier;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class StyleProposalProvider extends AbstractStyleProposalProvider {
	/**
	 * Completes the Color selection of the user. The ColorDialog of SWT will be
	 * used therefore. Returns the content assist value: RGB(RED,GREEN,BLUE).
	 */
	@Override
	public void complete_RGBColor(EObject model, RuleCall ruleCall,
			final ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		ConfigurableCompletionProposal pickColor = (ConfigurableCompletionProposal) createCompletionProposal(
				"Pick RGB color...", context);
		if (pickColor != null) {
			pickColor.setTextApplier(new ReplacementTextApplier() {
				@Override
				public String getActualReplacementString(
						ConfigurableCompletionProposal proposal) {
					Display display = context.getViewer().getTextWidget()
							.getDisplay();
					ColorDialog colorDialog = new ColorDialog(display
							.getActiveShell());
					RGB newColor = colorDialog.open();
					return "RGB(" + newColor.red + "," + newColor.green + ","
							+ newColor.blue + ")";
				}
			});
			pickColor.setPriority(600);
			acceptor.accept(pickColor);
		}
		super.complete_RGBColor(model, ruleCall, context, acceptor);
	}

	@Override
	public void complete_Font(EObject model, RuleCall ruleCall,
			final ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		ConfigurableCompletionProposal pickFont = (ConfigurableCompletionProposal) createCompletionProposal(
				"Pick font...", context);
		if (pickFont != null) {
			pickFont.setTextApplier(new ReplacementTextApplier() {
				@Override
				public String getActualReplacementString(
						ConfigurableCompletionProposal proposal) {
					Display display = context.getViewer().getTextWidget()
							.getDisplay();
					FontDialog fontDialog = new FontDialog(display
							.getActiveShell());
					FontData newFont = fontDialog.open();
					StringBuilder sb = new StringBuilder();
					sb.append("font-name" + "=" + "\"" + newFont.getName()
							+ "\"\n");
					sb.append("\tfont-size" + "=" + newFont.getHeight() + "\n");
					sb.append("\tfont-color" + "= RGB("
							+ fontDialog.getRGB().red + ","
							+ fontDialog.getRGB().green + ","
							+ fontDialog.getRGB().blue + ")\n");
					sb.append("\tfont-style" + "="
							+ getStyle(newFont.getStyle()) + "\n");
					return sb.toString();
				}
			});
			pickFont.setPriority(600);
			acceptor.accept(pickFont);
		}
		super.complete_Font(model, ruleCall, context, acceptor);
	}

	/**
	 * Completes the User Selection for the Font Name with the usage of the SWT
	 * FontDialog. The values for color, style and size will be ignored.
	 */
	@Override
	public void completeFont_FontName(EObject model, Assignment assignment,
			final ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		ConfigurableCompletionProposal pickFont = (ConfigurableCompletionProposal) createCompletionProposal(
				"Pick font name...", context);
		if (pickFont != null) {
			pickFont.setTextApplier(new ReplacementTextApplier() {
				@Override
				public String getActualReplacementString(
						ConfigurableCompletionProposal proposal) {
					Display display = context.getViewer().getTextWidget()
							.getDisplay();
					FontDialog fontDialog = new FontDialog(display
							.getActiveShell());
					FontData newFont = fontDialog.open();
					return newFont.getName();
				}
			});
			pickFont.setPriority(600);
			acceptor.accept(pickFont);
		}
		super.completeFont_FontName(model, assignment, context, acceptor);
	}

	/**
	 * Retrieves the Font Style values according to the selected value in the
	 * font dialog.
	 * 
	 * @param style
	 *            the selected value of the font dialog.
	 * @return a string representation that accords to the grammar.
	 */
	private String getStyle(int style) {
		String styleType = "";
		switch (style) {
		case 1:
			styleType = "bold";
			break;
		case 2:
			styleType = "italic";
			break;
		case 3:
			styleType = "bold italic";
			break;
		default:
			styleType = "";
			break;
		}
		return styleType;
	}

}
