/*
 * generated by Xtext
 */
package org.eclipselabs.spray.styles;

import org.eclipselabs.spray.xtext.scoping.SprayImportedNamespaceScopeProvider;

/**
 * Use this class to register components to be used at runtime / without the
 * Equinox extension registry.
 */
public class StyleRuntimeModule extends org.eclipselabs.spray.styles.AbstractStyleRuntimeModule {

	public Class<? extends org.eclipse.xtext.scoping.IScopeProvider> bindIScopeProvider() {
		return org.eclipselabs.spray.styles.scoping.StyleScopeProvider.class;
	}
	
    /**
     * Implicit imports
     */
    @Override
    public void configureIScopeProviderDelegate(com.google.inject.Binder binder) {
        binder.bind(org.eclipse.xtext.scoping.IScopeProvider.class).annotatedWith(com.google.inject.name.Names.named(org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(SprayImportedNamespaceScopeProvider.class);
    }	

	// contributed by
	// org.eclipse.xtext.generator.exporting.QualifiedNamesFragment
	public Class<? extends org.eclipse.xtext.naming.IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return org.eclipse.xtext.naming.DefaultDeclarativeQualifiedNameProvider.class;
	}
	
	// contributed by org.eclipse.xtext.generator.xbase.XbaseGeneratorFragment
	public Class<? extends org.eclipse.xtext.xbase.featurecalls.IdentifiableSimpleNameProvider> bindIdentifiableSimpleNameProvider() {
		return org.eclipse.xtext.xbase.featurecalls.IdentifiableSimpleNameProvider.class;
	}	

//	@Override
//	public Class<? extends org.eclipse.xtext.generator.IGenerator> bindIGenerator() {
//		return org.eclipselabs.spray.styles.generator.StyleGenerator.class;
//	}
}
