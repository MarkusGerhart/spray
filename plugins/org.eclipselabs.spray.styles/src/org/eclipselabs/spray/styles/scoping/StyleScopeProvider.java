/*
 * generated by Xtext
 */
package org.eclipselabs.spray.styles.scoping;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.FilteringScope;
import org.eclipselabs.spray.styles.styles.Style;

import com.google.common.base.Predicate;

/**
 * This class contains custom scoping description.
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 */
public class StyleScopeProvider extends AbstractDeclarativeScopeProvider {

    @Override
    public IScope getScope(EObject context, EReference reference) {
        if (reference == TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE) {
            Style style = EcoreUtil2.getContainerOfType(context, Style.class);
            if (style != null) {
                return getStyleTypeScope(style);
            }
        }
        return super.getScope(context, reference);
    }

    protected IScope getStyleTypeScope(Style style) {
        IScope typesScope = delegateGetScope(style, TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE);
        Predicate<IEObjectDescription> stylesFilter = new StyleScopeRestrictor();
        IScope result = new FilteringScope(typesScope, stylesFilter);
        return result;
    }

}
