/*
 * generated by Xtext
 */
package org.eclipselabs.spray.styles.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

import static extension org.eclipse.xtext.xbase.lib.IteratorExtensions.*

import org.eclipselabs.spray.styles.styles.Style
import org.eclipselabs.spray.styles.styles.StyleLayout
import org.eclipselabs.spray.styles.styles.Transparent
import org.eclipselabs.spray.styles.styles.ColorConstantRef
import org.eclipselabs.spray.styles.styles.RGBColor
import org.eclipselabs.spray.styles.styles.ColorWithTransparency
import org.eclipselabs.spray.styles.styles.YesNoBool
import org.eclipselabs.spray.styles.styles.LineStyle
import com.google.inject.Inject
import org.eclipselabs.spray.styles.styles.Gradient
import org.eclipselabs.spray.styles.styles.GradientAllignment
import org.eclipselabs.spray.styles.styles.GradientRef
import org.eclipselabs.spray.styles.styles.Color
import org.eclipselabs.spray.styles.generator.util.GradientUtilClass
import org.eclipse.xtext.xbase.compiler.JvmModelGenerator


class StyleGenerator extends JvmModelGenerator implements IGenerator {
	
	@Inject extension GradientGenerator
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
        println("Spray generating for model " + resource.URI)
		super.doGenerate(resource, fsa)
		for(gradient : resource.allContents.toIterable.filter(typeof(Gradient))) {
      		fsa.generateFile(gradient.filepath, gradient.compile)
   		}
		for(style : resource.allContents.toIterable.filter(typeof(Style))) {
      		fsa.generateFile(style.filepath, style.compile)
   		}
	}
	
	def filepath(Style s) { s.packagePath + s.className + ".java" }
	def className(Style s) { s.name.toFirstUpper }
	def packageName(Style s) { "org.eclipselabs.spray.styles" }
	def packagePath(Style s) { "org/eclipselabs/spray/styles/" }
	
	def compile(Style s) {
		'''
		«s.head»
		
		«s.body»
		'''
	}
	
	def head(Style s) {

		'''
		/**
		 * This is a generated Style class for Spray.
		 */
		package «s.packageName»;
		
		import org.eclipse.graphiti.mm.pictograms.Diagram;
		import org.eclipse.graphiti.mm.algorithms.styles.Style;
		import org.eclipse.graphiti.mm.algorithms.styles.Color;
		import org.eclipse.graphiti.mm.algorithms.styles.LineStyle;
		import org.eclipse.graphiti.services.Graphiti;
		import org.eclipse.graphiti.services.IGaService;
		import org.eclipse.graphiti.util.ColorConstant;
		import org.eclipse.graphiti.util.IColorConstant;
«««		import org.eclipselabs.spray.styles.ISprayStyle;
		«IF s.superStyle == null»
«««		import org.eclipselabs.spray.styles.DefaultSprayStyle;
		«ELSE»
		import «s.superStyle.qualifiedName»;
		«ENDIF»
		import org.eclipse.graphiti.mm.algorithms.styles.AdaptedGradientColoredAreas;
		import org.eclipse.graphiti.util.IGradientType;
		import org.eclipse.graphiti.mm.algorithms.styles.StylesFactory;
		import org.eclipse.graphiti.util.IPredefinedRenderingStyle;
		import org.eclipselabs.spray.styles.generator.util.GradientUtilClass;

		'''
	}
	
	def body(Style s) {
		'''
		/**
		 * This is a generated Style class for Spray.
		 * Description: «s.description»
		 */
		@SuppressWarnings("all")
		public class «s.className» extends «s.createSuperStyle» {
		    
		    /**
			 * This method creates a Style and returns the defined style.
			 * Description: «s.description»
			 */
		    @Override
			public Style newStyle(Diagram diagram) {
				IGaService gaService = Graphiti.getGaService();
				
				// Creating Style with given id and description
				Style style = super.newStyle(diagram);
				style.setId("«s.name»");
				style.setDescription("«s.description»");
				
				«s.layout.createLayout»
				return style;
			}
			
		    /**
			 * This method returns the font color for the style. 
			 * The font color will be returned separated, because Graphiti allows just the foreground color.
			 * The foreground color will be used for lines and fonts at the same time.
			 */
			@Override
			public Color getFontColor(Diagram diagram) {
				«s.layout.createFontColor»
			}
	
			 /**
			 * This method returns Color Schema of the Style
			 */
			public AdaptedGradientColoredAreas getColorSchema() {
				«s.layout.createStyleColorSchema»
			}
			
			
		}	
		'''
	}

	def createSuperStyle(Style s) {
		if(s.superStyle == null) "org.eclipselabs.spray.runtime.graphiti.styles.DefaultSprayStyle" else s.superStyle.simpleName
	}

	def getStyle(Style s) {
		if(s.superStyle == null)
			'''gaService.createStyle(diagram, "«s.name»");'''
		else 
			'''super.getStyle(diagram);'''			
	}

    def createLayout(StyleLayout l) {
        '''
        «l.createTransparencyAttributes»		
		
		«IF l.checkColorSchemaNecessary == false»
        	«l.createBackgroundAttributes»
        «ENDIF»
		
        «l.createLineAttributes»

        «l.createFontAttributes»
		
        «IF l.checkColorSchemaNecessary»
        	«setColorSchema»
        «ENDIF»
		
        '''
    }

    def createTransparencyAttributes(StyleLayout l) {
        '''
        // transparency value
        «IF !(l == null || l.transparency == Double::MIN_VALUE)»
        style.setTransparency(«l.transparency»);
        «ENDIF»
        '''    
    }
        
    def createBackgroundAttributes(StyleLayout l) {
        '''
        // background attributes
        «IF l == null || l.background == null»
        «ELSEIF l.background instanceof Transparent»
        style.setFilled(false);
        style.setBackground(null);
        «ELSE»
        style.setFilled(true);
«««        «var ColorWithTransparency color = l.background»
«««        style.setBackground(gaService.manageColor(diagram, «color.createColorValue»));
        style.setBackground(gaService.manageColor(diagram, «l.background.createColorValue»));
        «ENDIF»
        '''    
    }
    
    def createLineAttributes(StyleLayout l) {
        '''
        // line attributes
        «IF l == null || l.lineColor == null»
        «ELSEIF l.lineColor instanceof Transparent»
        style.setLineVisible(false);
        style.setForeground(null);
        «ELSE»
        style.setLineVisible(true);
        style.setForeground(gaService.manageColor(diagram, «l.lineColor.createColorValue»));
        «IF l.lineWidth > 0»
        style.setLineWidth(«Math::max(l.lineWidth,1)»);
        «ENDIF»
        «IF l.lineStyle != LineStyle::NULL»
        style.setLineStyle(LineStyle.«l.lineStyle.name»);
        «ENDIF»
        «ENDIF»
        '''    
    }

    def createFontAttributes(StyleLayout l) {
        '''
		// font attributes
		«IF l == null || l.fontName == null»
		String fontName = style.getFont().getName();
		«ELSE»
		String fontName = "«l.fontName»";
		«ENDIF»
		«IF l == null || l.fontSize == Integer::MIN_VALUE»
		int fontSize = style.getFont().getSize();
		«ELSE»
		int fontSize = «l.fontSize»;
		«ENDIF»
		«IF l == null || l.fontItalic == YesNoBool::NULL»
		boolean fontItalic = style.getFont().isItalic();
		«ELSE»
		boolean fontItalic = «l.fontItalic.transformYesNoToBoolean»;
 	    «ENDIF»
		«IF l == null || l.fontBold == YesNoBool::NULL»
		boolean fontBold = style.getFont().isBold();
		«ELSE»
		boolean fontBold = «l.fontBold.transformYesNoToBoolean»;
		«ENDIF»
		style.setFont(gaService.manageFont(diagram, fontName, fontSize, fontItalic, fontBold));
        '''    
    }
    
    def createFontColor(StyleLayout l) {
    	if(l == null || l.fontColor == null) {
 			'''return super.getFontColor(diagram);'''
    	} else {
    		l.fontColor.createFontColor
    	}
    }
    
    def createFontColor(ColorWithTransparency c) {
    	'''
		IGaService gaService = Graphiti.getGaService();
		return gaService.manageColor(diagram, «c.createColorValue»);
    	'''
    }
    
    def transformYesNoToBoolean(YesNoBool yesNo) { if(yesNo == YesNoBool::YES) "true" else "false" }
    def dispatch createColorValue(Transparent c) { '''null''' }
    def dispatch createColorValue(ColorConstantRef c) { '''IColorConstant.«c.value.name»''' }
	def dispatch createColorValue(RGBColor c) { '''new ColorConstant(«c.red», «c.green», «c.blue»)''' }
	
	def createStyleColorSchema(StyleLayout l){
		
		var gradientOrientation = l.gradient_orientation.mapGradientOrientation
		
		'''
		«IF l.checkColorSchemaNecessary == false»
			return null;	
        «ELSE»
			final AdaptedGradientColoredAreas agca =
			StylesFactory.eINSTANCE.createAdaptedGradientColoredAreas();
			agca.setDefinedStyleId("«l.createStyleGradientID»");
			agca.setGradientType(«gradientOrientation»);
			agca.getAdaptedGradientColoredAreas().add(IPredefinedRenderingStyle.STYLE_ADAPTATION_DEFAULT,
														«l.background.gradientColoredAreas»);
														
			«IF l.highlighting != null»
				«IF l.highlighting.selected != null»
					agca.getAdaptedGradientColoredAreas().add(IPredefinedRenderingStyle.STYLE_ADAPTATION_PRIMARY_SELECTED,
																«l.highlighting.selected.gradientColoredAreas»);
				«ENDIF»
				«IF l.highlighting.multiselected != null»
					agca.getAdaptedGradientColoredAreas().add(IPredefinedRenderingStyle.STYLE_ADAPTATION_SECONDARY_SELECTED,
																«l.highlighting.multiselected.gradientColoredAreas»);
				«ENDIF»
				«IF l.highlighting.allowed != null»
					agca.getAdaptedGradientColoredAreas().add(IPredefinedRenderingStyle.STYLE_ADAPTATION_ACTION_ALLOWED,
																«l.highlighting.allowed.gradientColoredAreas»);
				«ENDIF»
				«IF l.highlighting.unallowed != null»
					agca.getAdaptedGradientColoredAreas().add(IPredefinedRenderingStyle.STYLE_ADAPTATION_ACTION_FORBIDDEN,
																«l.highlighting.unallowed.gradientColoredAreas»);
				«ENDIF»
			«ENDIF»
			return agca;
        «ENDIF»
		'''
	}
	
	def mapGradientOrientation(GradientAllignment ga){
		if(ga == null){
			'''IGradientType.«GradientAllignment::VERTICAL.name»'''
		}
		else{
		 if (ga == GradientAllignment::HORIZONTAL){
		 	'''IGradientType.«GradientAllignment::HORIZONTAL.name»'''
		 }
		 else{
		 	'''IGradientType.«GradientAllignment::VERTICAL.name»'''
		 }
	   }
	}
	
	def checkColorSchemaNecessary(StyleLayout l){
		if((l.highlighting == null) && !(l.background instanceof GradientRef)){
			return false
		}
		else{
			return true
		}
	}
	
	def createStyleGradientID(StyleLayout l){
		'''LWC2012CorporateStyle_Color_Schema_ID'''
	}
	
	def setColorSchema(){
		'''gaService.setRenderingStyle(style, getColorSchema());'''
	}
	
	def dispatch gradientColoredAreas(GradientRef cg){
			'''new «cg.gradientRef.qualifiedName»().getGradientColoredAreas( )'''	
	}
	
	def dispatch gradientColoredAreas(Color cg){
		'''GradientUtilClass.getOneColorGradient("«cg.createColorHexValue»")'''
	}
	
	def dispatch gradientColoredAreas(Transparent cg){
		'''GradientUtilClass.getOneColorGradient(«cg»)'''
	}
	
	def dispatch createColorHexValue(ColorConstantRef c) {'''«GradientUtilClass::colorConstantToHexString(c)»''' }
	def dispatch createColorHexValue(RGBColor c) { '''«GradientUtilClass::RGBColorToHexString(c)»''' }
	
}
