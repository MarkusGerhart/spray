/*
 * generated by Xtext
 */
package org.eclipselabs.spray.styles.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

import static extension org.eclipse.xtext.xtend2.lib.ResourceExtensions.*
import org.eclipselabs.spray.styles.styles.Style
import org.eclipselabs.spray.styles.styles.StyleLayout
import org.eclipselabs.spray.styles.styles.Transparency
import org.eclipselabs.spray.styles.styles.Background
import org.eclipselabs.spray.styles.styles.Transparent
import org.eclipselabs.spray.styles.styles.Line
import org.eclipselabs.spray.styles.styles.Font
import org.eclipselabs.spray.styles.styles.ColorConstantRef
import org.eclipselabs.spray.styles.styles.RGBColor

class StyleGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for(style : resource.allContentsIterable().filter(typeof(Style))) {
      		fsa.generateFile(style.filepath, style.compile)
   		}
	}
	
	def filepath(Style s) { s.packagePath + s.className + ".java" }
	def className(Style s) { s.name.toFirstUpper }
	def packageName(Style s) { "org.eclipselabs.spray.styles" }
	def packagePath(Style s) { "org/eclipselabs/spray/styles/" }
	
	def compile(Style s) {
		'''
		/**
		 * This is a generated Style for Spray
		 */
		package «s.packageName»;
		
		import org.eclipse.graphiti.mm.pictograms.Diagram;
		import org.eclipse.graphiti.mm.algorithms.styles.Style;
		import org.eclipse.graphiti.mm.algorithms.styles.Color;
		import org.eclipse.graphiti.mm.algorithms.styles.LineStyle;
		import org.eclipse.graphiti.services.Graphiti;
		import org.eclipse.graphiti.services.IGaService;
		import org.eclipse.graphiti.util.ColorConstant;
		import org.eclipse.graphiti.util.IColorConstant;
		
		import org.eclipselabs.spray.ISprayStyle;

		«s.body»
		'''
	}
	
	def body(Style s) {
		'''
		@SuppressWarnings("all")
		public class «s.className» implements ISprayStyle {
		    
			@Override
			public Style getStyle(Diagram diagram) {
				IGaService gaService = Graphiti.getGaService();
				
				// Creating Style with given id and description
				Style style = gaService.createStyle(diagram, "«s.name»");
				style.setDescription("«s.description»");
				
				«s.layout.createLayout»
			    
				return style;
			}
			
			@Override
			public Color getFontColor(Diagram diagram) {
				IGaService gaService = Graphiti.getGaService();
				return gaService.manageColor(diagram, «s.layout.createFontColor»);
			}
			
		}	
		'''
	}

    def createLayout(StyleLayout l) {
        '''
        «l.transparency.createTransparencyAttributes»

        «l.background.createBackgroundAttributes»
        
        «l.line.createLineAttributes»

        «l.font.createFontAttributes»
        '''
    }

    def createTransparencyAttributes(Transparency l) {
        '''
        // Setting the transparency value - default is 1.0
        «IF l == null || l.transparency == null»
        style.setTransparency(1.0);
        «ELSE»
        style.setTransparency(«l.transparency»);
        «ENDIF»
        '''    
    }
        
    def createBackgroundAttributes(Background l) {
        '''
        // Setting the background color
        «IF l == null || l.background == null»
        style.setFilled(true);
        style.setBackground(gaService.manageColor(diagram, IColorConstant.WHITE));
        «ELSEIF l.background instanceof Transparent»
        style.setFilled(false);
        «ELSE»
        style.setFilled(true);
        style.setBackground(gaService.manageColor(diagram, «l.background.createColorValue»));
        «ENDIF»
        '''    
    }
    
    def createLineAttributes(Line l) {
        '''
        // Setting the line attributes (line color is called foreground color)
        «IF l == null || l.lineColor == null»
        style.setLineVisible(true);
        style.setForeground(gaService.manageColor(diagram, IColorConstant.BLACK));
        style.setLineWidth(«Math::max(l.lineWidth,1)»);
        «IF l.lineStyle == null» 
        style.setLineStyle(LineStyle.SOLID);
        «ELSE»
        style.setLineStyle(LineStyle.«l.lineStyle.name»);
        «ENDIF»
        «ELSEIF l.lineColor instanceof Transparent»
        style.setLineVisible(false);
        «ELSE»
        style.setLineVisible(true);
        style.setForeground(gaService.manageColor(diagram, «l.lineColor.createColorValue»));
        style.setLineWidth(«Math::max(l.lineWidth,1)»);
        «IF l.lineStyle == null»  
        style.setLineStyle(LineStyle.SOLID);
        «ELSE»
        style.setLineStyle(LineStyle.«l.lineStyle.name»);
        «ENDIF»
        «ENDIF»
        '''    
    }

    def createFontAttributes(Font l) {
        '''
        // Managing the font (default values are Arial, size 8, no italic, no bold)
        «IF l == null || l.fontName == null»
        String fontName = "Arial";
        «ELSE»
        String fontName = "«l.fontName»";
        «ENDIF»
        «IF l == null || !(l.fontSize > 0)»
        int fontSize = 8;
        «ELSE»
        int fontSize = «l.fontSize»;
 	    «ENDIF»
        style.setFont(gaService.manageFont(diagram, fontName, fontSize, «l.fontItalic», «l.fontBold»));
        '''    
    }
    
    def createFontColor(StyleLayout l) {
    	if(l.font == null || l.font.fontColor == null) {
 			if(l.line == null || l.line.lineColor == null) {
 				"IColorConstant.BLACK"
 			} else {
 				l.line.lineColor.createColorValue
 			}
    	} else {
    		l.font.fontColor.createColorValue
    	}
    }
    
    def dispatch createColorValue(Transparent c) { '''null''' }
    def dispatch createColorValue(ColorConstantRef c) { '''IColorConstant.«c.value.name»''' }
	def dispatch createColorValue(RGBColor c) { '''new ColorConstant(«c.red», «c.green», «c.blue»)''' }
	
}
