/** ****************************************************************************
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 **************************************************************************** */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.features

import org.eclipse.xtext.junit4.InjectWith
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*

@RunWith(typeof(XtextRunner2))
@InjectWith(typeof(SprayTestsInjectorProvider))
class Mod4jAddReferenceBusinessClassSuperclassFeatureBaseTest extends AbstractSprayGeneratorTest {

    @Test
    def void test() {
       val fsa = triggerGenerator("mod4j/mod4j-busmod.spray")
       val keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/features/Mod4jAddReferenceBusinessClassSuperclassFeatureBase.java"
       assertTrue(keyClass + " should have been generated", fsa.files.containsKey(keyClass))
       assertEquals(keyClass + " should have the expected content", fsa.files.get(keyClass).toString, expectedContent.toString)
    }

    def private expectedContent() '''
        /*************************************************************************************
         *
         * Generated by Spray AddReferenceAsConnectionFeature.xtend
         *
         * This file contains generated and should not be changed.
         * Use the extension point class (the direct subclass of this class) to add manual code
         *
         *************************************************************************************/
        package org.eclipselabs.spray.examples.mod4j.features;
        
        import org.eclipse.emf.ecore.EObject;
        import org.eclipse.graphiti.features.IFeatureProvider;
        import org.eclipse.graphiti.features.context.IAddConnectionContext;
        import org.eclipse.graphiti.features.context.IAddContext;
        import org.eclipse.graphiti.mm.pictograms.AnchorContainer;
        import org.eclipse.graphiti.mm.pictograms.Connection;
        import org.eclipse.graphiti.mm.pictograms.PictogramElement;
        import org.eclipse.graphiti.mm.algorithms.Polyline;
        import org.eclipse.graphiti.services.IGaService;
        import org.eclipselabs.spray.runtime.graphiti.features.AbstractAddConnectionFeature;
        import org.eclipselabs.spray.examples.mod4j.Activator;
        import samplepackage.BusinessClass;
        
        @SuppressWarnings("unused")
        public abstract class Mod4jAddReferenceBusinessClassSuperclassFeatureBase extends AbstractAddConnectionFeature {
        
            public Mod4jAddReferenceBusinessClassSuperclassFeatureBase(final IFeatureProvider fp) {
                super(fp);
                gaService = Activator.get(IGaService.class);
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public boolean canAdd(final IAddContext context) {
                // return true if given business object is an BusinessClass
                // note, that the context must be an instance of IAddConnectionContext
                if (context instanceof IAddConnectionContext && context.getNewObject() instanceof BusinessClass) {
                    return true;
                }
                return false;
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public PictogramElement add(final IAddContext context) {
                final IAddConnectionContext addConContext = (IAddConnectionContext) context;
                BusinessClass addedDomainObject = (BusinessClass) context.getNewObject();
                removeExisting(context);
        
                // CONNECTION WITH POLYLINE
                final Connection connection = peCreateService.createFreeFormConnection(getDiagram());
                connection.setStart(addConContext.getSourceAnchor());
                connection.setEnd(addConContext.getTargetAnchor());
        
                // TRY
                final AnchorContainer parent = connection.getStart().getParent();
                final EObject start = (EObject) getBusinessObjectForPictogramElement(parent);
                final AnchorContainer child = connection.getEnd().getParent();
                final EObject end = (EObject) getBusinessObjectForPictogramElement(child);
                //END TRY
        
                final Polyline polyline = gaService.createPolyline(connection);
                polyline.setLineWidth(1);
        
                // create link and wire it
                peService.setPropertyValue(connection, PROPERTY_MODEL_TYPE, "BusinessClass.superclass");
                peService.setPropertyValue(connection, PROPERTY_REFERENCE, (String) context.getProperty(PROPERTY_REFERENCE));
                peService.setPropertyValue(connection, PROPERTY_TARGETOBJECT, (String) context.getProperty(PROPERTY_TARGETOBJECT));
                link(connection, addedDomainObject);
        
                // add static graphical decorator
                // ConnectionDecorator cd = peCreateService.createConnectionDecorator(connection, false, 1.0, true);
                //      No arrows
                //        createArrow(cd);
                decorateConnection(addConContext, connection);
                setDoneChanges(true);
                return connection;
            }
        
            protected void removeExisting(final IAddContext context) {
                final IAddConnectionContext addConContext = (IAddConnectionContext) context;
                final BusinessClass addedDomainObject = (BusinessClass) context.getNewObject();
                final Object[] pictogramElements = peService.getLinkedPictogramElements(new EObject[]{addedDomainObject}, getDiagram());
                for (final Object pict : pictogramElements) {
                    if (pict instanceof PictogramElement) {
                        final PictogramElement p = (PictogramElement) pict;
                        if ("BusinessClass".equals(peService.getPropertyValue(p, PROPERTY_REFERENCE))) {
                            peService.deletePictogramElement(p);
                            setDoneChanges(true);
                        }
                    }
                }
            }
        }
    '''
}
