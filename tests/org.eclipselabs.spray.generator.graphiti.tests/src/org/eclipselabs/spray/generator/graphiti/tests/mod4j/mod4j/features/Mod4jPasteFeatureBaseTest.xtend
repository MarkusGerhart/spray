package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.features

import org.eclipse.xtext.junit4.InjectWith
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*

@RunWith(typeof(XtextRunner2))
@InjectWith(typeof(SprayTestsInjectorProvider))
class Mod4jPasteFeatureBaseTest extends AbstractSprayGeneratorTest {

    @Test
    def void test() {
       val fsa = triggerGenerator("mod4j/mod4j-busmod.spray")
       val keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/features/Mod4jPasteFeatureBase.java"
       assertTrue(keyClass + " should have been generated", fsa.files.containsKey(keyClass))
       assertEquals(keyClass + " should have the expected content", fsa.files.get(keyClass).toString, expectedContent.toString)
    }

    def private expectedContent() '''
        /*************************************************************************************
         *
         * Generated by Spray PasteFeature.xtend
         *
         * This file contains generated and should not be changed.
         * Use the extension point class (the direct subclass of this class) to add manual code
         *
         *************************************************************************************/
        package org.eclipselabs.spray.examples.mod4j.features;
        
        import org.eclipse.emf.ecore.util.EcoreUtil;
        import org.eclipse.graphiti.features.IFeatureProvider;
        import org.eclipse.graphiti.features.context.IPasteContext;
        import org.eclipse.graphiti.features.context.impl.AddContext;
        import org.eclipse.graphiti.mm.Property;
        import org.eclipse.graphiti.mm.pictograms.PictogramElement;
        import org.eclipse.graphiti.mm.pictograms.Diagram;
        import org.eclipse.graphiti.services.Graphiti;
        import org.eclipselabs.spray.runtime.graphiti.features.AbstractPasteFeature;
        import null.BusinessDomainDslPackage;
        import org.eclipselabs.spray.examples.mod4j.diagram.Mod4jModelService;
        import samplepackage.Association;
        import samplepackage.BusinessClass;
        import samplepackage.BusinessDomainModel;
        
        
        public abstract class Mod4jPasteFeatureBase extends AbstractPasteFeature  {
        
            protected Mod4jModelService modelService;
        
            public Mod4jPasteFeatureBase(IFeatureProvider fp) {
                super(fp);
                modelService = Mod4jModelService.getModelService(fp.getDiagramTypeProvider());
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public boolean canPaste(IPasteContext context) {
                // TODO: only support pasting directly in the diagram
                PictogramElement[] pes = context.getPictogramElements();
                if (pes.length != 1 || !(pes[0] instanceof Diagram)) {
                    return false;
                }
                // can paste, if all objects on the clipboard are PictogramElements with link on subclasses of BusinessDomainModel
                Object[] fromClipboard = getFromClipboard();
                if (fromClipboard == null || fromClipboard.length == 0) {
                    return false;
                }
                for (Object object : fromClipboard) {
                    if (!(object instanceof PictogramElement)) {
                        return false;
                    } else if(!(getBusinessObjectForPictogramElement((PictogramElement) object) instanceof BusinessDomainModel)) {
                        return false;
                    }
                }
                return true;
            }
            /**
             * {@inheritDoc}
             */
            @Override
            public void paste(IPasteContext context) {
                // already verified, that pasting is allowed just directly in the diagram
                PictogramElement[] pes = context.getPictogramElements();
                Diagram diagram = (Diagram) pes[0];
            
                // get the PictogramElements from the clipboard and the linked business object.
                Object[] objects = getFromClipboard();
                for (Object object : objects) {
                    PictogramElement pictogramElement = (PictogramElement) object;
                    BusinessDomainModel boRef = (BusinessDomainModel) getBusinessObjectForPictogramElement(pictogramElement);
                    BusinessDomainModel bo = EcoreUtil.copy(boRef);
                    addBusinessObjectToContainer(bo, pictogramElement);
            
                    // create a new AddContext for the creation of a new shape.
                    AddContext ac = new AddContext(new AddContext(), bo);
                    ac.setLocation(0, 0); // for simplicity paste at (0, 0)
                    ac.setTargetContainer(diagram); // paste on diagram
                    // copy all properties from the shape (e.g. ALIAS etc.)
                    for(Property prop : pictogramElement.getProperties()) {
                        ac.putProperty(prop.getKey(), prop.getValue());
                    }
                    getFeatureProvider().addIfPossible(ac);
                }
            }
            protected void addBusinessObjectToContainer(BusinessDomainModel bo, PictogramElement pe) {
                final BusinessDomainModel model = modelService.getModel();
                final String alias = Graphiti.getPeService().getPropertyValue(pe, PROPERTY_ALIAS);
                if(bo.eClass() == BusinessDomainDslPackage.Literals.BUSINESS_CLASS && "BusinessClassNameOnly".equals(alias)) {
                    model.getTypes().add((BusinessClass) bo);
                }
                if(bo.eClass() == BusinessDomainDslPackage.Literals.PACKAGE && alias == null) {
                    model.getPackages().add((samplepackage.Package) bo);
                }
                if(bo.eClass() == BusinessDomainDslPackage.Literals.PACKAGE && "Autopackage".equals(alias)) {
                    model.getPackages().add((samplepackage.Package) bo);
                }
                if(bo.eClass() == BusinessDomainDslPackage.Literals.BUSINESS_CLASS && alias == null) {
                    model.getTypes().add((BusinessClass) bo);
                }
                if(bo.eClass() == BusinessDomainDslPackage.Literals.BUSINESS_CLASS && "SimpleClass".equals(alias)) {
                    model.getTypes().add((BusinessClass) bo);
                }
                if(bo.eClass() == BusinessDomainDslPackage.Literals.STRING_PROPERTY && alias == null) {
                    throw new UnsupportedOperationException("No create behavior defined");
                }
                if(bo.eClass() == BusinessDomainDslPackage.Literals.STRING_PROPERTY && "String".equals(alias)) {
                    throw new UnsupportedOperationException("No create behavior defined");
                }
                if(bo.eClass() == BusinessDomainDslPackage.Literals.BOOL_PROPERTY && alias == null) {
                    throw new UnsupportedOperationException("No create behavior defined");
                }
                if(bo.eClass() == BusinessDomainDslPackage.Literals.UNIQUE_RULE && alias == null) {
                    throw new UnsupportedOperationException("No create behavior defined");
                }
                if(bo.eClass() == BusinessDomainDslPackage.Literals.BUSINESS_RULE && "BBB".equals(alias)) {
                    throw new UnsupportedOperationException("No create behavior defined");
                }
                if(bo.eClass() == BusinessDomainDslPackage.Literals.BUSINESS_RULE && alias == null) {
                    throw new UnsupportedOperationException("No create behavior defined");
                }
                if(bo.eClass() == BusinessDomainDslPackage.Literals.ASSOCIATION && alias == null) {
                    model.getAssociations().add((Association) bo);
                }
            }
        }
    '''
}
