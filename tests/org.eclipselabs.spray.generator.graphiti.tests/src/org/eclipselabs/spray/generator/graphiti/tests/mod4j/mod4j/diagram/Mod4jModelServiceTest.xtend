/** ****************************************************************************
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 **************************************************************************** */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.diagram

import org.eclipse.xtext.junit4.InjectWith
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*

@RunWith(typeof(XtextRunner2))
@InjectWith(typeof(SprayTestsInjectorProvider))
class Mod4jModelServiceTest extends AbstractSprayGeneratorTest {

    @Test
    def void test() {
       val fsa = triggerGenerator("mod4j/mod4j-busmod.spray")
       val keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/diagram/Mod4jModelService.java"
       assertTrue(keyClass + " should have been generated", fsa.files.containsKey(keyClass))
       assertEquals(keyClass + " should have the expected content", fsa.files.get(keyClass).toString, expectedContent.toString)
    }

    def private expectedContent() '''
        /*************************************************************************************
         *
         * Generated by Spray ModelService.xtend
         *
         * This file contains generated and should not be changed.
         * Use the extension point class (the direct subclass of this class) to add manual code
         *
         *************************************************************************************/
        package org.eclipselabs.spray.examples.mod4j.diagram;
        
        import java.io.IOException;
        
        import org.eclipse.core.resources.IResource;
        import org.eclipse.core.resources.IWorkspaceRoot;
        import org.eclipse.core.resources.ResourcesPlugin;
        import org.eclipse.core.runtime.CoreException;
        import org.eclipse.emf.ecore.EObject;
        import org.eclipse.emf.ecore.InternalEObject;
        import org.eclipse.emf.common.util.URI;
        import org.eclipse.emf.ecore.resource.Resource;
        import org.eclipse.emf.ecore.resource.ResourceSet;
        import org.eclipse.emf.ecore.util.EcoreUtil;
        import org.eclipse.graphiti.dt.IDiagramTypeProvider;
        import org.eclipse.graphiti.mm.pictograms.Diagram;
        import org.eclipse.graphiti.mm.pictograms.PictogramElement;
        import org.eclipse.graphiti.services.Graphiti;
        import org.eclipse.graphiti.services.IPeService;
        import org.eclipselabs.spray.runtime.graphiti.ISprayConstants;
        import null.BusinessDomainDslFactory;
        import samplepackage.BusinessDomainModel;
        
        
        /**
         * This class gives access to the domain model root element for a diagram.
         * On first access, a new resource will be created to which the model
         * is added.
         */
        public class Mod4jModelService implements ISprayConstants {
            public static final String FILE_EXTENSION = "businessdomaindsl";
            protected IPeService peService;
            protected IDiagramTypeProvider dtp;
            
            static protected Mod4jModelService modelService = null;
            
            /**
             * return the model service, create one if it does not exist yet.
             */
            static public Mod4jModelService getModelService(IDiagramTypeProvider dtp){
           	    modelService = new Mod4jModelService(dtp);
                return modelService;
            }
            
            /**
             * return the model service.
             * returns null if there is no model service.
             */
            static public Mod4jModelService getModelService(){
                return modelService;
            }
            
            protected Mod4jModelService (IDiagramTypeProvider dtp) {
                this.dtp = dtp;
                this.peService = Graphiti.getPeService();
            }
            
            public BusinessDomainModel getModel () {
                final Diagram diagram = dtp.getDiagram();
                Resource r = diagram.eResource();
                ResourceSet set = r.getResourceSet();
                EObject bo = (EObject) dtp.getFeatureProvider().getBusinessObjectForPictogramElement(diagram);
                BusinessDomainModel model = null;
                // If its a proxy, resolve it
               if( bo != null && bo.eIsProxy() ){
                    if( bo instanceof InternalEObject) {
                        model = (BusinessDomainModel)set.getEObject(((InternalEObject) bo).eProxyURI(), true);
                    }
                }
                if (model == null) {
                    model = createModel();
                }
                return model;
            }
            
            public Object getBusinessObject(PictogramElement pe){
        		return dtp.getFeatureProvider().getBusinessObjectForPictogramElement(dtp.getDiagram());
        	}
            
            /**
             * Creates the domain model element and store it in the file. Overwrite to set required properties on creation.
             */
            protected BusinessDomainModel createModel () {
                final Diagram diagram = dtp.getDiagram();
                try {
                    BusinessDomainModel model = BusinessDomainDslFactory.eINSTANCE.createBusinessDomainModel();
                    createModelResourceAndAddModel (model);
                    peService.setPropertyValue(diagram, PROPERTY_URI, EcoreUtil.getURI(model).toString());
                    // link the diagram with the model element
                    dtp.getFeatureProvider().link(diagram, model);
                    return model;
                } catch (CoreException e) {
                    e.printStackTrace();
                    return null;
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
            }
        
            protected void createModelResourceAndAddModel (final BusinessDomainModel model) throws CoreException, IOException {
                final Diagram diagram = dtp.getDiagram();
                URI uri = diagram.eResource().getURI();
                uri = uri.trimFragment();
                uri = uri.trimFileExtension();
                uri = uri.appendFileExtension(FILE_EXTENSION);
                ResourceSet rSet = diagram.eResource().getResourceSet();
                final IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();
                IResource file = workspaceRoot.findMember(uri.toPlatformString(true));
                if (file == null || !file.exists()) {
                    Resource resource = rSet.createResource(uri);
                    resource.setTrackingModification(true);
                    resource.getContents().add(model);
                } else {
                    final Resource resource = rSet.getResource(uri, true);
                    resource.getContents().add(model);
                }
            }
        }
    '''
}
