/** ****************************************************************************
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 **************************************************************************** */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.features

import org.eclipse.xtext.junit4.InjectWith
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*

@RunWith(typeof(XtextRunner2))
@InjectWith(typeof(SprayTestsInjectorProvider))
class Mod4jCustomRedrawFeatureBaseTest extends AbstractSprayGeneratorTest {

    @Test
    def void test() {
       val fsa = triggerGenerator("mod4j/mod4j-busmod.spray")
       val keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/features/Mod4jCustomRedrawFeatureBase.java"
       assertTrue(keyClass + " should have been generated", fsa.files.containsKey(keyClass))
       assertEquals(keyClass + " should have the expected content", fsa.files.get(keyClass).toString, expectedContent.toString)
    }

    def private expectedContent() '''
        /*************************************************************************************
         *
         * Generated by Spray CustomFeature.xtend
         *
         * This file contains generated and should not be changed.
         * Use the extension point class (the direct subclass of this class) to add manual code
         *
         *************************************************************************************/
        package org.eclipselabs.spray.examples.mod4j.features;
        
        import org.eclipse.emf.ecore.EObject;
        import org.eclipse.graphiti.features.IFeatureProvider;
        import org.eclipse.graphiti.features.context.ICustomContext;
        import org.eclipse.graphiti.mm.pictograms.PictogramElement;
        import org.eclipselabs.spray.runtime.graphiti.features.AbstractCustomFeature;
        
        public abstract class Mod4jCustomRedrawFeatureBase extends AbstractCustomFeature {
        
            public Mod4jCustomRedrawFeatureBase(final IFeatureProvider fp) {
                super(fp);
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public String getName() {
                return "Redraw Diagram"; //$NON-NLS-1$
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public String getDescription() {
                return "Redraw Diagram description"; //$NON-NLS-1$
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public boolean canExecute(final ICustomContext context) {
                // allow rename if exactly one pictogram element
                // representing an EClass is selected
                boolean ret = true;
                final PictogramElement[] pes = context.getPictogramElements();
                if (pes != null && pes.length == 1) {
                    final EObject bo = (EObject) getBusinessObjectForPictogramElement(pes[0]);
                    ret = canExecute(context, bo);
                }
                return ret;
            }
        
            protected boolean canExecute(final ICustomContext context, final EObject bo) {
                return true;
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public void execute(final ICustomContext context) {
                final PictogramElement[] pes = context.getPictogramElements();
                if (pes != null && pes.length == 1) {
                    final EObject bo = (EObject) getBusinessObjectForPictogramElement(pes[0]);
                    execute(context, bo);
                }
            }
        
            public abstract void execute(ICustomContext context, EObject object);
        }
    '''
}
