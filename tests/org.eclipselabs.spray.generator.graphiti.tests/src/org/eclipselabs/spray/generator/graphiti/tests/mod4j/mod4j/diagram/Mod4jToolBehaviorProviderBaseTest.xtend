package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.diagram

import org.eclipse.xtext.junit4.InjectWith
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*

@RunWith(typeof(XtextRunner2))
@InjectWith(typeof(SprayTestsInjectorProvider))
class Mod4jToolBehaviorProviderBaseTest extends AbstractSprayGeneratorTest {

    @Test
    def void test() {
       val fsa = triggerGenerator("mod4j/mod4j-busmod.spray")
       val keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/diagram/Mod4jToolBehaviorProviderBase.java"
       assertTrue(keyClass + " should have been generated", fsa.files.containsKey(keyClass))
       assertEquals(keyClass + " should have the expected content", fsa.files.get(keyClass).toString, expectedContent.toString)
    }

    def private expectedContent() '''
        /*************************************************************************************
         *
         * Generated by Spray ToolBehaviorProvider.xtend
         *
         * This file contains generated and should not be changed.
         * Use the extension point class (the direct subclass of this class) to add manual code
         *
         *************************************************************************************/
        package org.eclipselabs.spray.examples.mod4j.diagram;
        
        import org.eclipse.graphiti.dt.IDiagramTypeProvider;
        import org.eclipse.graphiti.features.IFeature;
        import org.eclipse.graphiti.palette.IPaletteCompartmentEntry;
        import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutService;
        import org.eclipselabs.spray.runtime.graphiti.tb.AbstractSprayToolBehaviorProvider;
        import org.eclipse.graphiti.mm.algorithms.GraphicsAlgorithm;
        import org.eclipse.graphiti.mm.pictograms.PictogramElement;
        import org.eclipse.graphiti.mm.pictograms.ContainerShape;
        import org.eclipse.emf.common.util.EList;
        import org.eclipse.graphiti.services.Graphiti;
        
        import com.google.common.collect.Lists;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateAssociationFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateAutopackageFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBBBFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBoolPropertyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBusinessClassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBusinessClassNameOnlyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBusinessClassSuperclassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBusinessRuleFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreatePackageFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateSimpleClassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateStringFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateStringPropertyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateUniqueRuleFeature;
        
        public abstract class Mod4jToolBehaviorProviderBase extends AbstractSprayToolBehaviorProvider {
            protected static final String COMPARTMENT_SHAPES      = "Shapes";
            protected static final String COMPARTMENT_RULES       = "Rules";
            protected static final String COMPARTMENT_CONNECTIONS = "Connections";
            protected static final String COMPARTMENT_PROPERTIES  = "Properties";
        
            public Mod4jToolBehaviorProviderBase(final IDiagramTypeProvider dtp) {
                super(dtp);
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public GraphicsAlgorithm getSelectionBorder(PictogramElement pe) {
                boolean isFromDsl = SprayLayoutService.isShapeFromDsl(pe);
                if (isFromDsl) {
                    ContainerShape container = (ContainerShape) pe;
                    if (!container.getChildren().isEmpty()) {
                        return container.getChildren().get(0).getGraphicsAlgorithm();
                    }
                }
                return super.getSelectionBorder(pe);
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            protected void buildCreationTools() {
                buildCreationTool(new Mod4jCreateBusinessClassNameOnlyFeature(this.getFeatureProvider()));
                buildCreationTool(new Mod4jCreatePackageFeature(this.getFeatureProvider()));
                buildCreationTool(new Mod4jCreateAutopackageFeature(this.getFeatureProvider()));
                buildCreationTool(new Mod4jCreateBusinessClassFeature(this.getFeatureProvider()));
                buildCreationTool(new Mod4jCreateSimpleClassFeature(this.getFeatureProvider()));
                buildCreationTool(new Mod4jCreateStringPropertyFeature(this.getFeatureProvider()));
                buildCreationTool(new Mod4jCreateStringFeature(this.getFeatureProvider()));
                buildCreationTool(new Mod4jCreateBoolPropertyFeature(this.getFeatureProvider()));
                buildCreationTool(new Mod4jCreateUniqueRuleFeature(this.getFeatureProvider()));
                buildCreationTool(new Mod4jCreateBBBFeature(this.getFeatureProvider()));
                buildCreationTool(new Mod4jCreateBusinessRuleFeature(this.getFeatureProvider()));
                buildCreationTool(new Mod4jCreateAssociationFeature(this.getFeatureProvider()));
                buildCreationTool(new Mod4jCreateBusinessClassSuperclassFeature(this.getFeatureProvider()));
                // Compartments
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            protected Iterable<IPaletteCompartmentEntry> buildPaletteCompartments() {
                return Lists.newArrayList(getPaletteCompartment(COMPARTMENT_SHAPES), getPaletteCompartment(COMPARTMENT_RULES), getPaletteCompartment(COMPARTMENT_CONNECTIONS), getPaletteCompartment(COMPARTMENT_PROPERTIES), getPaletteCompartment(COMPARTMENT_DEFAULT));
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            protected IPaletteCompartmentEntry getPaletteCompartmentForFeature(final IFeature feature) {
                if (feature instanceof Mod4jCreateBusinessClassNameOnlyFeature) {
                    return getPaletteCompartment(COMPARTMENT_SHAPES);
                } else if (feature instanceof Mod4jCreatePackageFeature) {
                    return getPaletteCompartment(COMPARTMENT_SHAPES);
                } else if (feature instanceof Mod4jCreateAutopackageFeature) {
                    return getPaletteCompartment(COMPARTMENT_SHAPES);
                } else if (feature instanceof Mod4jCreateBusinessClassFeature) {
                    return getPaletteCompartment(COMPARTMENT_SHAPES);
                } else if (feature instanceof Mod4jCreateSimpleClassFeature) {
                    return getPaletteCompartment(COMPARTMENT_SHAPES);
                } else if (feature instanceof Mod4jCreateStringPropertyFeature) {
                    return getPaletteCompartment(COMPARTMENT_PROPERTIES);
                } else if (feature instanceof Mod4jCreateStringFeature) {
                    return getPaletteCompartment(COMPARTMENT_PROPERTIES);
                } else if (feature instanceof Mod4jCreateBoolPropertyFeature) {
                    return getPaletteCompartment(COMPARTMENT_PROPERTIES);
                } else if (feature instanceof Mod4jCreateUniqueRuleFeature) {
                    return getPaletteCompartment(COMPARTMENT_RULES);
                } else if (feature instanceof Mod4jCreateBBBFeature) {
                    return getPaletteCompartment(COMPARTMENT_SHAPES);
                } else if (feature instanceof Mod4jCreateBusinessRuleFeature) {
                    return getPaletteCompartment(COMPARTMENT_RULES);
                } else if (feature instanceof Mod4jCreateAssociationFeature) {
                    return getPaletteCompartment(COMPARTMENT_CONNECTIONS);
                }
                return super.getPaletteCompartmentForFeature(feature);
            }
        }
    '''
}
