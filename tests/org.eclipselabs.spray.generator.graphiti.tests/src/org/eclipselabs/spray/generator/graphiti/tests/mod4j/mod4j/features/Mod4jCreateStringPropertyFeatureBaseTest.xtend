package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.features

import org.eclipse.xtext.junit4.InjectWith
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*

@RunWith(typeof(XtextRunner2))
@InjectWith(typeof(SprayTestsInjectorProvider))
class Mod4jCreateStringPropertyFeatureBaseTest extends AbstractSprayGeneratorTest {

    @Test
    def void test() {
       val fsa = triggerGenerator("mod4j/mod4j-busmod.spray")
       val keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/features/Mod4jCreateStringPropertyFeatureBase.java"
       assertTrue(keyClass + " should have been generated", fsa.files.containsKey(keyClass))
       assertEquals(keyClass + " should have the expected content", fsa.files.get(keyClass).toString, expectedContent.toString)
    }

    def private expectedContent() '''
        /*************************************************************************************
         *
         * Generated by Spray CreateShapeFeature.xtend
         *
         * This file contains generated and should not be changed.
         * Use the extension point class (the direct subclass of this class) to add manual code
         *
         *************************************************************************************/
        package org.eclipselabs.spray.examples.mod4j.features;
        
        import org.eclipse.graphiti.features.IFeatureProvider;
        import org.eclipse.graphiti.features.context.ICreateContext;
        import org.eclipse.graphiti.mm.pictograms.Diagram;
        import org.eclipselabs.spray.runtime.graphiti.containers.SampleUtil;
        import org.eclipselabs.spray.runtime.graphiti.features.AbstractCreateFeature;
        import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutService;
        import org.eclipselabs.spray.runtime.graphiti.GraphitiProperties;
        import samplepackage.StringProperty;
        import org.eclipse.graphiti.features.context.IAreaContext;
        import org.eclipse.graphiti.mm.pictograms.PictogramElement;
        import org.eclipse.graphiti.features.context.impl.AddContext;
        import org.eclipse.graphiti.mm.pictograms.ContainerShape;
        import null.BusinessDomainDslFactory;
        import org.eclipselabs.spray.examples.mod4j.diagram.Mod4jModelService;
        import samplepackage.BusinessDomainModel;
        import samplepackage.StringProperty;
        
        
        public abstract class Mod4jCreateStringPropertyFeatureBase extends AbstractCreateFeature {
            protected static String TITLE = "Create ";
            protected static String USER_QUESTION = "Enter new  name";
            protected Mod4jModelService modelService;
            protected StringProperty newClass = null;
        
        
            public Mod4jCreateStringPropertyFeatureBase (final IFeatureProvider fp) {
                // set name and description of the creation feature
                super(fp, "StringProperty", "Create new StringProperty");
                modelService = Mod4jModelService.getModelService(fp.getDiagramTypeProvider());
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public boolean canCreate(final ICreateContext context) {
                final Object target = getBusinessObjectForPictogramElement(context.getTargetContainer());
                // TODO: Respect the cardinality of the containment reference
                if (context.getTargetContainer() instanceof Diagram) {
                    return false;
                } else if (context.getTargetContainer() instanceof ContainerShape) {
                }
                // And now the new stuff
                // cls BusinessClass refers to this metaClass
                if( target instanceof samplepackage.BusinessClass ){
                    if (SprayLayoutService.isCompartment(context.getTargetContainer())) {
                        String id = GraphitiProperties.get(context.getTargetContainer(), TEXT_ID);
                        if ( (id != null) && (id.equals("attributes")) ) {
                            return true;
                        }
                    }
                }
                // cls BusinessClass refers to this metaClass
                if( target instanceof samplepackage.BusinessClass ){
                    if (SprayLayoutService.isCompartment(context.getTargetContainer())) {
                        String id = GraphitiProperties.get(context.getTargetContainer(), TEXT_ID);
                        if ( (id != null) && (id.equals("simpleAttributes")) ) {
                            return true;
                        }
                    }
                }
                // cls UniqueRule refers to this metaClass
                return false;
            }
            /**
             * {@inheritDoc}
             */
            @Override
            public Object[] create(final ICreateContext context) {
                newClass = createStringProperty(context);
            
                if (newClass == null ) {
                    return EMPTY;
                }
            
                // do the add
                addGraphicalRepresentation(context, newClass);
                
                // activate direct editing after object creation
                getFeatureProvider().getDirectEditingInfo().setActive(true);
                
                // return newly created business object(s)
                return new Object[] { newClass };
            }
            //        
                    
                    /**
                     * Creates a new {@link StringProperty} instance and adds it to the containing type.
                     */
                    protected StringProperty createStringProperty(final ICreateContext context) {
                        // create StringProperty instance
                        final StringProperty newClass = BusinessDomainDslFactory.eINSTANCE.createStringProperty();
                        boolean isContainment = false;
                        final Object target = getBusinessObjectForPictogramElement(context.getTargetContainer());
            //              And now the NEW stuff
                           if( target instanceof samplepackage.BusinessClass ){
                               samplepackage.BusinessClass domainObject = (samplepackage.BusinessClass) target;
                                   // containment
                                   domainObject.getProperties().add(newClass);
                                   setDoneChanges(true);
                                   return newClass;
                               }
                           if( target instanceof samplepackage.BusinessClass ){
                               samplepackage.BusinessClass domainObject = (samplepackage.BusinessClass) target;
                                   // containment
                                   domainObject.getProperties().add(newClass);
                                   setDoneChanges(true);
                                   return newClass;
                               }
                           // NOT containment 
                        setDoneChanges(true);
                        return newClass;
                    }
        }
    '''
}
