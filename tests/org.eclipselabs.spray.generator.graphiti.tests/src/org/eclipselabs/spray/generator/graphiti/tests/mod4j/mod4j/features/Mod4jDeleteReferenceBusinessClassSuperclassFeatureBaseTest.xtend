/** ****************************************************************************
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 **************************************************************************** */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.features

import org.eclipse.xtext.junit4.InjectWith
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*

@RunWith(typeof(XtextRunner2))
@InjectWith(typeof(SprayTestsInjectorProvider))
class Mod4jDeleteReferenceBusinessClassSuperclassFeatureBaseTest extends AbstractSprayGeneratorTest {

    @Test
    def void test() {
       val fsa = triggerGenerator("mod4j/mod4j-busmod.spray")
       val keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/features/Mod4jDeleteReferenceBusinessClassSuperclassFeatureBase.java"
       assertTrue(keyClass + " should have been generated", fsa.files.containsKey(keyClass))
       assertEquals(keyClass + " should have the expected content", fsa.files.get(keyClass).toString, expectedContent.toString)
    }

    def private expectedContent() '''
        /*************************************************************************************
         *
         * Generated by Spray DeleteReferenceFeature.xtend
         *
         * This file contains generated and should not be changed.
         * Use the extension point class (the direct subclass of this class) to add manual code
         *
         *************************************************************************************/
        package org.eclipselabs.spray.examples.mod4j.features;
        
        import org.eclipse.emf.ecore.EObject;
        import org.eclipse.emf.ecore.util.EcoreUtil;
        import org.eclipse.graphiti.features.IFeatureProvider;
        import org.eclipse.graphiti.features.IRemoveFeature;
        import org.eclipse.graphiti.features.context.IDeleteContext;
        import org.eclipse.graphiti.features.context.IRemoveContext;
        import org.eclipse.graphiti.features.context.impl.RemoveContext;
        import org.eclipse.graphiti.mm.pictograms.AnchorContainer;
        import org.eclipse.graphiti.mm.pictograms.Connection;
        import org.eclipse.graphiti.mm.pictograms.PictogramElement;
        import org.eclipselabs.spray.runtime.graphiti.features.DefaultDeleteFeature;
        import samplepackage.BusinessClass;
        
        public abstract class Mod4jDeleteReferenceBusinessClassSuperclassFeatureBase extends DefaultDeleteFeature {
        
            public Mod4jDeleteReferenceBusinessClassSuperclassFeatureBase(final IFeatureProvider fp) {
                super(fp);
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public void delete(final IDeleteContext context) {
                final PictogramElement pe = context.getPictogramElement();
                final String reference = peService.getPropertyValue(pe, PROPERTY_REFERENCE);
                final String element = peService.getPropertyValue(pe, PROPERTY_TARGETOBJECT);
        
                final Object[] businessObjectsForPictogramElement = getAllBusinessObjectsForPictogramElement(pe);
                if (businessObjectsForPictogramElement != null && businessObjectsForPictogramElement.length > 0) {
                    if (!getUserDecision()) {
                        return;
                    }
                }
        
                preDelete(context);
        
                // TRY
                if (pe instanceof Connection) {
                    final Connection line = (Connection) pe;
                    final AnchorContainer parent = line.getStart().getParent();
                    // EObject start = getBusinessObjectForPictogramElement(parent);
                    final AnchorContainer child = line.getEnd().getParent();
                    // EObject end = getBusinessObjectForPictogramElement(child);
                }
                //END TRY
        
                final IRemoveContext rc = new RemoveContext(pe);
                final IRemoveFeature removeFeature = getFeatureProvider().getRemoveFeature(rc);
                if (removeFeature != null) {
                    removeFeature.remove(rc);
                }
        
                deleteReferences(businessObjectsForPictogramElement, reference, element);
                setDoneChanges(true);
                postDelete(context);
            }
        
            /**
             * Delete business objects.
             * 
             * @param businessObjects
             *            the business objects
             */
            protected void deleteReferences(final Object[] businessObjects, final String reference, final String element) {
                if (businessObjects != null) {
                    for (final Object bo : businessObjects) {
                        deleteReference((EObject) bo, reference, element);
                    }
                }
            }
        
            /**
             * Delete business object.
             * 
             * @param bo
             *            the bo
             */
            protected void deleteReference(final EObject bo, final String reference, final String element) {
                if (reference == null) {
                    EcoreUtil.delete(bo, true);
                } else {
                    if (bo instanceof BusinessClass) {
                        final BusinessClass object = (BusinessClass) bo;
        
                        object.setSuperclass(null);
                    } else {
                        System.out.println("DELETE OBJECT " + bo);
                    }
                }
            }
        }
    '''
}
