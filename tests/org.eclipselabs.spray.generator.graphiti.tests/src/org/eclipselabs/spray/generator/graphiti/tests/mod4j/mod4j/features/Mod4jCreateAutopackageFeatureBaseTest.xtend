/** ****************************************************************************
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 **************************************************************************** */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.features

import org.eclipse.xtext.junit4.InjectWith
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*

@RunWith(typeof(XtextRunner2))
@InjectWith(typeof(SprayTestsInjectorProvider))
class Mod4jCreateAutopackageFeatureBaseTest extends AbstractSprayGeneratorTest {

    @Test
    def void test() {
       val fsa = triggerGenerator("mod4j/mod4j-busmod.spray")
       val keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/features/Mod4jCreateAutopackageFeatureBase.java"
       assertTrue(keyClass + " should have been generated", fsa.files.containsKey(keyClass))
       assertEquals(keyClass + " should have the expected content", fsa.files.get(keyClass).toString, expectedContent.toString)
    }

    def private expectedContent() '''
        /*************************************************************************************
         *
         * Generated by Spray CreateShapeFeature.xtend
         *
         * This file contains generated and should not be changed.
         * Use the extension point class (the direct subclass of this class) to add manual code
         *
         *************************************************************************************/
        package org.eclipselabs.spray.examples.mod4j.features;
        
        import org.eclipse.graphiti.features.IFeatureProvider;
        import org.eclipse.graphiti.features.context.ICreateContext;
        import org.eclipse.graphiti.mm.pictograms.Diagram;
        import org.eclipselabs.spray.runtime.graphiti.containers.SampleUtil;
        import org.eclipselabs.spray.runtime.graphiti.features.AbstractCreateFeature;
        import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutService;
        import org.eclipselabs.spray.runtime.graphiti.GraphitiProperties;
        import samplepackage.Package;
        import org.eclipse.graphiti.features.context.IAreaContext;
        import org.eclipse.graphiti.mm.pictograms.PictogramElement;
        import org.eclipse.graphiti.features.context.impl.AddContext;
        import org.eclipse.graphiti.mm.pictograms.ContainerShape;
        import null.BusinessDomainDslFactory;
        import org.eclipselabs.spray.examples.mod4j.diagram.Mod4jModelService;
        import samplepackage.BusinessDomainModel;
        
        
        public abstract class Mod4jCreateAutopackageFeatureBase extends AbstractCreateFeature {
            protected static String TITLE = "Create ";
            protected static String USER_QUESTION = "Enter new  name";
            protected Mod4jModelService modelService;
            protected samplepackage.Package newClass = null;
        
        
            public Mod4jCreateAutopackageFeatureBase (final IFeatureProvider fp) {
                // set name and description of the creation feature
                super(fp, "Autopackage", "Create new Autopackage");
                modelService = Mod4jModelService.getModelService(fp.getDiagramTypeProvider());
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public boolean canCreate(final ICreateContext context) {
                final Object target = getBusinessObjectForPictogramElement(context.getTargetContainer());
                // TODO: Respect the cardinality of the containment reference
                if (context.getTargetContainer() instanceof Diagram) {
                    return true;
                } else if (context.getTargetContainer() instanceof ContainerShape) {
                }
                // And now the new stuff
                return false;
            }
            /**
             * {@inheritDoc}
             */
            @Override
            public Object[] create(final ICreateContext context) {
                newClass = createAutopackage(context);
            
                if (newClass == null ) {
                    return EMPTY;
                }
            
                // do the add
                addGraphicalRepresentation(context, newClass);
                
                // activate direct editing after object creation
                getFeatureProvider().getDirectEditingInfo().setActive(true);
                
                // return newly created business object(s)
                return new Object[] { newClass };
            }
            //       org.eclipse.emf.ecore.impl.EReferenceImpl@4f7967de (name: packages) (ordered: true, unique: true, lowerBound: 0, upperBound: -1) (changeable: true, volatile: false, transient: false, defaultValueLiteral: null, unsettable: false, derived: false) (containment: true, resolveProxies: false) 
                    
                    /**
                     * Creates a new {@link samplepackage.Package} instance and adds it to the containing type.
                     */
                    protected samplepackage.Package createAutopackage(final ICreateContext context) {
                        // create Package instance
                        final samplepackage.Package newClass = BusinessDomainDslFactory.eINSTANCE.createPackage();
                        // ask user for Autopackage name
                        String newName = SampleUtil.askString(TITLE, USER_QUESTION, "", null);
                        if (newName == null || newName.trim().length() == 0) {
                           return null;
                        } else {
                           newClass.setName(newName);
                        }
                        boolean isContainment = false;
                        final Object target = getBusinessObjectForPictogramElement(context.getTargetContainer());
                        if (!isContainment) {
                            // add the element to containment reference
                            BusinessDomainModel model = modelService.getModel();
                            model.getPackages().add(newClass);
                        }
            //              And now the NEW stuff
                        setDoneChanges(true);
                        return newClass;
                    }
            /**
             * {@inheritDoc}
             */
            @Override
            protected PictogramElement addGraphicalRepresentation(final IAreaContext context, final Object newObject) {
                final AddContext ctx = new AddContext(context, newObject);
                ctx.putProperty(PROPERTY_ALIAS, "Autopackage");
                return getFeatureProvider().addIfPossible(ctx);
            }
        }
    '''
}
