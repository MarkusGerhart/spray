package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j

import org.eclipse.xtext.junit4.InjectWith
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*

@RunWith(typeof(XtextRunner2))
@InjectWith(typeof(SprayTestsInjectorProvider))
class Mod4jModuleBaseTest extends AbstractSprayGeneratorTest {

    @Test
    def void test() {
       val fsa = triggerGenerator("mod4j/mod4j-busmod.spray")
       val keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/Mod4jModuleBase.java"
       assertTrue(keyClass + " should have been generated", fsa.files.containsKey(keyClass))
       assertEquals(keyClass + " should have the expected content", fsa.files.get(keyClass).toString, expectedContent.toString)
    }

    def private expectedContent() '''
        /*************************************************************************************
         *
         * Generated by Spray GuiceModule.xtend
         *
         * This file contains generated and should not be changed.
         * Use the extension point class (the direct subclass of this class) to add manual code
         *
         *************************************************************************************/
        package org.eclipselabs.spray.examples.mod4j;
        
        import org.eclipse.core.resources.IWorkspace;
        import org.eclipse.core.resources.ResourcesPlugin;
        import org.eclipse.ui.IWorkbench;
        import org.eclipse.ui.PlatformUI;
        import org.eclipse.xtext.service.AbstractGenericModule;
        import org.eclipse.xtext.ui.editor.GlobalURIEditorOpener;
        import org.eclipse.xtext.ui.editor.IURIEditorOpener;
        import org.eclipse.xtext.ui.resource.IStorage2UriMapper;
        import org.eclipse.xtext.ui.resource.Storage2UriMapperImpl;
        
        import com.google.inject.Binder;
        import com.google.inject.name.Names;
        
        public class Mod4jModuleBase extends AbstractGenericModule {
            public Class<? extends IURIEditorOpener> bindIURIEditorOpener() {
                return GlobalURIEditorOpener.class;
            }
        
            @Override
            public void configure(Binder binder) {
                binder.bind(IStorage2UriMapper.class).to(Storage2UriMapperImpl.class);
                binder.bind(IWorkbench.class).toInstance(PlatformUI.getWorkbench());
                binder.bind(IWorkspace.class).toInstance(ResourcesPlugin.getWorkspace());
                binder.bind(String.class).annotatedWith(Names.named("diagramTypeId")).toInstance("Mod4j");
            }
        }
    '''
}
