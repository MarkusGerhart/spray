/** ****************************************************************************
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 **************************************************************************** */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.diagram

import org.eclipse.xtext.junit4.InjectWith
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*

@RunWith(typeof(XtextRunner2))
@InjectWith(typeof(SprayTestsInjectorProvider))
class Mod4jFeatureProviderBaseTest extends AbstractSprayGeneratorTest {

    @Test
    def void test() {
       val fsa = triggerGenerator("mod4j/mod4j-busmod.spray")
       val keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/diagram/Mod4jFeatureProviderBase.java"
       assertTrue(keyClass + " should have been generated", fsa.files.containsKey(keyClass))
       assertEquals(keyClass + " should have the expected content", fsa.files.get(keyClass).toString, expectedContent.toString)
    }

    def private expectedContent() '''
        /*************************************************************************************
         *
         * Generated by Spray FeatureProvider.xtend
         *
         * This file contains generated and should not be changed.
         * Use the extension point class (the direct subclass of this class) to add manual code
         *
         *************************************************************************************/
        package org.eclipselabs.spray.examples.mod4j.diagram;
        
        import org.eclipse.emf.ecore.EObject;
        import org.eclipse.graphiti.dt.IDiagramTypeProvider;
        import org.eclipse.graphiti.features.IAddFeature;
        import org.eclipse.graphiti.features.ICreateConnectionFeature;
        import org.eclipse.graphiti.features.ICreateFeature;
        import org.eclipse.graphiti.features.ICopyFeature;
        import org.eclipse.graphiti.features.ILayoutFeature;
        import org.eclipse.graphiti.features.IMoveShapeFeature;
        import org.eclipse.graphiti.features.IPasteFeature;
        import org.eclipse.graphiti.features.IUpdateFeature;
        import org.eclipse.graphiti.features.IDeleteFeature;
        import org.eclipse.graphiti.features.IDirectEditingFeature;
        import org.eclipse.graphiti.features.IRemoveFeature;
        import org.eclipse.graphiti.features.IResizeShapeFeature;
        import org.eclipse.graphiti.features.context.IAddContext;
        import org.eclipse.graphiti.features.context.ICustomContext;
        import org.eclipse.graphiti.features.context.ICopyContext;
        import org.eclipse.graphiti.features.context.IDeleteContext;
        import org.eclipse.graphiti.features.context.IDirectEditingContext;
        import org.eclipse.graphiti.features.context.ILayoutContext;
        import org.eclipse.graphiti.features.context.IMoveShapeContext;
        import org.eclipse.graphiti.features.context.IUpdateContext;
        import org.eclipse.graphiti.features.context.IPasteContext;
        import org.eclipse.graphiti.features.context.IRemoveContext;
        import org.eclipse.graphiti.features.context.IResizeShapeContext;
        import org.eclipse.graphiti.features.custom.ICustomFeature;
        import org.eclipse.graphiti.mm.pictograms.PictogramElement;
        import org.eclipse.graphiti.mm.pictograms.Shape;
        import org.eclipse.graphiti.mm.pictograms.ContainerShape;
        
        import org.eclipselabs.spray.runtime.graphiti.GraphitiProperties;
        import org.eclipselabs.spray.runtime.graphiti.features.DefaultDeleteFeature;
        import org.eclipselabs.spray.runtime.graphiti.features.DefaultFeatureProvider;
        import org.eclipselabs.spray.runtime.graphiti.features.DefaultRemoveFeature;
        import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutService;
        import org.eclipselabs.spray.runtime.graphiti.layout.SprayFixedLayoutManager;
        import org.eclipselabs.spray.runtime.graphiti.containers.OwnerPropertyDeleteFeature;
        import null.BusinessDomainDslPackage;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jAddAssociationFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jAddAutopackageFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jAddBBBFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jAddBoolPropertyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jAddBusinessClassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jAddBusinessClassNameOnlyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jAddBusinessRuleFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jAddPackageFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jAddReferenceBusinessClassSuperclassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jAddSimpleClassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jAddStringFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jAddStringPropertyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jAddUniqueRuleFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCopyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateAssociationFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateAutopackageFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBBBFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBoolPropertyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBusinessClassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBusinessClassNameOnlyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBusinessClassSuperclassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBusinessRuleFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreatePackageFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateSimpleClassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateStringFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateStringPropertyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateUniqueRuleFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jCustomRedrawFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jDeleteReferenceBusinessClassSuperclassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jDirectEditAssociationFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jDirectEditAutopackageFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jDirectEditBBBFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jDirectEditBoolPropertyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jDirectEditBusinessClassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jDirectEditBusinessClassNameOnlyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jDirectEditBusinessRuleFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jDirectEditPackageFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jDirectEditSimpleClassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jDirectEditStringFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jDirectEditStringPropertyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jDirectEditUniqueRuleFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jLayoutAutopackageFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jLayoutBBBFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jLayoutBoolPropertyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jLayoutBusinessClassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jLayoutBusinessClassNameOnlyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jLayoutBusinessRuleFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jLayoutPackageFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jLayoutSimpleClassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jLayoutStringFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jLayoutStringPropertyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jLayoutUniqueRuleFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jPasteFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jResizeAutopackageFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jResizeBBBFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jResizeBoolPropertyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jResizeBusinessClassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jResizeBusinessClassNameOnlyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jResizeBusinessRuleFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jResizePackageFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jResizeSimpleClassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jResizeStringFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jResizeStringPropertyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jResizeUniqueRuleFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jUpdateAssociationFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jUpdateAutopackageFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jUpdateBBBFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jUpdateBoolPropertyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jUpdateBusinessClassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jUpdateBusinessClassNameOnlyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jUpdateBusinessRuleFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jUpdatePackageFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jUpdateSimpleClassFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jUpdateStringFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jUpdateStringPropertyFeature;
        import org.eclipselabs.spray.examples.mod4j.features.Mod4jUpdateUniqueRuleFeature;
        import samplepackage.Association;
        import samplepackage.BoolProperty;
        import samplepackage.BusinessClass;
        import samplepackage.BusinessRule;
        import samplepackage.StringProperty;
        import samplepackage.UniqueRule;
        
        
        @SuppressWarnings("unused")
        public abstract class Mod4jFeatureProviderBase extends DefaultFeatureProvider {
            public Mod4jFeatureProviderBase(final IDiagramTypeProvider dtp) {
                super(dtp);
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public IAddFeature getAddFeature(final IAddContext context) {
                // is object for add request a EClass or EReference?
                final EObject bo = (EObject) context.getNewObject() ;
                final String reference = (String)context.getProperty(PROPERTY_REFERENCE);
                final String alias = (String)context.getProperty(PROPERTY_ALIAS);
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && "BusinessClassNameOnly".equals(alias)
                ) {
                    if ( reference == null ){
                        return new Mod4jAddBusinessClassNameOnlyFeature(this);
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.PACKAGE && alias==null
                ) {
                    if ( reference == null ){
                        return new Mod4jAddPackageFeature(this);
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.PACKAGE && "Autopackage".equals(alias)
                ) {
                    if ( reference == null ){
                        return new Mod4jAddAutopackageFeature(this);
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && alias==null
                ) {
                    if ( reference == null ){
                        return new Mod4jAddBusinessClassFeature(this);
                        } else if( reference.equals(BusinessDomainDslPackage.Literals.BUSINESS_CLASS__SUPERCLASS.getName())){
                            return new Mod4jAddReferenceBusinessClassSuperclassFeature(this);
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && "SimpleClass".equals(alias)
                ) {
                    if ( reference == null ){
                        return new Mod4jAddSimpleClassFeature(this);
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.STRING_PROPERTY && alias==null
                ) {
                    if ( reference == null ){
                        return new Mod4jAddStringPropertyFeature(this);
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.STRING_PROPERTY && "String".equals(alias)
                ) {
                    if ( reference == null ){
                        return new Mod4jAddStringFeature(this);
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BOOL_PROPERTY && alias==null
                ) {
                    if ( reference == null ){
                        return new Mod4jAddBoolPropertyFeature(this);
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.UNIQUE_RULE && alias==null
                ) {
                    if ( reference == null ){
                        return new Mod4jAddUniqueRuleFeature(this);
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_RULE && "BBB".equals(alias)
                ) {
                    if ( reference == null ){
                        return new Mod4jAddBBBFeature(this);
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_RULE && alias==null
                ) {
                    if ( reference == null ){
                        return new Mod4jAddBusinessRuleFeature(this);
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.ASSOCIATION && alias==null
                ) {
                    if ( reference == null ){
                        return new Mod4jAddAssociationFeature(this);
                    }
                } 
                return super.getAddFeature(context);
            }
            /**
             * {@inheritDoc}
             */
            @Override
            public ICopyFeature getCopyFeature(ICopyContext context) {
            	return new Mod4jCopyFeature(this);
            }
            /**
             * {@inheritDoc}
             */
            @Override
            public ICreateFeature[] getCreateFeatures() {
                return new ICreateFeature[] { 
                new Mod4jCreateBusinessClassNameOnlyFeature(this) ,
                new Mod4jCreatePackageFeature(this) ,
                new Mod4jCreateAutopackageFeature(this) ,
                new Mod4jCreateBusinessClassFeature(this) ,
                new Mod4jCreateSimpleClassFeature(this) ,
                new Mod4jCreateStringPropertyFeature(this) ,
                new Mod4jCreateStringFeature(this) ,
                new Mod4jCreateBoolPropertyFeature(this) ,
                new Mod4jCreateUniqueRuleFeature(this) ,
                new Mod4jCreateBBBFeature(this) ,
                new Mod4jCreateBusinessRuleFeature(this) 
                };
            }    
            /**
             * {@inheritDoc}
             */
            @Override
            public ICreateConnectionFeature[] getCreateConnectionFeatures() {
                return new ICreateConnectionFeature[] {
                    new Mod4jCreateAssociationFeature(this)
                    , 
                    new Mod4jCreateBusinessClassSuperclassFeature(this)
                };
            }
                /**
                 * {@inheritDoc}
                 */
                @Override
                public IUpdateFeature getUpdateFeature(final IUpdateContext context) {
                    final PictogramElement pictogramElement = context.getPictogramElement();
                    String alias ;
                    if( pictogramElement  instanceof Shape ){
                        Shape dslShape = SprayLayoutService.findDslShape(pictogramElement );
                        alias = peService.getPropertyValue(dslShape,PROPERTY_ALIAS);
                    } else {
                        alias = peService.getPropertyValue(pictogramElement,PROPERTY_ALIAS);
                    }
                //    if (pictogramElement instanceof ContainerShape) {
                        final EObject bo = (EObject) getBusinessObjectForPictogramElement(pictogramElement);
                        if (bo == null) {
                        	return null;
                        }
                    if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && "BusinessClassNameOnly".equals(alias)
                    ) { // 11
                        return new Mod4jUpdateBusinessClassNameOnlyFeature(this); 
                    }
                    if ( bo.eClass()==BusinessDomainDslPackage.Literals.PACKAGE && alias==null
                    ) { // 11
                        return new Mod4jUpdatePackageFeature(this); 
                    }
                    if ( bo.eClass()==BusinessDomainDslPackage.Literals.PACKAGE && "Autopackage".equals(alias)
                    ) { // 11
                        return new Mod4jUpdateAutopackageFeature(this); 
                    }
                    if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && alias==null
                    ) { // 11
                        return new Mod4jUpdateBusinessClassFeature(this); 
                    }
                    if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && "SimpleClass".equals(alias)
                    ) { // 11
                        return new Mod4jUpdateSimpleClassFeature(this); 
                    }
                    if ( bo.eClass()==BusinessDomainDslPackage.Literals.STRING_PROPERTY && alias==null
                    ) { // 11
                        return new Mod4jUpdateStringPropertyFeature(this); 
                    }
                    if ( bo.eClass()==BusinessDomainDslPackage.Literals.STRING_PROPERTY && "String".equals(alias)
                    ) { // 11
                        return new Mod4jUpdateStringFeature(this); 
                    }
                    if ( bo.eClass()==BusinessDomainDslPackage.Literals.BOOL_PROPERTY && alias==null
                    ) { // 11
                        return new Mod4jUpdateBoolPropertyFeature(this); 
                    }
                    if ( bo.eClass()==BusinessDomainDslPackage.Literals.UNIQUE_RULE && alias==null
                    ) { // 11
                        return new Mod4jUpdateUniqueRuleFeature(this); 
                    }
                    if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_RULE && "BBB".equals(alias)
                    ) { // 11
                        return new Mod4jUpdateBBBFeature(this); 
                    }
                    if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_RULE && alias==null
                    ) { // 11
                        return new Mod4jUpdateBusinessRuleFeature(this); 
                    }
                    if (bo instanceof Association && alias==null) { // 33
                        return new Mod4jUpdateAssociationFeature(this); 
                    }
            //        }
                    return super.getUpdateFeature(context);
                }
            /**
             * {@inheritDoc}
             */
            @Override
            public ILayoutFeature getLayoutFeature(final ILayoutContext context) {
                final PictogramElement pictogramElement = context.getPictogramElement();
                final EObject bo = (EObject) getBusinessObjectForPictogramElement(pictogramElement);
                if (bo == null) {
                	return null;
                }
                final String alias = peService.getPropertyValue(pictogramElement,PROPERTY_ALIAS);
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && "BusinessClassNameOnly".equals(alias)
                 ) {
                    return new Mod4jLayoutBusinessClassNameOnlyFeature(this);
                }
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.PACKAGE && alias==null
                 ) {
                    return new Mod4jLayoutPackageFeature(this);
                }
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.PACKAGE && "Autopackage".equals(alias)
                 ) {
                    return new Mod4jLayoutAutopackageFeature(this);
                }
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && alias==null
                 ) {
                    return new Mod4jLayoutBusinessClassFeature(this);
                }
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && "SimpleClass".equals(alias)
                 ) {
                    return new Mod4jLayoutSimpleClassFeature(this);
                }
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.STRING_PROPERTY && alias==null
                 ) {
                    return new Mod4jLayoutStringPropertyFeature(this);
                }
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.STRING_PROPERTY && "String".equals(alias)
                 ) {
                    return new Mod4jLayoutStringFeature(this);
                }
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BOOL_PROPERTY && alias==null
                 ) {
                    return new Mod4jLayoutBoolPropertyFeature(this);
                }
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.UNIQUE_RULE && alias==null
                 ) {
                    return new Mod4jLayoutUniqueRuleFeature(this);
                }
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_RULE && "BBB".equals(alias)
                 ) {
                    return new Mod4jLayoutBBBFeature(this);
                }
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_RULE && alias==null
                 ) {
                    return new Mod4jLayoutBusinessRuleFeature(this);
                }
                return super.getLayoutFeature(context);
            }
            /**
             * {@inheritDoc}
             */
            @Override
            public IRemoveFeature getRemoveFeature(final IRemoveContext context) {
                // Spray specific DefaultRemoveFeature
                final PictogramElement pictogramElement = context.getPictogramElement();
                return new DefaultRemoveFeature(this);
            }
            public IDeleteFeature getDeleteFeature(final IDeleteContext context) {
                final PictogramElement pictogramElement = context.getPictogramElement();
                final EObject bo = getBusinessObjectForPictogramElement(pictogramElement);
                if (bo == null) {
                	return null;
                }
                final String reference = peService.getPropertyValue(pictogramElement, PROPERTY_REFERENCE);
                final String alias = peService.getPropertyValue(pictogramElement,PROPERTY_ALIAS);
            
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && "BusinessClassNameOnly".equals(alias)
                 ) {
                    if( reference == null ){
                        return new DefaultDeleteFeature(this); 
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.PACKAGE && alias==null
                 ) {
                    if( reference == null ){
                        return new DefaultDeleteFeature(this); 
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.PACKAGE && "Autopackage".equals(alias)
                 ) {
                    if( reference == null ){
                        return new DefaultDeleteFeature(this); 
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && alias==null
                 ) {
                    if( reference == null ){
                        return new DefaultDeleteFeature(this); 
                    } else if( reference.equals(BusinessDomainDslPackage.Literals.BUSINESS_CLASS__SUPERCLASS.getName())){
                        return new Mod4jDeleteReferenceBusinessClassSuperclassFeature(this);
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && "SimpleClass".equals(alias)
                 ) {
                    if( reference == null ){
                        return new DefaultDeleteFeature(this); 
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.STRING_PROPERTY && alias==null
                 ) {
                    if( reference == null ){
                        return new DefaultDeleteFeature(this); 
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.STRING_PROPERTY && "String".equals(alias)
                 ) {
                    if( reference == null ){
                        return new DefaultDeleteFeature(this); 
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BOOL_PROPERTY && alias==null
                 ) {
                    if( reference == null ){
                        return new DefaultDeleteFeature(this); 
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.UNIQUE_RULE && alias==null
                 ) {
                    if( reference == null ){
                        return new DefaultDeleteFeature(this); 
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_RULE && "BBB".equals(alias)
                 ) {
                    if( reference == null ){
                        return new DefaultDeleteFeature(this); 
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_RULE && alias==null
                 ) {
                    if( reference == null ){
                        return new DefaultDeleteFeature(this); 
                    }
                } 
                if ( bo.eClass()==BusinessDomainDslPackage.Literals.ASSOCIATION && alias==null
                 ) {
                    if( reference == null ){
                        return new DefaultDeleteFeature(this); 
                    }
                } 
                
                return new DefaultDeleteFeature(this); 
            }
            /** 
             * Ensure that any shape with property {@link ISprayConstants#CAN_MOVE} set to false will not have a move feature.
             */
            /**
             * {@inheritDoc}
             */
            @Override
            public IMoveShapeFeature getMoveShapeFeature(final IMoveShapeContext context) {
                final Shape shape = context.getShape();
                final ContainerShape parent = shape.getContainer();
                EObject eObject = getBusinessObjectForPictogramElement(shape);
                ContainerShape targetContainer = context.getTargetContainer();
                EObject target = getBusinessObjectForPictogramElement(targetContainer);
                if( eObject instanceof BusinessClass){
                    return new  org.eclipselabs.spray.examples.mod4j.features.Mod4jMoveBusinessClassNameOnlyFeature(this);
                }
                
                if( eObject instanceof samplepackage.Package){
                    return new  org.eclipselabs.spray.examples.mod4j.features.Mod4jMovePackageFeature(this);
                }
                
                if( eObject instanceof samplepackage.Package){
                    return new  org.eclipselabs.spray.examples.mod4j.features.Mod4jMoveAutopackageFeature(this);
                }
                
                if( eObject instanceof BusinessClass){
                    return new  org.eclipselabs.spray.examples.mod4j.features.Mod4jMoveBusinessClassFeature(this);
                }
                
                if( eObject instanceof BusinessClass){
                    return new  org.eclipselabs.spray.examples.mod4j.features.Mod4jMoveSimpleClassFeature(this);
                }
                
                if( eObject instanceof StringProperty){
                    return new  org.eclipselabs.spray.examples.mod4j.features.Mod4jMoveStringPropertyFeature(this);
                }
                
                if( eObject instanceof StringProperty){
                    return new  org.eclipselabs.spray.examples.mod4j.features.Mod4jMoveStringFeature(this);
                }
                
                if( eObject instanceof BoolProperty){
                    return new  org.eclipselabs.spray.examples.mod4j.features.Mod4jMoveBoolPropertyFeature(this);
                }
                
                if( eObject instanceof UniqueRule){
                    return new  org.eclipselabs.spray.examples.mod4j.features.Mod4jMoveUniqueRuleFeature(this);
                }
                
                if( eObject instanceof BusinessRule){
                    return new  org.eclipselabs.spray.examples.mod4j.features.Mod4jMoveBBBFeature(this);
                }
                
                if( eObject instanceof BusinessRule){
                    return new  org.eclipselabs.spray.examples.mod4j.features.Mod4jMoveBusinessRuleFeature(this);
                }
                
                return super.getMoveShapeFeature(context);
            }
            /**
             * {@inheritDoc}
             */
            @Override
            public IPasteFeature getPasteFeature(IPasteContext context) {
            	return new Mod4jPasteFeature(this);
            }
            /**
             * {@inheritDoc}
             */
            @Override
            public IDirectEditingFeature getDirectEditingFeature(IDirectEditingContext context) {
                final PictogramElement pictogramElement = context.getPictogramElement();
                final EObject bo = (EObject) getBusinessObjectForPictogramElement(pictogramElement);
                if (bo == null) {
                    return null;
                }
                if (SprayLayoutService.isCompartment(pictogramElement)) {
                    return null; 
                }
                String alias = null;
                if (pictogramElement instanceof Shape) {
                    Shape dslShape = SprayLayoutService.findDslShape(pictogramElement );
                    alias = peService.getPropertyValue(dslShape,PROPERTY_ALIAS);
                } else {
                    alias = peService.getPropertyValue(pictogramElement,PROPERTY_ALIAS);
                }
            	if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && "BusinessClassNameOnly".equals(alias)
            	 ) {
            		return new Mod4jDirectEditBusinessClassNameOnlyFeature(this);
            	}
            	if ( bo.eClass()==BusinessDomainDslPackage.Literals.PACKAGE && alias==null
            	 ) {
            		return new Mod4jDirectEditPackageFeature(this);
            	}
            	if ( bo.eClass()==BusinessDomainDslPackage.Literals.PACKAGE && "Autopackage".equals(alias)
            	 ) {
            		return new Mod4jDirectEditAutopackageFeature(this);
            	}
            	if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && alias==null
            	 ) {
            		return new Mod4jDirectEditBusinessClassFeature(this);
            	}
            	if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && "SimpleClass".equals(alias)
            	 ) {
            		return new Mod4jDirectEditSimpleClassFeature(this);
            	}
            	if ( bo.eClass()==BusinessDomainDslPackage.Literals.STRING_PROPERTY && alias==null
            	 ) {
            		return new Mod4jDirectEditStringPropertyFeature(this);
            	}
            	if ( bo.eClass()==BusinessDomainDslPackage.Literals.STRING_PROPERTY && "String".equals(alias)
            	 ) {
            		return new Mod4jDirectEditStringFeature(this);
            	}
            	if ( bo.eClass()==BusinessDomainDslPackage.Literals.BOOL_PROPERTY && alias==null
            	 ) {
            		return new Mod4jDirectEditBoolPropertyFeature(this);
            	}
            	if ( bo.eClass()==BusinessDomainDslPackage.Literals.UNIQUE_RULE && alias==null
            	 ) {
            		return new Mod4jDirectEditUniqueRuleFeature(this);
            	}
            	if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_RULE && "BBB".equals(alias)
            	 ) {
            		return new Mod4jDirectEditBBBFeature(this);
            	}
            	if ( bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_RULE && alias==null
            	 ) {
            		return new Mod4jDirectEditBusinessRuleFeature(this);
            	}
            	if ( bo.eClass()==BusinessDomainDslPackage.Literals.ASSOCIATION && alias==null
            	 ) {
            		return new Mod4jDirectEditAssociationFeature(this);
            	}
            	return super.getDirectEditingFeature(context);
            }
            /**
             * {@inheritDoc}
             */
            @Override
            public ICustomFeature[] getCustomFeatures(final ICustomContext context) {
                final EObject bo = (EObject) getBusinessObjectForPictogramElement(context.getPictogramElements()[0]);
                if (bo == null) {
                	return new ICustomFeature[0];
                }
                final String alias = GraphitiProperties.get(context.getPictogramElements()[0], PROPERTY_ALIAS);
                if(bo.eClass()==BusinessDomainDslPackage.Literals.PACKAGE && alias==null
                ){
                return new ICustomFeature[]{ 
                new Mod4jCustomRedrawFeature(this)
                };
                }
                if(bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && alias==null
                ){
                return new ICustomFeature[]{ 
                new Mod4jCustomRedrawFeature(this)
                };
                }
                return new ICustomFeature[0];
            }
            	/**
            	 * {@inheritDoc}
            	 */
            	@Override
            	public IResizeShapeFeature getResizeShapeFeature (IResizeShapeContext context) {
            		final PictogramElement pictogramElement = context.getPictogramElement();
            		final EObject bo = (EObject) getBusinessObjectForPictogramElement(pictogramElement);
            		if (bo == null) {
            			return null;
            		}
            		final String alias = peService.getPropertyValue(pictogramElement, PROPERTY_ALIAS);
            		if(bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && "BusinessClassNameOnly".equals(alias)
            		){
            			return new Mod4jResizeBusinessClassNameOnlyFeature(this);    
            		}
            		if(bo.eClass()==BusinessDomainDslPackage.Literals.PACKAGE && alias==null
            		){
            			return new Mod4jResizePackageFeature(this);    
            		}
            		if(bo.eClass()==BusinessDomainDslPackage.Literals.PACKAGE && "Autopackage".equals(alias)
            		){
            			return new Mod4jResizeAutopackageFeature(this);    
            		}
            		if(bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && alias==null
            		){
            			return new Mod4jResizeBusinessClassFeature(this);    
            		}
            		if(bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_CLASS && "SimpleClass".equals(alias)
            		){
            			return new Mod4jResizeSimpleClassFeature(this);    
            		}
            		if(bo.eClass()==BusinessDomainDslPackage.Literals.STRING_PROPERTY && alias==null
            		){
            			return new Mod4jResizeStringPropertyFeature(this);    
            		}
            		if(bo.eClass()==BusinessDomainDslPackage.Literals.STRING_PROPERTY && "String".equals(alias)
            		){
            			return new Mod4jResizeStringFeature(this);    
            		}
            		if(bo.eClass()==BusinessDomainDslPackage.Literals.BOOL_PROPERTY && alias==null
            		){
            			return new Mod4jResizeBoolPropertyFeature(this);    
            		}
            		if(bo.eClass()==BusinessDomainDslPackage.Literals.UNIQUE_RULE && alias==null
            		){
            			return new Mod4jResizeUniqueRuleFeature(this);    
            		}
            		if(bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_RULE && "BBB".equals(alias)
            		){
            			return new Mod4jResizeBBBFeature(this);    
            		}
            		if(bo.eClass()==BusinessDomainDslPackage.Literals.BUSINESS_RULE && alias==null
            		){
            			return new Mod4jResizeBusinessRuleFeature(this);    
            		}
            	return super.getResizeShapeFeature(context);
            }
        }
    '''
}
