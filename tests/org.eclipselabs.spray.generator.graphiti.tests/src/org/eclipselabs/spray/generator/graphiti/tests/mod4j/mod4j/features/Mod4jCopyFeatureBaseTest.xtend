/** ****************************************************************************
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 **************************************************************************** */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.features

import org.eclipse.xtext.junit4.InjectWith
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*

@RunWith(typeof(XtextRunner2))
@InjectWith(typeof(SprayTestsInjectorProvider))
class Mod4jCopyFeatureBaseTest extends AbstractSprayGeneratorTest {

    @Test
    def void test() {
       val fsa = triggerGenerator("mod4j/mod4j-busmod.spray")
       val keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/features/Mod4jCopyFeatureBase.java"
       assertTrue(keyClass + " should have been generated", fsa.files.containsKey(keyClass))
       assertEquals(keyClass + " should have the expected content", fsa.files.get(keyClass).toString, expectedContent.toString)
    }

    def private expectedContent() '''
        /*************************************************************************************
         *
         * Generated by Spray CopyFeature.xtend
         *
         * This file contains generated and should not be changed.
         * Use the extension point class (the direct subclass of this class) to add manual code
         *
         *************************************************************************************/
        package org.eclipselabs.spray.examples.mod4j.features;
        
        import org.eclipse.graphiti.features.IFeatureProvider;
        import org.eclipse.graphiti.features.context.ICopyContext;
        import org.eclipse.graphiti.mm.pictograms.PictogramElement;
        import org.eclipse.graphiti.services.Graphiti;
        import org.eclipse.graphiti.services.IPeService;
        import org.eclipse.graphiti.ui.features.AbstractCopyFeature;
        import samplepackage.BusinessDomainModel;
        
        public abstract class Mod4jCopyFeatureBase extends AbstractCopyFeature {
        
            public Mod4jCopyFeatureBase(IFeatureProvider fp) {
                super(fp);
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public boolean canCopy(ICopyContext context) {
                final PictogramElement[] pes = context.getPictogramElements();
                // nothing selected
                if (pes == null || pes.length == 0) {
                    return false;
                }
                // return true, if all selected elements are a subtypes of BusinessDomainModel
                for (PictogramElement pe : pes) {
                    final Object bo = getBusinessObjectForPictogramElement(pe);
                    if (!(bo instanceof BusinessDomainModel)) {
                        return false;
                    }
                }
                return true;
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public void copy(ICopyContext context) {
                // Copy PictogramElements instead of Objects because of the properties on Shapes.
                PictogramElement[] pes = context.getPictogramElements();
                putToClipboard(pes);
            }
        }
    '''
}
