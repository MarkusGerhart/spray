package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.features

import org.eclipse.xtext.junit4.InjectWith
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*

@RunWith(typeof(XtextRunner2))
@InjectWith(typeof(SprayTestsInjectorProvider))
class Mod4jUpdateAssociationFeatureBaseTest extends AbstractSprayGeneratorTest {

    @Test
    def void test() {
       val fsa = triggerGenerator("mod4j/mod4j-busmod.spray")
       val keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/features/Mod4jUpdateAssociationFeatureBase.java"
       assertTrue(keyClass + " should have been generated", fsa.files.containsKey(keyClass))
       assertEquals(keyClass + " should have the expected content", fsa.files.get(keyClass).toString, expectedContent.toString)
    }

    def private expectedContent() '''
        /*************************************************************************************
         *
         * Generated by Spray UpdateConnectionFromDslFeature.xtend
         *
         * This file contains generated and should not be changed.
         * Use the extension point class (the direct subclass of this class) to add manual code
         *
         *************************************************************************************/
        package org.eclipselabs.spray.examples.mod4j.features;
        
        import org.eclipse.emf.ecore.EObject;
        import com.google.common.base.Function;
        import org.eclipse.graphiti.features.IFeatureProvider;
        import org.eclipse.graphiti.features.IReason;
        import org.eclipse.graphiti.features.context.IUpdateContext;
        import org.eclipse.graphiti.features.impl.Reason;
        import org.eclipse.graphiti.mm.algorithms.GraphicsAlgorithm;
        import org.eclipse.graphiti.mm.algorithms.Text;
        import org.eclipse.graphiti.mm.pictograms.Connection;
        import org.eclipse.graphiti.mm.pictograms.ConnectionDecorator;
        import org.eclipse.graphiti.mm.pictograms.Diagram;
        import org.eclipse.graphiti.mm.pictograms.PictogramElement;
        import org.eclipse.graphiti.services.IGaService;
        import org.eclipselabs.spray.runtime.graphiti.features.AbstractUpdateFeature;
        
        import samplepackage.Association;
        import org.eclipselabs.spray.examples.mod4j.Activator;
        
        public abstract class Mod4jUpdateAssociationFeatureBase extends AbstractUpdateFeature {
        
            public Mod4jUpdateAssociationFeatureBase(final IFeatureProvider fp) {
                super(fp);
                gaService = Activator.get(IGaService.class);
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public boolean canUpdate(final IUpdateContext context) {
                // return true, if linked business object is a EClass
                final PictogramElement pictogramElement = context.getPictogramElement();
                final EObject bo = getBusinessObjectForPictogramElement(pictogramElement);
                return (bo instanceof Association) && (!(pictogramElement instanceof Diagram));
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public IReason updateNeeded(final IUpdateContext context) {
                final PictogramElement pictogramElement = context.getPictogramElement();
                final EObject bo = getBusinessObjectForPictogramElement(pictogramElement);
                if (!(bo instanceof Association)) {
                    return Reason.createFalseReason();
                }
                Association eClass = (Association) bo;
        
                return Reason.createTrueReason();
            }
        
            /**
             * {@inheritDoc}
             */
            @Override
            public boolean update(IUpdateContext context) {
                final PictogramElement pictogramElement = context.getPictogramElement();
                final Association eClass = (Association) getBusinessObjectForPictogramElement(pictogramElement);
        
                if (pictogramElement instanceof Connection) {
                    final Connection conShape = (Connection) pictogramElement;
                    for (ConnectionDecorator dec : conShape.getConnectionDecorators()) {
                        final GraphicsAlgorithm gAlg = dec.getGraphicsAlgorithm();
                        searchChilds(gAlg, eClass);
                    }
                }
        
                return true;
            }
        
            protected void searchChilds(GraphicsAlgorithm gAlg, Association eClass) {
                if (gAlg instanceof Text) {
                    Text text = (Text) gAlg;
                    String id = peService.getPropertyValue(gAlg, TEXT_ID);
                    if (id.equals("assocText")) {
                        text.setValue(eClass.getName());
                    }
                }
                for (GraphicsAlgorithm gAlgChild : gAlg.getGraphicsAlgorithmChildren()) {
                    searchChilds(gAlgChild, eClass);
                }
            }
        
            protected String getValue(final String type, final Association eClass) {
                String result = "";
                return result;
            }
        }
    '''
}
