h1. Getting Started

h2. 15-Minutes Tutorial

h3. Create a new EMF project

First we have to create or reuse a meta model of a business domain that can be referenced by the diagram model to be created in the second step.

* File -> New -> Other...

!images/empty_emf_project.png!

* Project name: @org.mod4j.dsl.businessdomain.mm@
* Download @BusinessDomainDsl.ecore@ ( "@http://tinyurl.com/mc2x6l9@":http://tinyurl.com/mc2x6l9 ) and @BusinessDomainDsl.genmodel@ ( "@http://tinyurl.com/kn3ldox@":http://tinyurl.com/kn3ldox )
* put the downloaded files in the model folder of the just created EMF project
* Download @plugin.xml@ ( "@http://tinyurl.com/lup9lak@":http://tinyurl.com/lup9lak ) and put it directly in the EMF project
* Double click on the @BusinessDomainDsl.genmodel@ and open the context menu at the root element

!images/GenModelGenerate.png!

* Add the _model_ path to the build path --> _Select model Folder_, On the context menu _Build Path_ / _Use as Source Folder_ 
* Add Xtext nature to the project --> _Select the project_, On the context menu _Configure_ / _Add Xtext nature_
* Use _Quick Fix_ in contextmenu at _Problems_ view to solve the problems in the @MANIFEST.MF@ (sets the singleton directive) 

h3. Create a new project

* Create a new Spray project by using the Spray Project Wizard. Open _File / New / Project / Spray / Spray Project_.

!images/projectwizard_1.png!

* Enter the project name @org.eclipselabs.spray.examples.busmod@.
* On the first page you will have to select a EMF metamodel to work with. Click the _Browse Workspace_ button to select an EMF Ecore file from your workspace.

!images/projectwizard_2b.png!

* Spray requires that it can find the corresponding genmodel for the EPackage. If it can be found next to the Ecore file it will be added automatically.
* It must be specified which class will be the root for each diagram. Press _Select Type_ and choose @BusinessDomainDsl.BusinessDomainModel@.
* It can be chosen which file extension the models will have. By default it will be derived from the EPackage name, @businessdomaindsl@. 

!images/projectwizard_3b.png!

* Press _Next_ (or _Finish_ to skip the next page)
* The next page lets you modify some settings for Spray's code generator, like package names to use. Leave the defaults and press _Finish_ for now.
!images/projectwizard_4.png!

h3. Define Shape Model

After finishing the project wizard open the file @busmod.shape@ and paste the code below into the editor:

bc.. 
shape SimpleClassShape {
    rectangle {
        position(x=0, y=0)
        size(width=100, height=25)
        text {
            position(x=5, y=0)
            size(width=95, height=25)
            id = businessClassText            
        }
    }
}
p. 

(Gist: "@busmod.shape@":https://gist.github.com/kthoms/5845602)
 
This defines a rectangle shape with an embedded text. Save this file.

h3. Define Spray Model

Now open the file @busmod.spray@ and paste this model into the file:

bc.. 
import BusinessDomainDsl.*

diagram busmod for BusinessDomainModel style BusmodDefaultStyle

class BusinessClass {
	shape SimpleClassShape {
		name into businessClassText
	}
	behavior {
		create into types palette "Shapes"
	}
}
p. 
(Gist: "@busmod.spray@":https://gist.github.com/kthoms/5845614)

This defines that the class @BusinessClass@ from our domain (ecore) model is represented by the @SimpleClassShape@ shape.

After saving the model the editor sources will be automatically generated to the @src-gen@ folder of the project. An initial @plugin.xml@ is generated to the project root and is updated after saving the project.

At this point your workspace should look like this:

!images/gettingstarted_7.png!

h3. Test the editor

* Start a Runtime Eclipse instance with _Run As / Eclipse Application_. A new Eclipse instance starts with the plugins deployed. You should add in _Run conf._ "-XX:MaxPermSize=150m" to _VM Arguments_ before.
* Create a new project. The type of project does not matter, but for simplicity choose new Java Project and name it "BusmodTest".
* Right-click on the @src@ folder, choose _File / New / Other -> Examples / Graphiti / Graphiti Diagram_
!images/gettingstarted_2.png!
* Choose the Diagram Type "busmod"
!images/gettingstarted_3.png!
* Your new diagram editor opens!
!images/first-editor.png!

As alternative you can create your diagram also this way:
* Right-click on the @src@ folder, choose _File / New / Other -> busmod / New busmod Diagram_
!images/gettingstarted_2b.png!
* Give it a name
* in difference to the wizard used above there are now created two files
** newDiagram.businessdomaindsl: this hold the domain model
** newDiagram.diagram: this hold the pure diagram related stuff and just references elements from the newDiagram.businessdomaindsl

h3. Create your first element

* Click on _BusinessClassNameOnly_ in the palette to select that entry
* Click somewhere in the diagram editor to create the element
* You can now edit the name of the newly added class directly within the diagram
* _Window -> Show View -> Other... -> General/Properties to open the properties view
* Click on the just created element and you can see its attribute values in the properties view
* Type _Person_ in the name field
* You will see the name being changed in the diagram immediately while you type

h2. Extending the 15 Minute Tutorial

This section describes several tutorials to add more functionality to the editor. In these tutorials we assume you start with the models created in the 5 Minute Tutorial. The tutorials in this section can be done individually.

h3. Adding Connections to the Diagram

This section shows how to add an association between two business classes in the diagram. The first step is to define a shape for the association. Do this by opening the busmod.shape file and add the following at the end:

bc.. 
// Shape for associations
connection AssociationConnection {
    connection-type freeform
    placing {
        position (offset=0.5, radius=10, angle=90)
        text {
            size (width=60, height=20)
            id = assocText
        }
    }
}
p. 
Save this file and open @busmod.spray@ and add the following at the end:

bc.. 
// Association
class Association {
    connection AssociationConnection  {
        name into assocText
    } 
    {
        from source;
        to target;
    }
    behavior {
        create into associations palette "Connections"
    }
}
p. 
Save this file and copy the generated plugin.xml to the root of the project again. Now start a new runtime Eclipse as before. You will now find a new element in the palette labeled _Asociation_.  Create two classes on the diagram.  Then select the Association from the palette and drag a line from one business class to the other. Try selecting the association line and changing its name in the properties view.  You should see it change in the diagram immediately.

h3. Implement a Custom Behavior

Extend the @busmod.spray@ model like this:

bc.. 
diagram busmod for BusinessDomainDsl.BusinessDomainModel

behavior actions { 
  custom showInfoForBusinessClass "Show Information"
}

class BusinessClass {
    ...
    behavior {
          create into types palette "Shapes";
        group actions    
    }
    ...
p. 

Find the @BusmodCustomShowInfoForBusinessClassFeature.java@ in your workspace. It should be in the _src-gen/**/feature_ folder
Right-click on @BusmodCustomShowInfoForBusinessClassFeature@ from the @features@ package. Select _Spray -> Move to source folder for manual extension_. 

!images/move_to_src.png!

The file is moved from @src-gen@ to @src@Â (in the same package) and opens in the editor.

Implement the execute() method to open a message dialog.

bc.. 
@Override
public void execute(ICustomContext context, EObject object) {
    MessageDialog.openInformation(Display.getDefault().getActiveShell(), "Information", 
            "Selected object of type "+object.eClass().getName());
}
p. 

!images/adapted_feature_class.png!

p. 

After restarting you can invoke an action "Show Information" from the context menu of a BusinessClass shape.

!images/gettingstarted_5.png!

!images/gettingstarted_6.png!

h2. Adding Style to Your Diagram

In this section we will show you how to integrate the Spray and Shape DSLs with and Style DSL. This tutorial can be applied after the 5-Minutes tutorial.

As you may have already noticed there are three files:
* busmod.style
* busmod.shape
* busmod.spray

We have already seen that shapes are defined in files with the file extension _.shape_ and the editor is defined in the file with the extension _.spray_. Styles are defined in files with the file extension _.style_. Style definition can be imported and used in the shapes.

In the following for the business model DSL this modularization is shown by example. For a full reference of the capabilities of Shape and Style DSL see the later sections of this user guide.

h3. busmod.style

There is already a predefined style BusmodDefaultStyle contained in the busmod.style file generated by the Spray wizard. You can reuse styles by extending them as done here for the @BusinessClassStyle@. This style will have all the values of @BusmodDefaultStyle@, thus also use 12pt as @font-siz@ but additional defines the background color to be yellow. 

bc.. 
style BusmodDefaultStyle {
    description = "The default style of the bm diagram type."
    font-size = 12
}

style BusinessClassStyle extends BusmodDefaultStyle {
    description = "The style for the business class."
    background-color = yellow
}
p. 

h3. busmod.shape

We have seen a very simple shape definition in the 5 minute tutorial, and this section will explain the details and show how to create more complex shapes. A shape is constructed by graphical elements. The element's positions/coordinates and dimensions are defined by absolute values (absolute within the shape container, not within the whole diagram). In the shape file you can refer to styles defined in a style file. 

The text element has a special property called _id_. The value _businessClassText_ is assigned to _id_ in the example model. The value of _businessClassText_ has to be bound in the usage context of the shape in the spray DSL. We see this in busmod.spay file where the _name_ of the business class is assigned to _businessClassText_.  

We add the style _BusinessClassStyle_ to the shape as follows

bc.. 
shape SimpleClassShape {
    rectangle style BusinessClassStyle {
        position(x=0, y=0)
        size(width=100, height=25)
        text {
            position(x=5, y=0)
            size(width=95, height=25)
            id = businessClassText            
        }
    }
}
p. 
Save this file and start a new workspace.  In the editor you will see that the background color of a class that is newly created will be yellow.

h3. busmod.spray

As you can see a style definition may not only be used in the shape file but also directly in the spray file. By referencing the _BusmodDefaultStyle_ at diagram level it will be applied to all shape and connection elements in this diagram. 

In the class BusinessClass the shape is referenced and the parameter _businessClassText_ is bound to the value of the domain model element _BusinessClass_' attribute _name_.

In contrast to the 5-Minutes tutorial we now use the askFor property. This will trigger an input dialog when you create a box or a connection in the diagram editor asking for the name of the box resp. connection. This value is then assigned immediately to the name attribute in this case of _BusinessClass_ resp. _Association_.      

bc.. 
import BusinessDomainDsl.*

diagram busmod for BusinessDomainModel style BusmodDefaultStyle

class BusinessClass icon "ecore/EClass.gif" {
    shape BusinessClassShape {
        name into businessClassText
    }
    behavior {
        create into types palette "Shapes" askFor name;
    }
}

class Association icon "connection16.gif" {
    connection AssociationConnection {
        name into assocText
    }
    {
        from source;
        to target;
        
    }
    behavior {
        create into associations palette "Connections" askFor name
    }
}
p. 

