h1. Spray Extensions Guide

h2. Basic extensions: Generation Gap Pattern

The code generated by Spray can be extended (and even fully overwritten) by the developer. For this, Spray uses the Generation Gap Pattern. More specifically we use Conditional Generation 1 (with one gen folder),  as described in "Generation Gap Pattern":http://heikobehrens.net/2009/04/23/generation-gap-pattern/ by Heiko Behrens. In  short, the concrete, empty, subclasses that are meant as _extension points_ are generated in the @src-gen/@ folder.  When you want to extend them, you need to move the file to the @src/@ folder. The generator will recognize whether an extension point file is in the @src@ folder and in that case not generate it again. Read Heiko's blog for a more elaborate explanation. The classes that can be extended derive
from classes with the same name with suffix @Base@.

The files generated to the @src-gen/@ folder are furthermore marked as derived within Eclipse. Thus, if you accidently try to edit them, a warning dialog pops up.

!images/extension_1.png!

The Spray UI facilitates this repeating task by adding a context menu action on extension point files. For example, right click on the Feature Provider class:

!images/extension_2.png!

Now choose from the context menu _Spray / Move to source folder for manual extension_:

!images/extension_3.png!

After doing this the class is moved to the @src/@ folder. The derived flag is removed and you can extend the class now.

!images/extension_4.png!

If you accidently moved the file to the @src/@ folder and want to let it be generated again, just removed it. With the next generator run it will appear again in the @src-gen/@ folder.


