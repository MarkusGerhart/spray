h2. MetaClass

h3. Referencing Ecore Classes

The @class@ keyword is followed by the (qualified) name of an EClass. You can either fully qualify the name of the EClass, or you can import the EClass with an @import@ statement before and then just use its simple name.

bc. 
class BusinessDomainDsl.BusinessClass : // full qualified name

bc.. 
import BusinessDomainDsl.* // wildcard import
import BusinessDomainDsl.BusinessClass // single import
...

class BusinessClass : // simple name
p. 

The content assist will propose the names of all known EClasses:

!images/metaclass_eclass.png!

h3. Ecore models the development workspace

In the likely case that you want to use a metamodel whose .ecore file is in the development workspace, it is necessary that Xtext indexes the Ecore file and its content. To enable indexing of Ecore files from the workspace, the project containing the .ecore file must have the Xtext nature enabled. If it does not have it yet (the project would have an "X" overlay image), you can configure the nature by right-clicking on the project and choose _Configure / Add Xtext Nature_.

h3. Create Behavior

To allow the creation of new MetaClass instances, a _Create Behavior_ must be specified for the class. This is done in the @behavior@ section, starting with the @create@ keyword. Followed by this, the _containment reference_ of the containing EClass (currently always the model root element associated to the Diagram) must be specified. The keyword @into@ is just for readability to specify that the instance will be inserted _into_ the following containment reference.

bc.. 
diagram mod4j for BusinessDomainModel

class BusinessClass:
  container () { ... }
  behavior {
    create into types "Business Class" palette "Shapes";
  }

p. 
This example above allows the creation of instances of type _BusinessClass_ to be created. The containment reference is named _types_, which is defined by the Diagram model root type _BusinessDomainModel_. The label in the tool palette is "Business Class", and the creation tool is inserted into the palette group named "Shapes". Both the label and palette are optional. If left out, the label is the EClass name, and the creation tool is inserted into a generic palette group.

h3. Class Icon

Following the referenced EClass name an icon representing the class can be defined with the @icon@ keyword. The path to the icon is quoted as a string.

bc. 
class BusinessClass icon "ecore/EClass.gif"

The specified path is relative to a folder named @icons/@ in your project. It is checked that the folder @icons@ exists in your project. If the specified relative path of the icon file does not exist, a warning will be raised.

The content assist can help you entering the known icon paths. It will also show the icons.

!images/metaclass_image.png!

The @icon@ folder must be added to the @bin.includes@ property of the @build.properties@ file. 
If you created the project with the Spray project wizard, the @icon@ folder was already initially created and added to @build.properties@.

bc.. 
...
bin.includes = META-INF/,\
               .,\
               plugin.xml,\
               model/,\
               plugin.properties,\
               icons/
p. 

