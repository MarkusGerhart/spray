h2. The Spray Grammar

!images/spray_grammar.png!

bc.. 

grammar org.eclipselabs.spray.xtext.Spray with org.eclipse.xtext.xbase.Xbase 

import "platform:/resource/org.eclipselabs.spray.mm/model/spray.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore" as types


Diagram :
    'diagram'  name = ID
    
    imports+=Import*
    
    (
        behaviourGroups += BehaviourGroup
    )*
    (
        metaClasses += MetaClass
    )*
    ;

Import:
    'import' importedNamespace=QualifiedNameWithWildCard;

SprayElement :
    Shape | MetaReferenceAsShape | MetaAttributeAsShape;

MetaClass :
    'class'  type=[ecore::EClass|QualifiedName]  ('alias' alias=ID)? ('icon' icon=STRING)?
    ":" representedBy=Shape
    (
    "references" "["
        (references += MetaReference2  ";")*
    "]"    
    )?
    (
    "behavior" "["
           ( 
               ("group" behaviourGroups += [BehaviourGroup] ";"  ) |
               (behaviours += Behaviour ";" )
           )*
    "]"
    )?
    ; 

MetaReference :  
    "reference" reference=[ecore::EReference] 
    ":" representedBy=Connection  
;   

MetaReference2 returns MetaReference:  
    reference=[ecore::EReference] 
    ":" representedBy=Connection  
;   

    
MetaAttribute :
    (pathsegments+=[ecore::EReference] '.')* attribute=[ecore::EAttribute];

MetaReferenceAsShape returns MetaReference :
    'reference' reference=[ecore::EReference]
    ("attribute" labelProperty = [ecore::EAttribute]  )? ;
    
MetaAttributeAsShape returns MetaAttribute :
    'attribute' attribute=[ecore::EAttribute];


BehaviourGroup: 
    "behaviour" name=ID "["
          (behaviours += Behaviour ";")+ 
    "]"
;

Behaviour :
    StandardBehaviour | CustomBehaviour;

StandardBehaviour :
    type=BehaviourType  (label = STRING)? ('palette' paletteCompartment = STRING)?;

CustomBehaviour :
    name = ID (label = STRING);
    
enum BehaviourType :
    CREATE_BEHAVIOUR = 'create' 
    ;
    
Shape :
    (Rectangle | Text | Container | Connection | Line) 
;

Layout :
  { Layout }
 '('
        (
            ( 'width'  '=' lineWidth = INT )?
          & ( 'color'  '=' lineColor = Color)?
          & ( 'fill'   '=' fillColor = Color)?
          & ( 'figure' '=' figure    = STRING)?
          & ( bold ?= 'bold' )?
          & ( italic ?= 'italic' )?
        ) 
      ')'

;

EString returns ecore::EString:
    STRING | ID;


Rectangle returns Rectangle:
    {Rectangle}
    "rectangle"
    layout = Layout //  name=EString
;

Connection returns Connection :
    {Connection}
    'connection' layout = Layout
    (
        '['
        'from' from=[ecore::EReference] ";"
        'to'   to  =[ecore::EReference] ";"
        (
            ('fromText' fromLabel = Text ";")? & 
            ('connectionText' connectionLabel = Text ";")? &
            ('toText' toLabel   = Text ";")?
        )
        ']'
    )?
;

Color:
    ColorConstantRef | RGBColor
;
ColorConstantRef:
    (type=JvmTypeReference '::')? field=[types::JvmField|ValidID]
;

RGBColor:
    'RGB' '(' red=INT ',' green=INT ',' blue=INT ')'
;

Text returns Text:
    {Text}
    'text' layout = Layout
    value = XExpression
    ;

QualifiedNameWithWildCard returns ecore::EString :
    QualifiedName  ('.' '*')?;
    
Line returns Line :
    {Line}
    'line' layout = Layout
;

Container returns Container:
    { Container }
    'container' layout = Layout
    '['
        (parts+=SprayElement  ";" )* 
    ']';

StaticFieldQualifier:
    QualifiedName '::' ValidID
;
