h1. Spray Generator

Explanation of the Spray Xtend2 templates implementation and design decisions (architecture), how does (different) models and their combination with the templates map to the generated artifacts (what should be the expected output)

h2. Reference Implementation
 
All proposed features that should be covered by code generation must be also covered by Reference Implementation code. This reference code must be developed in a way that it can be fully generated from Reference Models.
 
The quality of this reference code is crucial.

h2. Indentation

All Xtend templates should use *4 spaces* instead of tabs. Please check your template Xtend code for occurances of the tab character. 
 
You can visualize them in your workspace by setting the preference option _General / Editors / Text Editors / Show whitespace characters_.
 
To replace all tabs in the current file open the _Find/Replace_ dialog and enter (values without the ' character, this is just used here to visualize the whitespaces)
* Find: @'\t'@
* Replace with: @'    '@
* Check option "Regular expressions"
 
h2. Import Organizing
 
Import statements that must be computed from classes used within generated code must be evaluated before actually printing out the class. To do so, we use a similar pattern like in Xtext's Domainmodel Example: Use an Import organizer, evaluate the class body with all qualified type names, and after evaluating it print out the class header with the collected dynamic imports and the body afterwards.
 
This requires the following pattern in the Xtend classes:

* Derive template class from @FileGenerator@
* Inject extension @NamingExtensions@

bc.. 
class DiagramTypeProvider extends FileGenerator  {
    @Inject extension NamingExtensions naming
p. 

* Implement @mainFile()@ with the following steps:
** Print class header and @package@ statement
** Add static imports
** Add @// MARKER_IMPORT@. This will denote the position where dynamic imports will inserted.
** Print the class body content
bc.. 
    def mainFile(Diagram diagram, String className) '''
        «header(this)»
        package «diagram_package()»;
 
        import org.eclipse.graphiti.dt.AbstractDiagramTypeProvider;
        import org.eclipse.graphiti.tb.IToolBehaviorProvider;
        // MARKER_IMPORT
 
        «body»
    '''
p. 
* Use the extension function @shortName@ on any qualified name. It will print out the simple name of the qualified class name and collects the qualified name for the import manager.
bc.. 
«metaClass.javaInterfaceName.shortName» // javaInterfaceName computes the qualified class name of an EClass interface
 
// prints out 'IFeatureProvider'
"org.eclipse.graphiti.features.IFeatureProvider".shortName
p. 


h2. Modularity

h3. Template Methods

The templates should be organized into reasonable small template definition methods. Usually a good separation is to provide a template for each generated method, which are called when generating a class body.

bc.. 
    def mainFile (MetaClass metaClass, String className) '''
        ...
        public class «className» extends AbstractCreateFeature {
            ...
            «generate_canCreate(metaClass)»
            «generate_create(metaClass)»
            «generate_createModelElement(metaClass)»
            «generate_getCreateImageId(metaClass)»
            «generate_hasDoneChanges(metaClass)»
            «generate_canUndo(metaClass)»
        }
    '''
    
    def generate_canCreate (MetaClass metaClass) '''
        «overrideHeader()»
        public boolean canCreate(ICreateContext context) {
            ...
        }
    '''
    
p. 

When the implementation of a template method grows too large, or is separatable into a sequence of logical parts, the template should delegate to subtemplate methods again.

This makes the template code more maintainable, and allows users later to override smaller parts of the generator if customization is needed.

h3. Hook Templates

To allow insertion of additional fields, constants, methods etc. in (Java) class bodies by subclassed templates, the base class @FileGenerator@ offers the hook template methods @generate_additionalFields()@ and @generate_additionalMethods()@. These methods should be called in a class body template. The user then can override these methods to insert additional code without the need to override the class template itself.

bc.. 
    def mainFile(MetaReference reference, String className) '''
        ...
        public abstract class «className» extends AbstractUpdateFeature {
            «generate_additionalFields(reference)» // call hook template
            public «className»(IFeatureProvider fp) {
                super(fp);
            }
            
            «generate_canUpdate(reference)»
            ...
            «generate_additionalMethods(reference)» // call hook template
        }
    '''
p. 

h3. Generated Code

Also generated methods should not grow too large. The user should be able to override smaller methods in the extensions files. To be able to do this, the generated methods in base classes should mostly be public or protected, and not static nor final.

When appropriate, callback methods should be generated where it is likely for the user to make changes without the need to override a complete method. For example, when creating a connection, the user might want to decorate it.

Example (AddReferenceAsConnection.xtend):

bc.. 
    def mainFile(MetaReference reference, String className) '''
        ...
        public class «className» extends AbstractAddFeature {
            ...
            «generate_add(reference)»
            // generate callback method
            «generate_decorateConnection(reference)»
        }
    '''
            
    def generate_add (MetaReference reference) '''
        ...
        public PictogramElement add(IAddContext context) {
            ...
            // call callback method in generated code
            decorateConnection (addConContext, connection);
        }
    '''

    // template for callback method
    def generate_decorateConnection (MetaReference reference) '''
        /**
         * Override this method to decorate the created connection
         */
        protected void decorateConnection (IAddConnectionContext context, Connection connection) {}
    '''
p. 

h2. Code Documentation

h3. Overridden Methods

If a method from a base class is overridden by generated code, the method should declare the @\@Override@ annotation and the @{@inheritDoc}@ Javadoc annotation. To shorten this, «overrideHeader» generates the necessary code.

*Xtend Template:*

bc. 
    «overrideHeader» 
    public void myMethod (...)

p. 
*Generated code:*

bc. 
    /**
     * {@inheritDoc}
     */
    @Override
    public void myMethod (...)

p. 
 