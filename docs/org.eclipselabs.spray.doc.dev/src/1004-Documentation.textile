h2. Documentation

This section is about how to fix Problems in the documentation process of Spray. This Problems are most not so significant for the content of this but for the form. 


h3. XSL-FO

The problem was that the PDF-documentation wasn't that good-looking. So we want that there are a title page, header and footer, page-numbering and other little fixes. This sounds quite simple but, the documentation is generated by an Ant-Process and the other documents shouldn't be modified. So this was the challenge. 
Summarized we want to beautify and *modify an existing fo-file*. For this we use *XSL-FO* to let the documentation look more fancy. 
We begin with the XSL header-block. The used version is XSL 1.0. Important is that you notice the namespaces. You must add them, when you use XSL or if you match a XML block by example.

bc.. 
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:xslt="http://www.w3.org/1999/XSL/Format"
	xmlns="http://www.w3.org/1999/XSL/Format" 
	xmlns:old="SprayDeveloperGuide.xml"
	xmlns:date="http://exslt.org/dates-and-times" 
	exclude-result-prefixes="old date" >
	<xsl:output indent="yes" omit-xml-declaration="yes" />
	
	<!-- insert the content here -->
p. 


h4. copy template

*Take care* that the following template must be *at the end* of the XSL-file.

bc.. 
	<!-- Copy template -->
	<xsl:template match="node()|@*">
		<xsl:copy>
			<xsl:apply-templates select="node()|@*" />
		</xsl:copy>
	</xsl:template>
p. 

This template copies all content into the output. Alternative you could use this for getting the same result:

bc.. 
	<!-- Alternative Copy-template -->
	<xsl:template match="*"> 
		<xsl:copy> 
			<xsl:copy-of select="attribute::*[.!= '']" /> 
			<xsl:apply-templates /> 
		</xsl:copy> 
	</xsl:template>
p. 

Both templates go over every node in the original and transfer them in the output without modifying.


h4. modify root element

bc.. 
	<!-- Modifying the root node with font-attributes -->
	<xsl:template match="xslt:root">
		<root font-family="Times" font-size="12pt"
			xmlns="http://www.w3.org/1999/XSL/Format">
			<xsl:apply-templates select="@*|node()" />
		</root>
	</xsl:template>
p. 

The template matches only the root element and will be replaced. So we set default font attributes for the document and the rest will be unchanged.


h4. header and footer

We want a header with a horizontal line at the bottom to split it from the content. Also in the footer at the top. The footer should include a page-numbering.
In our Ant-Process there is an option to generate this, but this doesn't look that good. We use this generated footer to replace it with our own header/footer declaration.

bc.. 
	<!-- Replace footer with header and new footer declaration -->
	<xsl:template match="xslt:region-after">
	<!-- header und footer declaration -->
		<region-before extent="2cm" precedence="false"
			region-name="header" />
		<region-after extent="2cm" precedence="false"
			region-name="footer" />
	</xsl:template>
p. 

This will be replaced at the top of the output. It gives the regions a name and a size.
Another porblem is, that now the header/footer will overlap with the content. For that reason we have to add a margin in the @region-body@ node.

bc.. 
	<!-- Add margin top to region body -->
	<xsl:template match="xslt:region-body">
		<region-body margin-bottom="3cm" margin-top="2cm" />
	</xsl:template>
p. 

Now we have a blank header and a generated number in the footer (Ant-Process). We take the existing footer to replace it with a header and a new footer definition.

bc.. 
	<!-- Replace all footer Elements with Header and new Footer -->
	<xsl:template match="xslt:static-content[@flow-name='footer']">
		<!-- Header -->
		<static-content flow-name="header">
			<block font-size="10.0pt" text-align="right">
				<!-- external Graphic with dynamic Source (searching for url of src) -->
				<xsl:element name="external-graphic">
					<xsl:attribute name="src">
					...
				</xsl:element>
			</block>
			<!-- Horizontalline -->
			<block>
				<leader leader-pattern="rule" rule-thickness="1.0pt"
					leader-length="100%" />
			</block>
		</static-content>
		<!-- Footer -->
		<static-content flow-name="footer">
			<block>
				<leader leader-pattern="rule" rule-thickness="1.0pt"
					leader-length="100%" />
			</block>
			<block font-size="10.0pt" text-align="center">
				- <page-number /> -
			</block>
		</static-content>
	</xsl:template>

p. 

Here we search for all @static-content@ nodes that have an attribute flow-name with "footer" as text. If a node match we replace it. Here are also the @leader@ nodes which generate a horizontal line with height of 1pt and width of the document. The new page number is now centered and surrounded by "-".
In the header we create a new @external-graphic@ element. This we will see in the next subsection again.


h4. create a modern title-page

For this we want to show the logo of the project first followed by the headline, authors and the current date.


h5. use attribute for another

bc.. 
	<!-- Modifying the Titlepage -->
	<xsl:template
		match="//xslt:flow/xslt:block/xslt:block[text()='Spray Developer Guide']">
		
		<!-- Beginning with Logo -->
		<block text-align="center" id="SprayAquickwayofcreatingGraphiti">
			<xsl:element name="external-graphic">
				<xsl:attribute name="src"><xsl:value-of select="//xslt:block/xslt:external-graphic/@src" /></xsl:attribute>
				<xsl:attribute name="width">80%</xsl:attribute>
				<xsl:attribute name="content-height">80%</xsl:attribute>
				<xsl:attribute name="content-width">scale-to-fit</xsl:attribute>
				<xsl:attribute name="scaling">uniform</xsl:attribute>
			</xsl:element>
		</block>
		
		...
p. 

We match the block which contains the old title with the text "Spray Developer Guide". There we want our logo which is already implemented in the document but on the wrong place. We will remove this at the next subsection. To get the URL of the logo we search for the @src@-attribute of the originally @external-graphic@. With this information we build a new @external-graphic@ element. We reach this with the @xsl:element@ block. You will only get the wishing effect in combination with the @copy@ template at the top of this section.

bc.. 
		...
		
		<!-- Title -->
		<block font-weight="bold" font-size="25pt" text-align="center"
			space-before="19pt">
			Spray Developer Guide
		</block>
		
		<!-- Authors -->
		<block font-size="14pt" text-align="center" space-before="19pt">Jos
			Warmer, Karsten Thoms, Joerg Reichert
		</block>
		
		...
p. 

The next point of this template is to set the old title followed by a block which contains the authors.


h5. generate dynamic date

bc.. 
	<xsl:stylesheet version="1.0"
	...
	xmlns:date="http://exslt.org/dates-and-times"
		...
		
		<!-- Dynamic Date in Format DD. MonthName YYYY -->
		<block font-weight="italic" font-size="14pt" text-align="center"
			space-before="19pt">
			<xsl:value-of select="date:day-in-month()" />
			.&#160;
			<xsl:value-of select="date:month-name()" />
			&#160;
			<xsl:value-of select="date:year()" />
		</block>
	</xsl:template>
p. 

To genereate date by XSL dynamic you must include the header like this. With the @xsl:value-of@ element we access the date from namespace. Non-breakable spaces are gotten by "&#160;" which you can use for formatting. How to remove the old content you don't need anymore, like the logo in the content, you have to see in the 'clean up' subsection.


h4. set hyperlinkstyle

bc.. 
<!-- Underline Hyperlinks -->
	<xsl:template match="//xslt:inline[starts-with(text(),'http')]">
		<inline text-decoration="underline" color="blue">
			<xsl:value-of select="."></xsl:value-of>
		</inline>
	</xsl:template>
p. 

Here we match all @inline@ elements which text is like 'http...'. We get the content of them with @xsl:value-of@ and the dot as mark for the found node. Then all content will surrounded by a new @inline@ block with other attributes. 

h4. add attributes to existing node

bc.. 
	<!-- Formatter codeblocks and delete the obsolete parent node -->
	<xsl:template match="//xslt:block[@font-family='monospace']">
		<xsl:copy>
			<xsl:copy-of select="@*" />
			<xsl:attribute name="background-color">rgb(246, 244, 240)</xsl:attribute>
			<xsl:attribute name="border-width">1px</xsl:attribute>
			<xsl:attribute name="border-style">solid</xsl:attribute>
			<xsl:attribute name="border-color">rgb(212,212,212)</xsl:attribute>
			<xsl:attribute name="padding">2px</xsl:attribute>
			<xsl:copy-of select="./node()/text()" />
		</xsl:copy>
		<xsl:apply-templates />
	</xsl:template>
p. 

In this case we want to mark a block which contains code. So first you match the node you want to modify and you copy the existing attributes with @copy-of@. After this you add new attributes with XSL. In this example you copying text of the child in the modified element which will be deleted later. If you want to apply all content you have to set a '*' instead of './node()/text()'.


h4. forcing page break

If you have a fo:block and want no page-break in the content of this block. For this case you have to choice 1 of the 3 following attributes which you set for the fo:block. 

bc.. 
<fo:block page-break-inside="avoid">
  ...
</fo:block>
p. 

There also

* page-break-after
* page-break-before

We recommended to use

* page-break-inside

Values for this attributes are 
* auto - same effect as you won't use this attribute
* always - Force a page break
* avoid - is the best choice. The name says it all.

For more informations you may look at http://www.w3.org/TR/xslfo20 .


h4. remove nodes

If you copy your document like in *copy template* section you may want to remove some nodes. That is quite simple. You match all nodes you don't want to copy *after* the copy template like this.

bc.. 
	<!-- copy template -->
	...
	
	<!-- Remove unwanted Contents -->
	<xsl:template match="//xslt:block[@id='SprayAquickwayofcreatingGraphiti']" />
	...
p. 

In this case all blocks that has an id like this will not been copied.


h4. match node which contains ... and ...

bc.. 
<xsl:template match="//xslt:block[@font-family='monospace'][xslt:block[@font-family='monospace'][text()!='']]">
p. 

We see a nested template match. Here you get all blocks with the attribute @font-family='monospace'@ *and* contains another block with the same attribute *and* which contains text.

h3. Ant-Process

The problem was that you didn't see the @«@-character after generating the documentation files (html, docbook, pdf, eclipse-help) by Ant. The textile files are written in *UTF-8* and that is the clou.
To fix this encoding problem you have to look in the 'generate-help-build.xml' of the Ant-process. Here you should add to every @copy@, @concats@, @xslt@, or other nodes in which you work with the textile content, the attribute @encoding="UTF-8"@‚.

bc.. 
	...
	<move file="${content.gen.dir}/${sprayhelp.target.xml.file}" todir="${content.gen.docbook.dir}" encoding="UTF-8" />
	...
p. 

Additional you have to add to all *<wikitext-to-...* -processes a @sourceencoding@-attribute like this: 

bc.. 
	...
	<wikitext-to-html sourceencoding="UTF-8" formatOutput="true" markupLanguage="${content.source.language}" .../>
	...
p. 



 