h1. Build Management

h2. Built within Eclipse

As developer you will usually work just with the projects in the workspace and do not care about how Spray is built from command-line or on the continuous integration server. But also here you will face some build steps that require your manual work.

Typically there are launch configurations (files with @.launch@ extension) that facilitate these tasks.

h3. Generate DSL implementation

After a clean checkout it is required to run the workflows to produce implementation code in a specific order:

* org.eclipselabs.spray.styles/GenerateStyles.mwe2.launch
* org.eclipselabs.spray.shapes/GenerateShapes.mwe2.launch
* org.eclipselabs.spray.mm/GenerateSprayMM.mwe2.launch
* org.eclipselabs.spray.xtext/GenerateSpray.mwe2.launch

h3. Build documentation

The documentation is generated using Ant. You will find the following launch configurations to create the documents:
* Developer doc: @org.eclipselabs.spray.doc.dev/org.eclipselabs.spray.doc.dev generate-help-build.xml.launch@
* User doc: @org.eclipselabs.spray.doc.user/org.eclipselabs.spray.doc.user generate-help-build.xml.launch@ 

h2. Spray Maven Build

Spray is using Maven Tycho for building. You need a Maven 3 installation. Usually you should have m2e ( "@http://eclipse.org/m2e/@":http://eclipse.org/m2e/ ) installed, which has a Maven 3 installation embedded. If you want to run builds from command-line get a Maven distribution ( "@http://maven.apache.org/download.cgi@":http://maven.apache.org/download.cgi ) and add the @bin@ folder to system path.

h3. Maven @settings.xml@

The common Maven settings are located at @devtools/org.eclipselabs.spray.distribution/settings.xml@. This settings file configures the remote repositories that Spray needs (not everything is available through Maven Central) the server settings for deployment onto the Cloudbees Repository.

The password in @settings.xml@ have been encrypted, and you need a proper @settings-security.xml@ file, which is owned by Karsten Thoms. If you have deployment rights you can set your own credentials, or ask Karsten to provide it to you via personal mail.

See the Maven Password Encryption Guide ( "@http://maven.apache.org/guides/mini/guide-encryption.html@":http://maven.apache.org/guides/mini/guide-encryption.html ) for more details.
 

h3. Build Spray projects

Configure the environment variable @MAVEN_OPTS@ to value "@-XX:MaxPermSize=150m -Xmx768m@".

Builds are run from the @/releng/org.eclipselabs.spray.distribution@ directory. Open a command-line window here.

bc. 
mvn clean install
p. 

Maven will download all required artifacts and plugins automatically and at the end you should get

bc.. 
[INFO] Reactor Summary:
[INFO]
[INFO] org.eclipselabs.spray.targetplatform .............. SUCCESS [0.156s]
[INFO] org.eclipselabs.spray.parent ...................... SUCCESS [0.065s]
[INFO] org.eclipselabs.spray.generator.common ............ SUCCESS [5.482s]
[INFO] org.eclipselabs.spray.styles.mm ................... SUCCESS [6.128s]
[INFO] org.eclipselabs.spray.shapes.mm ................... SUCCESS [7.426s]
[INFO] org.eclipselabs.spray.mm .......................... SUCCESS [6.414s]
[INFO] org.eclipselabs.spray.runtime.graphiti ............ SUCCESS [0.766s]
[INFO] org.eclipselabs.spray.runtime.xtext ............... SUCCESS [3.782s]
[INFO] org.eclipselabs.spray.styles ...................... SUCCESS [22.686s]
[INFO] org.eclipselabs.spray.shapes ...................... SUCCESS [27.211s]
[INFO] org.eclipselabs.spray.xtext ....................... SUCCESS [24.618s]
[INFO] org.eclipselabs.spray.generator.graphiti .......... SUCCESS [8.607s]
[INFO] org.eclipselabs.spray.runtime.xtext.ui ............ SUCCESS [0.777s]
[INFO] org.eclipselabs.spray.styles.ui ................... SUCCESS [1.594s]
[INFO] org.eclipselabs.spray.shapes.ui ................... SUCCESS [1.874s]
[INFO] org.eclipselabs.spray.xtext.ui .................... SUCCESS [5.017s]
[INFO] org.eclipselabs.spray.generator.graphiti.ui ....... SUCCESS [0.289s]
[INFO] org.eclipselabs.spray.runtime.graphiti.xtext ...... SUCCESS [0.197s]
[INFO] org.eclipselabs.spray.runtime.graphiti.zest ....... SUCCESS [0.140s]
[INFO] org.eclipselabs.spray.styles.generator ............ SUCCESS [2.091s]
[INFO] org.eclipselabs.spray.styles.generator.ui ......... SUCCESS [0.313s]
[INFO] org.eclipselabs.spray.shapes.generator ............ SUCCESS [14.417s]
[INFO] org.eclipselabs.spray.shapes.generator.ui ......... SUCCESS [0.322s]
[INFO] org.eclipselabs.spray.tychohelpers ................ SUCCESS [0.166s]
[INFO] org.eclipselabs.spray.examples.petrinet.domain .... SUCCESS [0.323s]
[INFO] org.eclipselabs.spray.examples.petrinet ........... SUCCESS [12.172s]
[INFO] org.eclipselabs.spray.examples.bpmn.domain ........ SUCCESS [0.548s]
[INFO] org.eclipselabs.spray.examples.bpmn ............... SUCCESS [17.480s]
[INFO] org.eclipselabs.spray.testhelper .................. SUCCESS [0.280s]
[INFO] org.eclipselabs.spray.styles.tests ................ SUCCESS [21.491s]
[INFO] org.eclipselabs.spray.shapes.tests ................ SUCCESS [14.735s]
[INFO] Eclipselabs Spray ................................. SUCCESS [0.005s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
p. 

The target platform for this build is computed from the one build at Cloudbees. You can build this repository also locally and use it. To do this build the target platform repository (see next section) and activate the profile @local-build@.

bc.. 
mvn clean install -Dlocal-build 
p. 


h3. Build target platform repository

In directory @/releng/org.eclipselabs.spray.distribution@ execute: 

bc.. 
mvn clean install -Pmodules-targetplatform
p. 

This first build will create a p2 repository, which serves as a local target platform repository. The repository contains all bundles and features that are required to build the Spray projects. This build has only to be executed when the target platform changes.

p. 

Maven will download all required artifacts and plugins automatically and at the end you should get

bc.. 
[INFO] Reactor Summary:
[INFO]
[INFO] org.eclipselabs.spray.targetplatform .............. SUCCESS [0.211s]
[INFO] org.eclipselabs.spray.parent ...................... SUCCESS [0.174s]
[INFO] org.eclipselabs.spray.repository.parent ........... SUCCESS [0.050s]
[INFO] org.eclipselabs.spray.releng.repository ........... SUCCESS [38.918s]
[INFO] Eclipselabs Spray ................................. SUCCESS [0.004s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
p. 

In directory @releng/org.eclipselabs.spray.repository/target/repository@ an Eclipse P2 repository is built, which contains all plugins and sources.

h3. Test execution naming scheme

The Surefire plug-ins are configured with several executions that are using different configurations. Which test class is run by which execution is determined by the naming of the test class:
* all classes that end with PluginTest.java will be run as headless JUnit plug-in test by the Tycho Surefire plug-in
* all classes that end with PluginUITest.java will be run as JUnit plug-in test in a popping up Eclipse workbench instance by the Tycho Surefire plug-in
* all classes not ending with PluginTest or PluginUITest will be run as normal JUnit test by the Maven Surefire plug-in

If you know that the current Eclipse test plug-in will never contain plugin tests and/or plugin UI tests you can override the parent Tycho Surefire plug-in configuration and bind the corresponding execution to a non-existing Maven lifecycle phase. See org.eclipselabs.spray.styles.tests/pom.xml as an example. 

h3. Disable execution of UI tests

The build executes UI tests developed with SWTBot ( "@http://www.eclipse.org/swtbot/@":http://www.eclipse.org/swtbot/ by default. If you want to skip executing these tests, add the @skip-plugin-ui-tests@ profile:

bc.. 
mvn clean install -Pskip-plugin-ui-tests
p. 


h2. Parent POM

Spray's Parent POM can be found at @releng/org.eclipselabs.spray.parent/pom.xml@.

h3. Plugin Management

All Maven Plugins that are used in the build are declared in the @<pluginManagement>@ section. Plugin versions are only managed here, module POMs must not specify any plugin version! If a common configuration can be defined for a plugin, this configuration is already added to the plugin in the plugin management section.

To check for possible updates run frequently

bc.. 
mvn versions:display-plugin-updates
p. 

h2. Profiles

h3. Repository selection profiles

h4. Profile @local-build@

This profile will select the locally built target platform repository to resolve dependencies. When activated it is not required to query the remote target platform repository, which boosts the startup time of the build. It requires that the local target platform repository was materialized before (see "Build target platform repository").

The profile is activated by the presence of the property @local-build@. To activate it set the property.

When testing target platform updates before making them effective for all users and builds it is recommended to build the target platform repository locally and test the build against it by activating this profile.

bc.. 
mvn -Dlocal-build ...
p. 

When this profile is activated the profile @remote-build@ gets deactivated.

h4. Profile @remote-build@ 

This profile is activated by default. The target platform will be computed from the remotely build target platform repository on the Cloudbees server. Since the target platform repository is already an aggregated one

h3. Modules selection profiles

Spray contains a lot of sub projects. Running a build over all projects is usually not feasible, since it is a long-running task. Thus the user will usually activate one profile that selects a sub set of modules.

The profiles are defined in @/releng/org.eclipselabs.spray.distribution/pom.xml@.

h4. Profile @modules-default@

The @modules-default@ is activated by default, i.e. the user does not have to specify anything. The contained modules are:
* all plugins from the @/plugins@ directory
* all plugin tests from the @/tests@ directory
* example "Businessdomain DSL" from @/examples/one@
* example "Petrinet" from @/examples/petrinet@
* example "LWC2012" from @/examples/lwc2012@
* example "BPMN 2.0" from @/examples/bpmn2.0@

h4. Profile @withoutExamplesAndTestProjects@

*Use case:* You have done changes to the DSL and/or the generators and just want to check if all runtime, DSL and generator projects can be compiled. 
Activating this profile will only build all runtime, DSL and generator projects. 
As adapting tests and examples to this changes should happen in a second step there is no need to execute them now.  

h4. Profile @onlyExamplesAndTests@

*Use case:* You are sure that all runtime, DSL and generator projects do compile and you are now working on adapting, fixing and extending tests as well as the example projects that are also effected by the changes then you should use this profile.

h4. Profile @modules-targetplatform@

With activating this profile the target platform is build locally, i.e. all required features and plug-ins to compile the Spray code base will be downloaded into @/releng/org.eclipselabs.spray.repository/target/repository@
With using the profile @local-build@ in conjunction with a profile like @modules-default@ or @onlyExamplesAndTests@ you can build the Spray projects offline (otherwise the P2 repository from the Cloudbees Jenkins job will be used). 

h4. Profile @modules-assembly@

Use this profile to build the Spray feature and update site project (this profile will also build the developer feature project and developer update site project). This profile will only build successfully if the runtime, DSL, generator, tests and example projects have been built before.

h4. Profile @modules-docs@

Activating this profile will exclusively built the developer as well as the user documentation, i.e. transform the textile files to HTML and PDF. 

h4. Profile @modules-all@

This profile builds all Spray projects.

h3. Static code analysis profiles

h4. Profile @sonarLocal@

This profile contains the connection data for your local Sonar database as well as the URL of your local Sonar server instance. You may adapt these to your own needs.

To learn more about Sonar (now called SonarQube) have a look at "@http://www.sonarsource.org/@":http://www.sonarsource.org/

h4. Profile @sonarRemote@

This profile contains the connection data for a remote running Sonar server and Sonar database, e.g. hosted on Amazon EC2. You may adapt these to your own needs.

h4. Profile @codeCoverage@

With passing this profile the code and test coverage measurement is activated. JaCoCo as tool is used. This profile configures where the measured data is accumulated and where Sonar should look to derive its coverage reports. 

To learn more about JaCoCo see "@http://www.eclemma.org/@":http://www.eclemma.org/ .

h2. Version management

h3. Setting Spray version

The Ant script @org.eclipselabs.spray.distribution/scripts/build.xml@ contains a goal named @set-version@, which allows to set the global Spray release version. A launch config has been added to the @launch@ folder of the project. When executed it will replace all version identifiers. The changes are not committed then yet.

It is recommended to have no uncommitted changes in your Git repo before executing this script.

h3. Setting Xtext version

For Spray it is important that only the version of Xtext is installed against it was build. Xtext guarantees compatibility on the micro version number, but for an increment in the minor version number there is no guarantee that Spray will run on it. Thus we constraint the usage of Xtext in dependencies to the current minor version range. This is done in the @MANIFEST.MF@ Require-Bundle section with the modifier @bundle-version@. For example, to allow Xtext version 2.4.x the version constraint string is

bc.. 
require-bundle="[2.4.0,2.5.0)"
p. 

This includes the range from 2.4.0 (inclusive) until 2.5.0 (exclusive).

The @build.xml@ script contains a target @set-version-xtext@ which replaces @bundle-version@ constraints by the given input. 

h1. Continuous Integration
 
h2. Introduction
 
We use Cloudbees' DEV@Cloud as infrastructure for a Continuous Integration build. The location of the CI system is "@https://spray.ci.cloudbees.com/@":https://spray.ci.cloudbees.com/
 
h2. Build Jobs
 
h3. Job @spray-ci-build@

Build URL: "@https://spray.ci.cloudbees.com/job/spray-ci-build/@":https://spray.ci.cloudbees.com/job/spray-ci-build/

Pulls branch @master@ of the Git repository every 15 minutes. Build mail messages are sent to @spray-build@googlegroups.com@. To receive build mails register to the @spray-build@ Google Group.

h3. Job @spray-docs-build@

Runs the generation of documentation. The latest build is archived and linked on the Spray project homepage.

* Build URL: "@https://spray.ci.cloudbees.com/job/spray-docs-build/@":https://spray.ci.cloudbees.com/job/spray-docs-build/
* Git Branch: kepler
* Activated profiles: @skip-ui-tests@ @remote-build-snapshot@ @modules-docs@
* Deactivated profiles: @modules-default@
* Schedule: midnight

h3. Job @spray-ci-targetplatform@

Build URL: "@https://spray.ci.cloudbees.com/job/spray-ci-targetplatform/@":https://spray.ci.cloudbees.com/job/spray-ci-targetplatform/

This job has got no automatic trigger. A developer who did changes to the target platform definition (i.e. *.target file and category.xml) is responsible to trigger this job manually after checking in those changes.  Build mail messages are sent to @spray-build@googlegroups.com@. To receive build mails register to the @spray-build@ Google Group.

The artifacts ( "@http://tinyurl.com/nyvwt2z@":http://tinyurl.com/nyvwt2z ) of this job is the P2 repository that is used by the @spray-ci-build@. 

h3. Job @spray-distrobuilder@

Build URL: "@https://spray.ci.cloudbees.com/job/spray-distrobuilder/@":https://spray.ci.cloudbees.com/job/spray-distrobuilder/

This job has got no automatic trigger. This job produces Spray RCP products for Windows, Linux and MacOS each for 64bit architecture only.

The build configuration is based on Tom Schindl's DistroBuilder "@https://github.com/tomsontom/distrobuilder@":https://github.com/tomsontom/distrobuilder

h3. Job @spray-ci-experimental@

Build URL: "@https://spray.ci.cloudbees.com/job/spray-ci-experimental/@":https://spray.ci.cloudbees.com/job/spray-ci-experimental/

Pulls branch @experimental@ of the Git repository every 15 minutes. Build mail messages are sent to @spray-build@googlegroups.com@. To receive build mails register to the @spray-build@ Google Group.

You can push your repository state any time to the @experimental@ branch if you want to test things on the build that might break it, like when changing the build configuration or introducing new dependencies.


h2. Job configuration

h3. Headless UI tests

A build on the Cloudbees Jenkins service cannot start an UI. To execute the UI tests anyway Xvnc server is started within the build. Additionally the metacity window manager is started as a pre-build step with Shell execution. The required hints to solve this issue were found in the blog entry How to run UI tests on hudson.eclipse.org server (on a server without a window manager activated by default) ( "@http://tinyurl.com/nxypl5t@":http://tinyurl.com/nxypl5t )

h2. Administration

The Cloudbees builds are administered by Karsten Thoms and Joerg Reichert. To request changes, add an issue on "@http://code.google.com/a/eclipselabs.org/p/spray/issues/entry@":http://code.google.com/a/eclipselabs.org/p/spray/issues/entry and set the Label "Component-Build".

h1. Release Process

Follow these steps if you want to release a new version of Spray. 

An ant script @org.eclipselabs.spray.distribution/scripts/build.xml@ is prepared to execute all necessary steps. You will need to have checkout out the @spray.distribution@ git repository as a sibling directory to your main Spray repository; the process copies and uploads artifacts within this repository.
 
* Pull the latest state from the repository.
* Open a command-line and go to the @releng/org.eclipselabs.spray.distribution/scripts@ directory
* Call @git status@ to make sure that you have no pending changes open.
* (Optional) Perform @mvn clean install@ to check that the main build would perform without error. The script will invoke this also, but you just make sure that you don't have to rollback changes in the case of failures.
* Execute from this directory the @build.xml@ script.

bc.. 
ant release
p. 

* If something went wrong during the build call @ant release-rollback@. This will drop the created branches and switches back to the main branch. You may have to call this twice when the build failed after a successful Maven build.
* Go to "@http://code.google.com/a/eclipselabs.org/p/spray/downloads/list@":http://code.google.com/a/eclipselabs.org/p/spray/downloads/list and remove the "Featured" tag from the artifacts of the older release, then add the "Deprecated" tag.
* Announce the release on the spray-dev@googlegroups.com mailing list


