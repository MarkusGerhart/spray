h1. Build Management

h2. Built within Eclipse

After a clean checkout it is required to run the workflows to produce implementation code in a specific order:

* org.eclipselabs.spray.styles/GenerateStyles.mwe2.launch
* org.eclipselabs.spray.shapes/GenerateShapes.mwe2.launch
* org.eclipselabs.spray.mm/GenerateSprayMM.mwe2.launch
* org.eclipselabs.spray.xtext/GenerateSpray.mwe2.launch

h2. Spray Maven Build

Spray is using Maven Tycho for building. You need a Maven 3 installation. Usually you should have "m2e":http://eclipse.org/m2e/ installed, which has a Maven 3 installation embedded. If you want to run builds from command-line get a "Maven distribution":http://maven.apache.org/download.cgi and add the @bin@ folder to system path.

Configure the environment variable @MAVEN_OPTS@ to value "@-XX:MaxPermSize=150m -Xmx768m@".

Builds are run from the @/releng/org.eclipselabs.spray.distribution@ directory. Open a command-line window here.

h3. Build target platform repository

In directory @/releng/org.eclipselabs.spray.distribution@ execute: 

bc. 
mvn clean install -Pmodules-targetplatform

This first build will create a p2 repository, which serves as a local target platform repository. The repository contains all bundles and features that are required to build the Spray projects. This build has only to be executed when the target platform changes.

p. 
Maven will download all required artifacts and plugins automatically and at the end you should get

bc.. 
[INFO] Reactor Summary:
[INFO]
[INFO] org.eclipselabs.spray.targetplatform .............. SUCCESS [0.211s]
[INFO] org.eclipselabs.spray.parent ...................... SUCCESS [0.174s]
[INFO] org.eclipselabs.spray.repository.parent ........... SUCCESS [0.050s]
[INFO] org.eclipselabs.spray.releng.repository ........... SUCCESS [38.918s]
[INFO] Eclipselabs Spray ................................. SUCCESS [0.004s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[

h3. Build Spray projects

mvn clean install -Dlocal-build -Dskip.ui.tests


p. 
Maven will download all required artifacts and plugins automatically and at the end you should get

bc.. 
[INFO] Reactor Summary:
[INFO]
[INFO] Eclipselabs Spray ................................. SUCCESS [0.620s]
[INFO] org.eclipselabs.spray.mm .......................... SUCCESS [14.537s]
[INFO] org.eclipselabs.spray.generator.graphiti .......... SUCCESS [2.444s]
[INFO] org.eclipselabs.spray.runtime.graphiti ............ SUCCESS [0.819s]
[INFO] org.eclipselabs.spray.xtext ....................... SUCCESS [24.335s]
[INFO] org.eclipselabs.spray.xtext.ui .................... SUCCESS [1.720s]
[INFO] org.mod4j.dsl.businessdomain.mm ................... SUCCESS [1.143s]
[INFO] org.eclipselabs.spray.examples.one ................ SUCCESS [1.431s]
[INFO] org.eclipselabs.spray.xtext.tests ................. SUCCESS [5.161s]
[INFO] org.eclipselabs.spray.examples.one.tests .......... SUCCESS [48.009s]
[INFO] org.eclipselabs.spray.feature ..................... SUCCESS [0.233s]
[INFO] org.eclipselabs.spray.feature.source .............. SUCCESS [0.178s]
[INFO] org.eclipselabs.spray.feature.sdk ................. SUCCESS [0.246s]
[INFO] org.eclipselabs.spray.releng.repository ........... SUCCESS [19.032s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
p. 
 
In directory
@releng/org.eclipselabs.spray.repository/target/repository@
an Eclipse P2 repository is built, which contains all plugins and sources.


h3. Disable execution of UI tests

The build executes UI tests developed with "SWTBot":http://www.eclipse.org/swtbot/ by default. If you want to skip executing these tests, add the @skip-ui-tests@ property:

bc. 
mvn -Dskip-ui-tests clean install

h2. Parent POM

Spray's Parent POM can be found at @releng/org.eclipselabs.spray.parent/pom.xml@.

h3. Plugin Management

All Maven Plugins that are used in the build are declared in the @<pluginManagement>@ section. Plugin versions are only managed here, module POMs must not specify any plugin version! If a common configuration can be defined for a plugin, this configuration is already added to the plugin in the plugin management section.

To check for possible updates run frequently

bc. mvn versions:display-plugin-updates

h2. Profiles


h3. Repository selection profiles

h4. Profile @local-build@

This profile will select the locally built target platform repository to resolve dependencies. When activated it is not required to query the remote target platform repository, which boosts the startup time of the build. It requires that the local target platform repository was materialized before (see "Build target platform repository").

The profile is activated by the presence of the property @local-build@. To activate it set the property.

When testing target platform updates before making them effective for all users and builds it is recommended to build the target platform repository locally and test the build against it by activating this profile.

bc. mvn -Dlocal-build ...

When this profile is activated the profile @remote-build@ gets deactivated.

h4. Profile @remote-build@ 

This profile is activated by default. The target platform will be computed from the remotely build target platform repository on the Cloudbees server. Since the target platform repository is already an aggregated one

h3. Modules selection profiles

Spray contains a lot of sub projects. Running a build over all projects is usually not feasible, since it is a long-running task. Thus the user will usually activate one profile that selects a sub set of modules.

The profiles are defined in @/releng/org.eclipselabs.spray.distribution/pom.xml@.

h4. Profile @modules-default@

The @modules-default@ is activated by default, i.e. the user does not have to specify anything. The contained modules are:
* all plugins from the @/plugins@ directory
* all plugin tests from the @/tests@ directory
* example "Businessdomain DSL" from @/examples/one@
* example "Petrinet" from @/examples/petrinet@
* example "LWC2012" from @/examples/lwc2012@
* example "BPMN 2.0" from @/examples/bpmn2.0@

h4. Profile @withoutExamplesAndTestProjects@

TODO: Describe

h4. Profile @onlyExamplesAndTests@

TODO: Describe

h4. Profile @modules-targetplatform@

TODO: Describe

h4. Profile @modules-assembly@

TODO: Describe

h4. Profile @modules-docs@

TODO: Describe

h4. Profile @modules-all@

TODO: Describe

h4. Profile @withoutExamplesAndTestProjects@

TODO: Describe

h3. Static code analysis profiles


h4. Profile @sonarLocal@

TODO: Describe

h4. Profile @sonarRemote@

TODO: Describe

h4. Profile @codeCoverage@

TODO: Describe


h1. Continuous Integration
 
h2. Introduction
 
We use Cloudbees' DEV@Cloud as infrastructure for a Continuous Integration build. The location of the CI system is "https://spray.ci.cloudbees.com/":https://spray.ci.cloudbees.com/
 
h2. Build Jobs
 
h3. Spray CI Build

Build URL: "https://spray.ci.cloudbees.com/job/spray-ci-build/":https://spray.ci.cloudbees.com/job/spray-ci-build/

Pulls branch @master@ of the Git repository every 15 minutes. Build mail messages are sent to @spray-build@googlegroups.com@. To receive build mails register to the @spray-build@ Google Group.

h3. Spray Experimental Build

Build URL: "https://spray.ci.cloudbees.com/job/spray-ci-experimental/":https://spray.ci.cloudbees.com/job/spray-ci-experimental/

Pulls branch @experimental@ of the Git repository every 15 minutes. Build mail messages are sent to @spray-build@googlegroups.com@. To receive build mails register to the @spray-build@ Google Group.

You can push your repository state any time to the @experimental@ branch if you want to test things on the build that might break it, like when changing the build configuration or introducing new dependencies.


h2. Administration

The Cloudbees builds are administered by Karsten Thoms and Joerg Reichert. To request changes, "add an issue":http://code.google.com/a/eclipselabs.org/p/spray/issues/entry and set the Label "Component-Build".

h1. Release Process

Follow these steps if you want to release a new version of Spray. 

A shell script @release.sh@ is prepared to execute all necessary steps. You will need to have checkout out the @spray.distribution@ git repository as a sibling directory to your main Spray repository; the process copies and uploads artifacts within this repository.
 
* Pull the latest state from the repository
* Open a command-line and go to the @releng/org.eclipselabs.spray.distribution@ directory
* Execute from this directory the @scripts/release.sh@ script. The script takes 2 arguments:
** The first argument is the version to be released
** The second argument is the next development version
bc. 
sh scripts/release.sh 0.3.0 0.4.0

* Upload the file to the "Downloads":http://code.google.com/a/eclipselabs.org/p/spray/downloads/list section of the project
* Announce the release on the spray-dev@googlegroups.com mailing list



 