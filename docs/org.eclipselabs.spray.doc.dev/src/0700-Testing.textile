h1. Testing

h2. Test Projects

All test projects can be found in the repository in the <tt>tests</tt> folder.

h2. Spray Language Tests

The Spray Language is tested in project <tt>org.eclipselabs.spray.xtext.tests</tt>. This project makes use of the "xtext-utils unittesting":http://code.google.com/a/eclipselabs.org/p/xtext-utils/wiki/Unit_Testing framework. These tests use example models that are read and processed and cover the following topics:
* Parsing of the models
* Resolving cross references / scoping
* Validation
* Formatter
* Serializing

Test models are kept below the <tt>/model</tt> folder. The examples should be as minimal as possible to demonstrate and test a language feature. This is especially important for debugging, since effort for debugging grows with the size of models.

The main test class is <tt>org.eclipselabs.spray.xtext.tests.ModelTests</tt>. The initialization part 

bc.. 
@RunWith(XtextRunner2.class)
@InjectWith(SprayTestsInjectorProvider.class)
public class ModelTests extends XtextTest {
    @Before
    public void before() {
        super.before();
        suppressSerialization();
        EPackage.Registry.INSTANCE.put(GenModelPackage.eNS_URI, GenModelPackage.eINSTANCE);
        EcorePlugin.getEPackageNsURIToGenModelLocationMap().put(BusinessDomainDslPackage.eNS_URI, URI.createURI("classpath:/mod4j/BusinessDomainDsl.genmodel"));
    }


    ...
}
p. 

A test method is simply invoking the @testFile()@ method and passes the file under test. If additional resources are required to resolve cross references (typically at least the Ecore file used as metamodel) these are passed as additional arguments.

bc.. 
    @Test
    public void test_20_color() {
        testFile("testcases/20-color.spray", "mod4j/BusinessDomainDsl.ecore");
    }
p. 
