<?xml version='1.0' ?><!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
	<title>Spray User Guide</title>
	<chapter id="imagesSprayLogoIcon64.pngSprayAneasywaytocreateGraphiti">
		<title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/Spray-Logo-Icon-64.png"/>
				</imageobject>
			</mediaobject> Spray – An easy way to create Graphiti
		</title>
		<para>Authors: Jos Warmer, Karsten Thoms, Joerg Reichert</para>
		<para>
			<emphasis role="bold">Contents</emphasis>
		</para>
		<orderedlist>
			<listitem>
				<para>
					<link linkend="imagesSprayLogoIcon64.pngSprayAneasywaytocreateGraphiti">!images/Spray-Logo-Icon-64.png! Spray - An easy way to create Graphiti</link>
				</para>
			</listitem>
			<listitem>
				<para>
					<link linkend="Introduction">Introduction</link>
				</para>
			</listitem>
			<listitem>
				<para>
					<link linkend="Installintroduction">Install introduction</link>
				</para>
			</listitem>
			<listitem>
				<para>
					<link linkend="SprayDSL">Spray DSL</link>
				</para>
				<orderedlist>
					<listitem>
						<para>
							<link linkend="TheSpraygrammar">The Spray grammar</link>
						</para>
					</listitem>
					<listitem>
						<para>
							<link linkend="ASpraybasedexamplelanguage">A Spray based example language</link>
						</para>
					</listitem>
				</orderedlist>
			</listitem>
			<listitem>
				<para>
					<link linkend="SprayExtensionsGuide">Spray Extensions Guide</link>
				</para>
			</listitem>
		</orderedlist>
	</chapter>
	<chapter id="Introduction">
		<title>Introduction</title>
		<para>The Graphiti framework is a new approach to create highly sophisticated visual 
			editors on top of the GEF framework. Graphiti can easily be integrated with EMF 
			as the domain modeling framework. The creation of visual editors is done in Java, 
			programming against the Graphiti framework API. It is fairly simple, but yet 
			repetitive, which makes it a candidate to be supported by the means of model-driven 
			development.</para>
		<para>This project aims to provide one or more Domain Specific Languages (DSL) (for 
			example with Xtext) to describe Visual DSL Editors against the Graphiti runtime, 
			and provide code generation (for example with Xtend2) to create the boilerplate 
			code for realizing the implementation against the Graphiti framework. Potentially 
			the Spray DSL can be used to generate code for other frameworks as well.</para>
		<para>The generated code is structured in such a way that one can always extend/overwrite 
			the generated code with handwritten Java to add advanced Graphiti features that are 
			not supported directly by the Spray DSL.</para>
		<para>With the help of the tools created in this project Graphiti based diagram editors 
			can be created much faster and reliable than doing it purely by hand.</para>
		<para>A short introduction to Spray can be found in the downloads section. The code is 
			in early state and subject to change.</para>
	</chapter>
	<chapter id="Installintroduction">
		<title>Install introduction</title>
		<para>A 
			<emphasis>very</emphasis> short introduction on how to install spray and run the example.
		</para>
		<orderedlist>
			<listitem>
				<para>Install Eclipse Indigo classic IDE.</para>
			</listitem>
			<listitem>
				<para>Install new software</para>
				<itemizedlist>
					<listitem>
						<para>EMF, Xtext2, MWE2, GEF, Graphiti</para>
					</listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<para>Import all plugins from the plugins and from the examples directories fro the respository</para>
			</listitem>
			<listitem>
				<para>In the example project, look into the &#8218;model’ directory.</para>
				<itemizedlist>
					<listitem>
						<para>you need to change the path in the spray file and the properties file to freflect your situation.</para>
					</listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<para>Run org.xspray.xtext.generator.Main with the full pathname of the spray model file as the only argument as a file URI, like file://C:/xspray/xspray-runtime/org.xspray.examples.one/model/mod4j-busmod.xspray]</para>
			</listitem>
			<listitem>
				<para>This should generate the code in the location described in the .properties file</para>
				<itemizedlist>
					<listitem>
						<para>refresh this project and start a new Eclipse]</para>
					</listitem>
					<listitem>
						<para>in this eclipse create a project and the a new ==&gt; Example ==&gt; Graphiti Diagram ==&gt; Mode4j</para>
					</listitem>
				</itemizedlist>
			</listitem>
		</orderedlist>
		<para>Note that I have only run this on my machine with fixed paths,  so you might encounter some problems doing the above</para>
	</chapter>
	<chapter id="SprayDSL">
		<title>Spray DSL</title>
		<section id="TheSpraygrammar">
			<title>The Spray grammar</title>
			<literallayout><code>
grammar org.eclipselabs.spray.xtext.Spray with org.eclipse.xtext.xbase.Xbase 

import "platform:/resource/org.eclipselabs.spray.mm/model/spray.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore" as types


Diagram :
    'diagram'  name = ID
    
    imports+=Import*
    
    (
        behaviourGroups += BehaviourGroup
    )*
    (
        metaClasses += MetaClass
    )*
	;

Import:
	'import' importedNamespace=QualifiedNameWithWildCard;

SprayElement :
    Shape | MetaReferenceAsShape | MetaAttributeAsShape;

MetaClass :
    'class'  type=[ecore::EClass|QualifiedName]  ('alias' alias=ID)? ('icon' icon=STRING)?
    ":" representedBy=Shape
    (
    "references" "["
        (references += MetaReference2  ";")*
	"]"    
    )?
    (
	"behavior" "["
	       ( 
	           ("group" behaviourGroups += [BehaviourGroup] ";"  ) |
               (behaviours += Behaviour ";" )
           )*
    "]"
    )?
    ; 

MetaReference :  
	"reference" reference=[ecore::EReference] 
	":" representedBy=Connection  
;   

MetaReference2 returns MetaReference:  
	reference=[ecore::EReference] 
	":" representedBy=Connection  
;   

    
MetaAttribute :
	(pathsegments+=[ecore::EReference] '.')* attribute=[ecore::EAttribute];

MetaReferenceAsShape returns MetaReference :
    'reference' reference=[ecore::EReference]
    ("attribute" labelProperty = [ecore::EAttribute]  )? ;
    
MetaAttributeAsShape returns MetaAttribute :
    'attribute' attribute=[ecore::EAttribute];


BehaviourGroup: 
    "behaviour" name=ID "["
          (behaviours += Behaviour ";")+ 
    "]"
;

Behaviour :
    StandardBehaviour | CustomBehaviour;

StandardBehaviour :
    type=BehaviourType  (label = STRING)? ('palette' paletteCompartment = STRING)?;

CustomBehaviour :
    name = ID (label = STRING);
    
enum BehaviourType :
    CREATE_BEHAVIOUR = 'create' 
    ;
    
Shape :
    (Rectangle | Text | Container | Connection | Line) 
;

Layout :
  { Layout }
 '('
        (
            ( 'width'  '=' lineWidth = INT )?
          &amp; ( 'color'  '=' lineColor = Color)?
          &amp; ( 'fill'   '=' fillColor = Color)?
          &amp; ( 'figure' '=' figure    = STRING)?
          &amp; ( bold ?= 'bold' )?
          &amp; ( italic ?= 'italic' )?
        ) 
      ')'

;

EString returns ecore::EString:
	STRING | ID;


Rectangle returns Rectangle:
	{Rectangle}
    "rectangle"
	layout = Layout // 	name=EString
;

Connection returns Connection :
	{Connection}
	'connection' layout = Layout
	(
	    '['
		'from' from=[ecore::EReference] ";"
		'to'   to  =[ecore::EReference] ";"
		(
            ('fromText' fromLabel = Text ";")? &amp; 
            ('connectionText' connectionLabel = Text ";")? &amp;
		    ('toText' toLabel   = Text ";")?
		)
		']'
	)?
;

Color:
	ColorConstantRef | RGBColor
;
ColorConstantRef:
	(type=JvmTypeReference '::')? field=[types::JvmField|ValidID]
;

RGBColor:
	'RGB' '(' red=INT ',' green=INT ',' blue=INT ')'
;

Text returns Text:
	{Text}
	'text' layout = Layout
	value = XExpression
	;

QualifiedNameWithWildCard returns ecore::EString :
	QualifiedName  ('.' '*')?;
	
Line returns Line :
	{Line}
	'line' layout = Layout
;

Container returns Container:
    { Container }
	'container' layout = Layout
	'['
		(parts+=SprayElement  ";" )* 
    ']';

StaticFieldQualifier:
	QualifiedName '::' ValidID
;

</code></literallayout>
		</section>
		<section id="ASpraybasedexamplelanguage">
			<title>A Spray based example language</title>
			<literallayout><code>
diagram mod4j

import BusinessDomainDsl.*
import org.eclipse.graphiti.util.IColorConstant
behaviour samen [
	doit "Do it" ;
]

class BusinessClass:
    container  ( fill=dark_green ) 
    [
          text ( )  { "&lt;&lt;"+eClass.name+"&gt;&gt; " + name};
          line ( color=black width=2);
          reference properties attribute dataType;
          line                   (width=2  color=RGB(255,138,141));
          reference businessRules;   // will use name property by default
          line                   (width=2  color=IColorConstant::DARK_BLUE);
          
//          attribute description; 
          text () "::" + description;   
          line                   (width=1  ) ;
	]   
	references [  
	     superclass : connection(); 
	]
    behavior [
        create  palette "Shapes" ;
        doWithBusinessClass "Do It With";  
        group samen ;
    ]
 
 
class Association icon "connection16.gif":  
    connection () 
    [
        from source;
        to   target;
        fromText text()  "source " + source.name;
        connectionText text() targetMultiplicity.name;
        toText text() name;
    ] 
    behavior [
        create  palette "Connections" ;
        group samen;
    ]




</code></literallayout>
		</section>
	</chapter>
	<chapter id="SprayExtensionsGuide">
		<title>Spray Extensions Guide</title>
		<para>How to extend the generate Graphiti code?</para>
	</chapter>
</book>