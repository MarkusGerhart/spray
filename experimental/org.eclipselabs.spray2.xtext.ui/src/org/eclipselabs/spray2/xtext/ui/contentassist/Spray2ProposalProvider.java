/*
* generated by Xtext
*/
package org.eclipselabs.spray2.xtext.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.common.types.access.IJvmTypeProvider;
import org.eclipse.xtext.common.types.xtext.ui.ITypesProposalProvider;
import org.eclipse.xtext.common.types.xtext.ui.TypeMatchFilters;
import org.eclipse.xtext.common.types.xtext.ui.ITypesProposalProvider.Filter;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipselabs.spray.runtime.graphiti.shape.ISprayConnection;
import org.eclipselabs.spray.runtime.graphiti.shape.ISprayShape;
import org.eclipselabs.spray.runtime.graphiti.styles.ISprayStyle;
import org.eclipselabs.spray2.xtext.spray2.EdgeFigureSection;
import org.eclipselabs.spray2.xtext.spray2.NodeFigureSection;
import org.eclipselabs.spray2.xtext.spray2.Spray2Package;
import org.eclipselabs.spray2.xtext.spray2.SprayStyleRef;
import org.eclipselabs.spray2.xtext.ui.contentassist.AbstractSpray2ProposalProvider;

import com.google.inject.Inject;

/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class Spray2ProposalProvider extends AbstractSpray2ProposalProvider {

    @Inject
    ITypesProposalProvider                proposalProvider;
    @Inject
    IJvmTypeProvider.Factory              typeProviderFactory;

    
    @Override
    public void complete_JvmTypeReference(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        IJvmTypeProvider typeProvider = typeProviderFactory.findOrCreateTypeProvider(model.eResource().getResourceSet());
        Filter filter = TypeMatchFilters.and(TypeMatchFilters.isPublic(), TypeMatchFilters.canInstantiate());
        if (model instanceof SprayStyleRef) {
            JvmType superType = typeProvider.findTypeByName(ISprayStyle.class.getName());
            proposalProvider.createSubTypeProposals(superType, this, context, Spray2Package.Literals.SPRAY_STYLE_REF__STYLE, filter, acceptor);
        }
        if (model instanceof NodeFigureSection) {
            JvmType superType = typeProvider.findTypeByName(ISprayShape.class.getName());
            proposalProvider.createSubTypeProposals(superType, this, context, Spray2Package.Literals.NODE_FIGURE_SECTION__SHAPE_REF, filter, acceptor);
        }
        if (model instanceof EdgeFigureSection) {
            JvmType superType = typeProvider.findTypeByName(ISprayConnection.class.getName());
            proposalProvider.createSubTypeProposals(superType, this, context, Spray2Package.Literals.EDGE_FIGURE_SECTION__SHAPE_REF, filter, acceptor);
        }
        super.complete_JvmTypeReference(model, ruleCall, context, acceptor);
    }


}
