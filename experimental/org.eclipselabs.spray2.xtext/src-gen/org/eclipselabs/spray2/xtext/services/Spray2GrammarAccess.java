/*
* generated by Xtext
*/

package org.eclipselabs.spray2.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class Spray2GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Diagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cDiagramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cForKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cModelTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cModelTypeEClassCrossReference_4_0 = (CrossReference)cModelTypeAssignment_4.eContents().get(0);
		private final RuleCall cModelTypeEClassQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cModelTypeEClassCrossReference_4_0.eContents().get(1);
		private final Assignment cStyleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStyleSprayStyleRefParserRuleCall_5_0 = (RuleCall)cStyleAssignment_5.eContents().get(0);
		private final Assignment cSprayElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSprayElementsSprayElementParserRuleCall_6_0 = (RuleCall)cSprayElementsAssignment_6.eContents().get(0);
		
		//Diagram:
		//	imports+=Import* "diagram" name=ID "for" modelType=[ecore::EClass|QualifiedName] style=SprayStyleRef?
		//	sprayElements+=SprayElement*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* "diagram" name=ID "for" modelType=[ecore::EClass|QualifiedName] style=SprayStyleRef?
		//sprayElements+=SprayElement*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//"diagram"
		public Keyword getDiagramKeyword_1() { return cDiagramKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"for"
		public Keyword getForKeyword_3() { return cForKeyword_3; }

		//modelType=[ecore::EClass|QualifiedName]
		public Assignment getModelTypeAssignment_4() { return cModelTypeAssignment_4; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getModelTypeEClassCrossReference_4_0() { return cModelTypeEClassCrossReference_4_0; }

		//QualifiedName
		public RuleCall getModelTypeEClassQualifiedNameParserRuleCall_4_0_1() { return cModelTypeEClassQualifiedNameParserRuleCall_4_0_1; }

		//style=SprayStyleRef?
		public Assignment getStyleAssignment_5() { return cStyleAssignment_5; }

		//SprayStyleRef
		public RuleCall getStyleSprayStyleRefParserRuleCall_5_0() { return cStyleSprayStyleRefParserRuleCall_5_0; }

		//sprayElements+=SprayElement*
		public Assignment getSprayElementsAssignment_6() { return cSprayElementsAssignment_6; }

		//SprayElement
		public RuleCall getSprayElementsSprayElementParserRuleCall_6_0() { return cSprayElementsSprayElementParserRuleCall_6_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildCard returns ecore::EString:
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class SprayStyleRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SprayStyleRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStyleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStyleJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cStyleAssignment_1.eContents().get(0);
		
		//SprayStyleRef:
		//	"style" style=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//"style" style=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//"style"
		public Keyword getStyleKeyword_0() { return cStyleKeyword_0; }

		//style=JvmTypeReference
		public Assignment getStyleAssignment_1() { return cStyleAssignment_1; }

		//JvmTypeReference
		public RuleCall getStyleJvmTypeReferenceParserRuleCall_1_0() { return cStyleJvmTypeReferenceParserRuleCall_1_0; }
	}

	public class SprayElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SprayElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEdgeElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SprayElement:
		//	NodeElement | EdgeElement;
		public ParserRule getRule() { return rule; }

		//NodeElement | EdgeElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//NodeElement
		public RuleCall getNodeElementParserRuleCall_0() { return cNodeElementParserRuleCall_0; }

		//EdgeElement
		public RuleCall getEdgeElementParserRuleCall_1() { return cEdgeElementParserRuleCall_1; }
	}

	public class NodeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeEClassCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeEClassQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeEClassCrossReference_3_0.eContents().get(1);
		private final Assignment cStyleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStyleSprayStyleRefParserRuleCall_4_0 = (RuleCall)cStyleAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFigureAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFigureNodeFigureSectionParserRuleCall_6_0 = (RuleCall)cFigureAssignment_6.eContents().get(0);
		private final Assignment cToolingAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cToolingToolingSectionParserRuleCall_7_0 = (RuleCall)cToolingAssignment_7.eContents().get(0);
		private final Assignment cBehaviorAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBehaviorBehaviorSectionParserRuleCall_8_0 = (RuleCall)cBehaviorAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//NodeElement:
		//	"node" name=ID "for" type=[ecore::EClass|QualifiedName] style=SprayStyleRef? "{" figure=NodeFigureSection?
		//	tooling=ToolingSection? behavior=BehaviorSection? "}";
		public ParserRule getRule() { return rule; }

		//"node" name=ID "for" type=[ecore::EClass|QualifiedName] style=SprayStyleRef? "{" figure=NodeFigureSection?
		//tooling=ToolingSection? behavior=BehaviorSection? "}"
		public Group getGroup() { return cGroup; }

		//"node"
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//type=[ecore::EClass|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getTypeEClassCrossReference_3_0() { return cTypeEClassCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTypeEClassQualifiedNameParserRuleCall_3_0_1() { return cTypeEClassQualifiedNameParserRuleCall_3_0_1; }

		//style=SprayStyleRef?
		public Assignment getStyleAssignment_4() { return cStyleAssignment_4; }

		//SprayStyleRef
		public RuleCall getStyleSprayStyleRefParserRuleCall_4_0() { return cStyleSprayStyleRefParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//figure=NodeFigureSection?
		public Assignment getFigureAssignment_6() { return cFigureAssignment_6; }

		//NodeFigureSection
		public RuleCall getFigureNodeFigureSectionParserRuleCall_6_0() { return cFigureNodeFigureSectionParserRuleCall_6_0; }

		//tooling=ToolingSection?
		public Assignment getToolingAssignment_7() { return cToolingAssignment_7; }

		//ToolingSection
		public RuleCall getToolingToolingSectionParserRuleCall_7_0() { return cToolingToolingSectionParserRuleCall_7_0; }

		//behavior=BehaviorSection?
		public Assignment getBehaviorAssignment_8() { return cBehaviorAssignment_8; }

		//BehaviorSection
		public RuleCall getBehaviorBehaviorSectionParserRuleCall_8_0() { return cBehaviorBehaviorSectionParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class EdgeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEdgeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeEClassCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeEClassQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeEClassCrossReference_3_0.eContents().get(1);
		private final Assignment cStyleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStyleSprayStyleRefParserRuleCall_4_0 = (RuleCall)cStyleAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFigureAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFigureEdgeFigureSectionParserRuleCall_6_0 = (RuleCall)cFigureAssignment_6.eContents().get(0);
		private final Assignment cToolingAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cToolingToolingSectionParserRuleCall_7_0 = (RuleCall)cToolingAssignment_7.eContents().get(0);
		private final Assignment cBehaviorAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBehaviorBehaviorSectionParserRuleCall_8_0 = (RuleCall)cBehaviorAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//EdgeElement:
		//	"edge" name=ID "for" type=[ecore::EClass|QualifiedName] style=SprayStyleRef? "{" figure=EdgeFigureSection?
		//	tooling=ToolingSection? behavior=BehaviorSection? "}";
		public ParserRule getRule() { return rule; }

		//"edge" name=ID "for" type=[ecore::EClass|QualifiedName] style=SprayStyleRef? "{" figure=EdgeFigureSection?
		//tooling=ToolingSection? behavior=BehaviorSection? "}"
		public Group getGroup() { return cGroup; }

		//"edge"
		public Keyword getEdgeKeyword_0() { return cEdgeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//type=[ecore::EClass|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getTypeEClassCrossReference_3_0() { return cTypeEClassCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTypeEClassQualifiedNameParserRuleCall_3_0_1() { return cTypeEClassQualifiedNameParserRuleCall_3_0_1; }

		//style=SprayStyleRef?
		public Assignment getStyleAssignment_4() { return cStyleAssignment_4; }

		//SprayStyleRef
		public RuleCall getStyleSprayStyleRefParserRuleCall_4_0() { return cStyleSprayStyleRefParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//figure=EdgeFigureSection?
		public Assignment getFigureAssignment_6() { return cFigureAssignment_6; }

		//EdgeFigureSection
		public RuleCall getFigureEdgeFigureSectionParserRuleCall_6_0() { return cFigureEdgeFigureSectionParserRuleCall_6_0; }

		//tooling=ToolingSection?
		public Assignment getToolingAssignment_7() { return cToolingAssignment_7; }

		//ToolingSection
		public RuleCall getToolingToolingSectionParserRuleCall_7_0() { return cToolingToolingSectionParserRuleCall_7_0; }

		//behavior=BehaviorSection?
		public Assignment getBehaviorAssignment_8() { return cBehaviorAssignment_8; }

		//BehaviorSection
		public RuleCall getBehaviorBehaviorSectionParserRuleCall_8_0() { return cBehaviorBehaviorSectionParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class NodeFigureSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeFigureSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFigureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cShapeRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShapeRefJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cShapeRefAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTextPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTextPropertiesTextPropertyAssignmentParserRuleCall_2_1_0 = (RuleCall)cTextPropertiesAssignment_2_1.eContents().get(0);
		private final Assignment cCompartmentPropertiesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cCompartmentPropertiesCompartmentPropertyAssignmentParserRuleCall_2_2_0 = (RuleCall)cCompartmentPropertiesAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//NodeFigureSection:
		//	"figure" shapeRef=JvmTypeReference ("{" textProperties+=TextPropertyAssignment*
		//	compartmentProperties+=CompartmentPropertyAssignment* "}")?;
		public ParserRule getRule() { return rule; }

		//"figure" shapeRef=JvmTypeReference ("{" textProperties+=TextPropertyAssignment*
		//compartmentProperties+=CompartmentPropertyAssignment* "}")?
		public Group getGroup() { return cGroup; }

		//"figure"
		public Keyword getFigureKeyword_0() { return cFigureKeyword_0; }

		//shapeRef=JvmTypeReference
		public Assignment getShapeRefAssignment_1() { return cShapeRefAssignment_1; }

		//JvmTypeReference
		public RuleCall getShapeRefJvmTypeReferenceParserRuleCall_1_0() { return cShapeRefJvmTypeReferenceParserRuleCall_1_0; }

		//("{" textProperties+=TextPropertyAssignment* compartmentProperties+=CompartmentPropertyAssignment* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//textProperties+=TextPropertyAssignment*
		public Assignment getTextPropertiesAssignment_2_1() { return cTextPropertiesAssignment_2_1; }

		//TextPropertyAssignment
		public RuleCall getTextPropertiesTextPropertyAssignmentParserRuleCall_2_1_0() { return cTextPropertiesTextPropertyAssignmentParserRuleCall_2_1_0; }

		//compartmentProperties+=CompartmentPropertyAssignment*
		public Assignment getCompartmentPropertiesAssignment_2_2() { return cCompartmentPropertiesAssignment_2_2; }

		//CompartmentPropertyAssignment
		public RuleCall getCompartmentPropertiesCompartmentPropertyAssignmentParserRuleCall_2_2_0() { return cCompartmentPropertiesCompartmentPropertyAssignmentParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class EdgeFigureSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeFigureSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFigureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cShapeRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShapeRefJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cShapeRefAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTextPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTextPropertiesTextPropertyAssignmentParserRuleCall_2_1_0 = (RuleCall)cTextPropertiesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//EdgeFigureSection:
		//	"figure" shapeRef=JvmTypeReference ("{" textProperties+=TextPropertyAssignment* "}")?;
		public ParserRule getRule() { return rule; }

		//"figure" shapeRef=JvmTypeReference ("{" textProperties+=TextPropertyAssignment* "}")?
		public Group getGroup() { return cGroup; }

		//"figure"
		public Keyword getFigureKeyword_0() { return cFigureKeyword_0; }

		//shapeRef=JvmTypeReference
		public Assignment getShapeRefAssignment_1() { return cShapeRefAssignment_1; }

		//JvmTypeReference
		public RuleCall getShapeRefJvmTypeReferenceParserRuleCall_1_0() { return cShapeRefJvmTypeReferenceParserRuleCall_1_0; }

		//("{" textProperties+=TextPropertyAssignment* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//textProperties+=TextPropertyAssignment*
		public Assignment getTextPropertiesAssignment_2_1() { return cTextPropertiesAssignment_2_1; }

		//TextPropertyAssignment
		public RuleCall getTextPropertiesTextPropertyAssignmentParserRuleCall_2_1_0() { return cTextPropertiesTextPropertyAssignmentParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class ToolingSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ToolingSection");
		private final Keyword cToolingKeyword = (Keyword)rule.eContents().get(1);
		
		//ToolingSection:
		//	"tooling";
		public ParserRule getRule() { return rule; }

		//"tooling"
		public Keyword getToolingKeyword() { return cToolingKeyword; }
	}

	public class BehaviorSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorSection");
		private final Keyword cBehaviorKeyword = (Keyword)rule.eContents().get(1);
		
		//BehaviorSection:
		//	"behavior";
		public ParserRule getRule() { return rule; }

		//"behavior"
		public Keyword getBehaviorKeyword() { return cBehaviorKeyword; }
	}

	public class TextPropertyAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextPropertyAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cKeyJvmEnumerationLiteralCrossReference_1_0 = (CrossReference)cKeyAssignment_1.eContents().get(0);
		private final RuleCall cKeyJvmEnumerationLiteralQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cKeyJvmEnumerationLiteralCrossReference_1_0.eContents().get(1);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAttributeEAttributeCrossReference_3_0 = (CrossReference)cAttributeAssignment_3.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_3_0_1 = (RuleCall)cAttributeEAttributeCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cEditableKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cEditableAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final RuleCall cEditableXBooleanLiteralParserRuleCall_4_1_2_0 = (RuleCall)cEditableAssignment_4_1_2.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cFormatKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Assignment cFormatAssignment_4_2_2 = (Assignment)cGroup_4_2.eContents().get(2);
		private final RuleCall cFormatXBlockExpressionParserRuleCall_4_2_2_0 = (RuleCall)cFormatAssignment_4_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//TextPropertyAssignment:
		//	"text" key=[types::JvmEnumerationLiteral|QualifiedName] "for" attribute=[ecore::EAttribute] ("(" ("editable" "="
		//	editable=XBooleanLiteral)? ("format" "=" format=XBlockExpression)? ")")?;
		public ParserRule getRule() { return rule; }

		//"text" key=[types::JvmEnumerationLiteral|QualifiedName] "for" attribute=[ecore::EAttribute] ("(" ("editable" "="
		//editable=XBooleanLiteral)? ("format" "=" format=XBlockExpression)? ")")?
		public Group getGroup() { return cGroup; }

		//"text"
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }

		//key=[types::JvmEnumerationLiteral|QualifiedName]
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//[types::JvmEnumerationLiteral|QualifiedName]
		public CrossReference getKeyJvmEnumerationLiteralCrossReference_1_0() { return cKeyJvmEnumerationLiteralCrossReference_1_0; }

		//QualifiedName
		public RuleCall getKeyJvmEnumerationLiteralQualifiedNameParserRuleCall_1_0_1() { return cKeyJvmEnumerationLiteralQualifiedNameParserRuleCall_1_0_1; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//attribute=[ecore::EAttribute]
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_3_0() { return cAttributeEAttributeCrossReference_3_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_3_0_1() { return cAttributeEAttributeIDTerminalRuleCall_3_0_1; }

		//("(" ("editable" "=" editable=XBooleanLiteral)? ("format" "=" format=XBlockExpression)? ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//("editable" "=" editable=XBooleanLiteral)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"editable"
		public Keyword getEditableKeyword_4_1_0() { return cEditableKeyword_4_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_4_1_1() { return cEqualsSignKeyword_4_1_1; }

		//editable=XBooleanLiteral
		public Assignment getEditableAssignment_4_1_2() { return cEditableAssignment_4_1_2; }

		//XBooleanLiteral
		public RuleCall getEditableXBooleanLiteralParserRuleCall_4_1_2_0() { return cEditableXBooleanLiteralParserRuleCall_4_1_2_0; }

		//("format" "=" format=XBlockExpression)?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"format"
		public Keyword getFormatKeyword_4_2_0() { return cFormatKeyword_4_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_4_2_1() { return cEqualsSignKeyword_4_2_1; }

		//format=XBlockExpression
		public Assignment getFormatAssignment_4_2_2() { return cFormatAssignment_4_2_2; }

		//XBlockExpression
		public RuleCall getFormatXBlockExpressionParserRuleCall_4_2_2_0() { return cFormatXBlockExpressionParserRuleCall_4_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}

	public class CompartmentPropertyAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompartmentPropertyAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompartmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cKeyJvmEnumerationLiteralCrossReference_1_0 = (CrossReference)cKeyAssignment_1.eContents().get(0);
		private final RuleCall cKeyJvmEnumerationLiteralQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cKeyJvmEnumerationLiteralCrossReference_1_0.eContents().get(1);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAttributeEAttributeCrossReference_3_0 = (CrossReference)cAttributeAssignment_3.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_3_0_1 = (RuleCall)cAttributeEAttributeCrossReference_3_0.eContents().get(1);
		
		//CompartmentPropertyAssignment:
		//	"compartment" key=[types::JvmEnumerationLiteral|QualifiedName] "for" attribute=[ecore::EAttribute];
		public ParserRule getRule() { return rule; }

		//"compartment" key=[types::JvmEnumerationLiteral|QualifiedName] "for" attribute=[ecore::EAttribute]
		public Group getGroup() { return cGroup; }

		//"compartment"
		public Keyword getCompartmentKeyword_0() { return cCompartmentKeyword_0; }

		//key=[types::JvmEnumerationLiteral|QualifiedName]
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//[types::JvmEnumerationLiteral|QualifiedName]
		public CrossReference getKeyJvmEnumerationLiteralCrossReference_1_0() { return cKeyJvmEnumerationLiteralCrossReference_1_0; }

		//QualifiedName
		public RuleCall getKeyJvmEnumerationLiteralQualifiedNameParserRuleCall_1_0_1() { return cKeyJvmEnumerationLiteralQualifiedNameParserRuleCall_1_0_1; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//attribute=[ecore::EAttribute]
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_3_0() { return cAttributeEAttributeCrossReference_3_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_3_0_1() { return cAttributeEAttributeIDTerminalRuleCall_3_0_1; }
	}
	
	
	private DiagramElements pDiagram;
	private ImportElements pImport;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private SprayStyleRefElements pSprayStyleRef;
	private SprayElementElements pSprayElement;
	private NodeElementElements pNodeElement;
	private EdgeElementElements pEdgeElement;
	private NodeFigureSectionElements pNodeFigureSection;
	private EdgeFigureSectionElements pEdgeFigureSection;
	private ToolingSectionElements pToolingSection;
	private BehaviorSectionElements pBehaviorSection;
	private TextPropertyAssignmentElements pTextPropertyAssignment;
	private CompartmentPropertyAssignmentElements pCompartmentPropertyAssignment;
	
	private final GrammarProvider grammarProvider;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public Spray2GrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammarProvider = grammarProvider;
		this.gaXbase = gaXbase;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Diagram:
	//	imports+=Import* "diagram" name=ID "for" modelType=[ecore::EClass|QualifiedName] style=SprayStyleRef?
	//	sprayElements+=SprayElement*;
	public DiagramElements getDiagramAccess() {
		return (pDiagram != null) ? pDiagram : (pDiagram = new DiagramElements());
	}
	
	public ParserRule getDiagramRule() {
		return getDiagramAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildCard returns ecore::EString:
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//SprayStyleRef:
	//	"style" style=JvmTypeReference;
	public SprayStyleRefElements getSprayStyleRefAccess() {
		return (pSprayStyleRef != null) ? pSprayStyleRef : (pSprayStyleRef = new SprayStyleRefElements());
	}
	
	public ParserRule getSprayStyleRefRule() {
		return getSprayStyleRefAccess().getRule();
	}

	//SprayElement:
	//	NodeElement | EdgeElement;
	public SprayElementElements getSprayElementAccess() {
		return (pSprayElement != null) ? pSprayElement : (pSprayElement = new SprayElementElements());
	}
	
	public ParserRule getSprayElementRule() {
		return getSprayElementAccess().getRule();
	}

	//NodeElement:
	//	"node" name=ID "for" type=[ecore::EClass|QualifiedName] style=SprayStyleRef? "{" figure=NodeFigureSection?
	//	tooling=ToolingSection? behavior=BehaviorSection? "}";
	public NodeElementElements getNodeElementAccess() {
		return (pNodeElement != null) ? pNodeElement : (pNodeElement = new NodeElementElements());
	}
	
	public ParserRule getNodeElementRule() {
		return getNodeElementAccess().getRule();
	}

	//EdgeElement:
	//	"edge" name=ID "for" type=[ecore::EClass|QualifiedName] style=SprayStyleRef? "{" figure=EdgeFigureSection?
	//	tooling=ToolingSection? behavior=BehaviorSection? "}";
	public EdgeElementElements getEdgeElementAccess() {
		return (pEdgeElement != null) ? pEdgeElement : (pEdgeElement = new EdgeElementElements());
	}
	
	public ParserRule getEdgeElementRule() {
		return getEdgeElementAccess().getRule();
	}

	//NodeFigureSection:
	//	"figure" shapeRef=JvmTypeReference ("{" textProperties+=TextPropertyAssignment*
	//	compartmentProperties+=CompartmentPropertyAssignment* "}")?;
	public NodeFigureSectionElements getNodeFigureSectionAccess() {
		return (pNodeFigureSection != null) ? pNodeFigureSection : (pNodeFigureSection = new NodeFigureSectionElements());
	}
	
	public ParserRule getNodeFigureSectionRule() {
		return getNodeFigureSectionAccess().getRule();
	}

	//EdgeFigureSection:
	//	"figure" shapeRef=JvmTypeReference ("{" textProperties+=TextPropertyAssignment* "}")?;
	public EdgeFigureSectionElements getEdgeFigureSectionAccess() {
		return (pEdgeFigureSection != null) ? pEdgeFigureSection : (pEdgeFigureSection = new EdgeFigureSectionElements());
	}
	
	public ParserRule getEdgeFigureSectionRule() {
		return getEdgeFigureSectionAccess().getRule();
	}

	//ToolingSection:
	//	"tooling";
	public ToolingSectionElements getToolingSectionAccess() {
		return (pToolingSection != null) ? pToolingSection : (pToolingSection = new ToolingSectionElements());
	}
	
	public ParserRule getToolingSectionRule() {
		return getToolingSectionAccess().getRule();
	}

	//BehaviorSection:
	//	"behavior";
	public BehaviorSectionElements getBehaviorSectionAccess() {
		return (pBehaviorSection != null) ? pBehaviorSection : (pBehaviorSection = new BehaviorSectionElements());
	}
	
	public ParserRule getBehaviorSectionRule() {
		return getBehaviorSectionAccess().getRule();
	}

	//TextPropertyAssignment:
	//	"text" key=[types::JvmEnumerationLiteral|QualifiedName] "for" attribute=[ecore::EAttribute] ("(" ("editable" "="
	//	editable=XBooleanLiteral)? ("format" "=" format=XBlockExpression)? ")")?;
	public TextPropertyAssignmentElements getTextPropertyAssignmentAccess() {
		return (pTextPropertyAssignment != null) ? pTextPropertyAssignment : (pTextPropertyAssignment = new TextPropertyAssignmentElements());
	}
	
	public ParserRule getTextPropertyAssignmentRule() {
		return getTextPropertyAssignmentAccess().getRule();
	}

	//CompartmentPropertyAssignment:
	//	"compartment" key=[types::JvmEnumerationLiteral|QualifiedName] "for" attribute=[ecore::EAttribute];
	public CompartmentPropertyAssignmentElements getCompartmentPropertyAssignmentAccess() {
		return (pCompartmentPropertyAssignment != null) ? pCompartmentPropertyAssignment : (pCompartmentPropertyAssignment = new CompartmentPropertyAssignmentElements());
	}
	
	public ParserRule getCompartmentPropertyAssignmentRule() {
		return getCompartmentPropertyAssignmentAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof")
	//	type=[types::JvmType|QualifiedName] | => ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? => memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XClosure | XBooleanLiteral | XIntLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	{XClosure} "[" => ((declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" => (localVarName=ValidID ":")? switch=XExpression "{" cases+=XCasePart+ ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? => featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? "("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")" => arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XIntLiteral returns XExpression:
	//	{XIntLiteral} value=INT;
	public XbaseGrammarAccess.XIntLiteralElements getXIntLiteralAccess() {
		return gaXbase.getXIntLiteralAccess();
	}
	
	public ParserRule getXIntLiteralRule() {
		return getXIntLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
